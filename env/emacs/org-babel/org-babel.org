#+STARTUP: folded indent latexpreview
#+ATTR_ORG: :width 480

- [[https://orgmode.org/manual/][The Org Manual]]

* Reference

- [[https://orgmode.org/manual/Working-with-Source-Code.html#Working-with-Source-Code][Working with Source Code]]
- [[http://misohena.jp/blog/2017-10-26-how-to-use-code-block-of-emacs-org-mode.html][org-mode のコードブロック(Babel)の使い方]]

* 基本構文

#+NAME: <name>
#+HEADER: <header>...
#+HEADER: <header>...
#+BEGIN_SRC <language> <swithc>... <header>...
<body>
#+END_SRC

- =org-ctrl-c-ctrl-c= でコードを実行
- =org-edit-special= でコード編集 (別バッファが開く)
- =org-export-dispatch= でエクスポート

* コードブロックに名前を付ける

#+NAME: mul
#+BEGIN_SRC emacs-lisp :var x=2 :var y=4
(* x y)
#+END_SRC

#+RESULTS: mul
: 8

名前を付けたブロックを変数を変更して呼び出す
#+CALL: mul(x=3, y=10)

#+RESULTS:
: 30

noweb 参照の例 <<>> で参照できる
#+BEGIN_SRC emacs-lisp :noweb yes
(defun mul (x y)
  <<mul>>
)
(mul 2 3)
#+END_SRC

#+RESULTS:
: 6

* 行内でもコードブロックが書ける

- =src_<language>[<header>..]{<body>}=
- 2 * 3 の答えは src_emacs-lisp[:var x=2 :var y=3]{(* x y)} {{{results(=6=)}}}
- 2 * 3 の答えは src_R[:var x=3 :var y=4]{x * y} {{{results(=12=)}}}

* ヘッダ引数

- [[https://www.gnu.org/software/emacs/manual/html_node/org/results.html][Org manual]]
- [[https://org-babel.readthedocs.io/en/latest/][Org Babel reference card]]
  - [[https://github.com/fniessen/refcard-org-babel/blob/master/docs/header-args.org][Github repo]]
  - [[https://org-babel.readthedocs.io/en/latest/header-args/][Header Args]]

  _ヘッダ引数の値が、上から順に引き継がれていく(下の値で上書きされる)_
  1. Default header arguments shipped with Org mode
  2. Default languages-specific header arguments shipped with Org mode
  3. Buffer (or file) level header arguments
  4. Subtreeheader arguments
  5. Code block header arguments
  6. Call line header arguments

- 言語毎に結果が異なるので、その都度確認が必要

- :exports
  - エクスポートの際に何を出力するか =code/results/both/none=

- :results
  - どこから結果を得るか =output/value=
  - 結果の種類 =table/list/scalar/file=
  - 結果の出力形式 =raw/org/html/latex/code/pp/drawer=
  - 結果の挿入方法 =silent/replace/append/prepend=

- :eval
  - Export 時にコードブロックを評価しない =never-export=

- emacs-lisp
#+begin_src emacs-lisp :results list
org-babel-default-header-args
#+end_src

#+RESULTS:
: - (:session . "none")
: - (:results . "replace")
: - (:exports . "code")
: - (:cache . "no")
: - (:noweb . "no")
: - (:hlines . "no")
: - (:tangle . "no")

* 言語毎の書き方
** emacs-lisp

#+begin_src emacs-lisp
(emacs-version)
#+end_src

#+RESULTS:
: GNU Emacs 26.3 (build 2, x86_64-pc-linux-gnu, GTK+ Version 3.22.30)
:  of 2019-09-17

** shell

#+begin_src sh
echo $SHELL
#+end_src

#+RESULTS:
: /usr/bin/zsh

#+begin_src shell :results output
ls ~/
#+end_src

#+RESULTS:
#+begin_example
bin
Desktop
Documents
Downloads
Dropbox
go
Jts
market_data
Music
Pictures
Public
scripts
snap
Templates
Videos
#+end_example

** R
*** Reference

- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html][R Source Code Blocks in Org Mode]]

*** session

- =:session hoge= でセッションを作成
#+begin_src R :session *hoge*
a <- 30
b <- 40
a + b
#+end_src

#+RESULTS:
: 70

- 変数を参照できる
#+begin_src R :session *hoge*
a + 20
#+end_src

#+RESULTS:
: 50

*** data.frame

#+begin_src R :colnames yes :rownames yes
head(iris)
#+end_src

#+RESULTS:
|   | Sepal.Length | Sepal.Width | Petal.Length | Petal.Width | Species |
|---+--------------+-------------+--------------+-------------+---------|
| 1 |          5.1 |         3.5 |          1.4 |         0.2 | setosa  |
| 2 |          4.9 |           3 |          1.4 |         0.2 | setosa  |
| 3 |          4.7 |         3.2 |          1.3 |         0.2 | setosa  |
| 4 |          4.6 |         3.1 |          1.5 |         0.2 | setosa  |
| 5 |            5 |         3.6 |          1.4 |         0.2 | setosa  |
| 6 |          5.4 |         3.9 |          1.7 |         0.4 | setosa  |

*** plot (graphics)

- ~:results graphics :file hoge.png~ でプロット作成
- doom-emacs では ~:results graphics file~ にする必要あり
- ~:width 640~ ~:height 480~ のようにサイズを指定できる (数字を文字列にしては NG)

#+begin_src R :results graphics file :file babel-img/R-test-1.png
plot(1:100)
#+end_src

#+RESULTS:
[[file:babel-img/R-test-1.png]]

*** plot (grid)

- ggplot2 では ~:results output graphics~ を使う
- doom-emacs では ~:results output graphics file~ にする必要あり

#+begin_src R :results output graphics file :file babel-img/R-test-2.png
library(tidyverse)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
#+end_src

#+RESULTS:
[[file:babel-img/R-test-2.png]]

- もしくは、:session を使う
#+begin_src R :results graphics file :session :file babel-img/R-test-3.png
library(tidyverse)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
#+end_src

#+RESULTS:
[[file:babel-img/R-test-3.png]]

- 毎回ファイル名を指定しない方法
  [[https://stackoverflow.com/questions/8327939/r-org-mode-how-to-avoid-naming-plot-files][R + Org-mode: how to avoid naming plot files?@Stackoverflow]]

- 自作の (my/get-babel-file) 関数を使うと、~/Dropbox/memo/img/babel/ 配下に作成

*** LaTex 出力

- xtable package を使って LaTex 出力

#+begin_src R :results output latex
library(xtable)
x <- rnorm(100)
y <- x + rnorm(100)
xtable(summary(lm(y ~ x)))
#+end_src

#+RESULTS:
#+begin_export latex
% latex table generated in R 3.6.3 by xtable 1.8-4 package
% Wed May  6 08:47:24 2020
\begin{table}[ht]
\centering
\begin{tabular}{rrrrr}
  \hline
 & Estimate & Std. Error & t value & Pr($>$$|$t$|$) \\
  \hline
(Intercept) & 0.0411 & 0.1023 & 0.40 & 0.6889 \\
  x & 0.8485 & 0.1010 & 8.40 & 0.0000 \\
   \hline
\end{tabular}
\end{table}
#+end_export

- 上記の結果をコピペして latex として表示すると以下のようになる
  - =(org-latex-preview)= を実行する

\begin{table}[ht]
\centering
\begin{tabular}{rrrrr}
  \hline
 & Estimate & Std. Error & t value & Pr($>$$|$t$|$) \\
  \hline
(Intercept) & 0.0411 & 0.1023 & 0.40 & 0.6889 \\
  x & 0.8485 & 0.1010 & 8.40 & 0.0000 \\
   \hline
\end{tabular}
\end{table}

** python
*** check version

#+begin_src python :session
import sys
sys.version
#+end_src

#+RESULTS:
: 3.8.2 (default, Apr  8 2020, 12:38:13)
: [GCC 7.5.0]

*** session

- ~:results~
  - value  session モードでの "_" が出力される
  - output 標準出力への出力内容

- session モードでは、空白行は、インデントの終了として扱われるので注意
#+begin_src python :session "*Python:hoge*"
def foo(x):
    if x>0:
        return x+1
    else:
        return x-1

foo(1)
#+end_src

#+RESULTS:
: 2

*** non-session

- non-session モードでは、コードブロックが関数でラップされる
- ~:results value~ で出力を表示するには、return 文を使う必要がある

#+BEGIN_SRC python
1 + 2
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python
return(1 + 2)
#+END_SRC

#+RESULTS:
: 3

*** matplotlib

- PDF として出力
#+begin_src python :session :results file
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use("Agg")

fig=plt.figure(figsize=(3,2))
plt.plot([1,3,2])
fig.tight_layout()
plt.savefig("babel-img/Python-test-1.pdf")
"babel-img/Python-test-1.pdf" # return this to org-mode
#+end_src

#+RESULTS:
[[file:babel-img/Python-test-1.pdf]]

- 画像として出力
#+begin_src python :results file
import matplotlib, numpy
import matplotlib.pyplot as plt
matplotlib.use("Agg")

fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
plt.savefig("babel-img/Python-test-2.png")
return "babel-img/Python-test-2.png" # return filename to org-mode
#+end_src

#+RESULTS:
[[file:babel-img/Python-test-2.png]]

*** Jupyter
**** 概要

- Jupyter を org-babel から利用するためのプラグイン
  - ob-jupyter from =jupyter= (269 stars) <- _org-mode からは最も使いやすい_
  - ipython from =ob-ipython= (641 stars)
  - ob-ein from =ein= (932 stars)
  - ob-ipython が必要

**** =jupyter=

- :session は必須
- python3 を利用する場合は、pyenv で version を指定する
#+begin_src jupyter-python :session py
import sys
sys.version
#+end_src

#+RESULTS:
: 2.7.17 (default, Apr 15 2020, 17:20:14) \n[GCC 7.5.0]

**** =ob-ipython=

- doom-emacs では =ob-ipython= は DEPRECATED
- =:session :results raw drawer=
#+begin_src ipython :session :results raw drawer :kernel python3
import sys
sys.version
#+end_src

#+RESULTS:
: # Out[6]:
: : '3.6.8 (default, Aug 20 2019, 17:12:48) \n[GCC 8.3.0]'

#+begin_src ipython :session :results raw drawer
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
plt.hist(np.random.randn(20000), bins=200)
#+end_src

**** =ein=

- Test
#+NAME: 0b501ee1-bcee-48b3-b8c3-912c0d150754
#+begin_src ein :session localhost :results raw drawer
import numpy, math, matplotlib.pyplot as plt
%matplotlib inline
x = numpy.linspace(0, 2*math.pi)
plt.plot(x, numpy.sin(x))
#+end_src

:results:
[<matplotlib.lines.Line2D at 0x7fdc91e8f080>]
[[file:/home/shun/Dropbox/memo/img/babel-ein//ob-ein-2c9ad5929050da5b1d26b499f8ad43cc.png]]

#+NAME: 1cbb4663-0c3d-46b2-95a7-ef792f247d2b
#+begin_src ein :session localhost :results raw drawer
import sys
sys.version
#+end_src

*** inline code

- src_python{return(1+2)} {{{results(=3=)}}}

*** extract value from org-table

#+tblname: data_table
| a | 1 |
| b | 2 |
| c | 3 |

#+begin_src python :var val=1 :var data=data_table
# Return row specified by val.
# In non-session mode, use return to return results.
return(data[val])
#+end_src

#+RESULTS:
| b | 2 |

** c++

#+header: :includes <iostream>
#+begin_src C++
std::cout << "Hello world!!!" << std::endl;
#+end_src

#+RESULTS:
: Hello world!!!

** Stan

- モデルをファイル名付きで定義
#+begin_src stan :file stan/babel-test.stan
data {
  int<lower=1> N;
  vector[N] x;
}

parameters {
  real mu;
  real<lower=0> sigma;
}

model {
  x ~ normal(mu, sigma);
}
#+end_src

#+RESULTS:
[[file:stan/babel-test.stan]]


- データを用意して rstan から stan file を利用
#+begin_src R :session *R* :results output
set.seed(33)
N <- 50
x <- rnorm(N, 20, 3)

library(rstan)
fit <- stan(file="stan/babel-test.stan", data=list(N=N, x=x), chains=1)
#+end_src

#+RESULTS:
#+begin_example

Loading required package: StanHeaders
Loading required package: ggplot2
rstan (Version 2.19.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)

SAMPLING FOR MODEL 'model' NOW (CHAIN 1).
Chain 1:
Chain 1: Gradient evaluation took 6e-06 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1:
Chain 1:
Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 1:
Chain 1:  Elapsed Time: 0.008179 seconds (Warm-up)
Chain 1:                0.0156 seconds (Sampling)
Chain 1:                0.023779 seconds (Total)
Chain 1:
Warning message:
In readLines(file, warn = TRUE) :
  incomplete final line found on '/home/shun/Dropbox/memo/dev/emacs/model.stan'
#+end_example

** haskell
* github/markup 向けの書き方

- =:exports both=
  - デフォルトでは =:exports code= なので、これを設定しないと結果が表示されない
  - トップの Header に追加しただけでは、反映されない。個別のブロックに設定する必要あり。

- =:results output code=
  - =:results output= だけでは、複数行の出力の際 =:= のみの行がそのまま表示されてしまう。
  - =code= にすることで、各言語のシンタックスでハイライトされるメリットもある。

- =options(crayon.enabled = FALSE)= で色の出力を停止
