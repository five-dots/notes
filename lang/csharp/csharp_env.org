#+STARTUP: folded indent inlineimages latexpreview

* Mono for Ubuntu
** Add key

- Distribution は都度読み替える
#+begin_src shell
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
#+end_src

#+begin_src shell
echo "deb https://download.mono-project.com/repo/ubuntu stable-bionic main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
#+end_src

** Install

- 大量のライブラリがインストールされる
#+begin_src shell
sudo apt update
sudo apt install mono-devel (or mono-complete)
#+end_src

以下のページでインストールが完了したか確認する
https://www.mono-project.com/docs/getting-started/mono-basics/

- csv, mono, csharp コマンドが使えるようになる
#+begin_src shell
csc hoge.cs
mono hoge.exe
#+end_src

* omnisharp roslyn

- spacemacs の場合は、csharp layer を追加した後 =omnisharp-install-server= を実行

* Dotnet SDK
** Installation for Ubuntu

- [[https://www.microsoft.com/net/download/linux-package-manager/ubuntu18-04/sdk-current][Ubuntu 19.10 パッケージ マネージャー - .NET Core のインストール]]

#+begin_src shell
wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb

sudo dpkg -i packages-microsoft-prod.deb

sudo add-apt-repository universe
sudo apt-get install apt-transport-https
sudo apt-get update
sudo apt-get install dotnet-sdk-2.2
#+end_src

** インストールされた Dotnet Core の確認

- デフォルトのバージョン
#+begin_src sh
dotnet --version
#+end_src

#+RESULTS:
: 3.1.201

- すべてのバージョン
#+begin_src sh :results output
dotnet --list-sdks
#+end_src

#+RESULTS:
: 2.2.402 [/usr/share/dotnet/sdk]
: 3.1.201 [/usr/share/dotnet/sdk]

- すべてのランタイム
#+begin_src sh :results output
dotnet --list-runtimes
#+end_src

#+RESULTS:
: Microsoft.AspNetCore.All 2.2.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]
: Microsoft.AspNetCore.App 2.2.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
: Microsoft.AspNetCore.App 3.1.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
: Microsoft.NETCore.App 2.2.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]
: Microsoft.NETCore.App 3.1.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]

** dotnet コマンドのリスト

| add          | Add a package or reference to a .NET project.                     |
| build        | Build a .NET project.                                             |
| build-server | Interact with servers started by a build.                         |
| clean        | Clean build outputs of a .NET project.                            |
| help         | Show command line help.                                           |
| list         | List project references of a .NET project.                        |
| migrate      | Migrate a project.json project to an MSBuild project.             |
| msbuild      | Run Microsoft Build Engine (MSBuild) commands.                    |
| new          | Create a new .NET project or file.                                |
| nuget        | Provides additional NuGet commands.                               |
| pack         | Create a NuGet package.                                           |
| publish      | Publish a .NET project for deployment.                            |
| remove       | Remove a package or reference from a .NET project.                |
| restore      | Restore dependencies specified in a .NET project.                 |
| run          | Build and run a .NET project output.                              |
| sln          | Modify Visual Studio solution files.                              |
| store        | Store the specified assemblies in the runtime package store.      |
| test         | Run unit tests using the test runner specified in a .NET project. |
| tool         | Install or manage tools that extend the .NET experience.          |
| vstest       | Run Microsoft Test Engine (VSTest) commands.                      |

** プロジェクト作成

#+begin_src shell
mkdir ProjectName
cd ProjectName
dotnet new console # [console/classlib/mstest/web etc.]
#+end_src

- or
#+begin_src shell
dotnet new console -o ProjectName
#+end_src

- ターゲットフレームワーク指定
#+begin_src shell
dotnet new console --target-framework-override netcoreapp2.2
#+end_src

- [[https://docs.microsoft.com/ja-jp/dotnet/standard/frameworks][SDK スタイルのプロジェクトでのターゲット フレームワーク]]
  - netstandard2.0
  - netcoreapp2.2
  - net472 など

** 実行

- dotnet run
#+begin_src shell
dotnet run # project のあるフォルダで
dotnet run --project /path/to/hoge.csproj
#+end_src

#+begin_src sh
cd ~/Dropbox/repos/private/DotnetTest
dotnet run
#+end_src

#+RESULTS:
: Hello World!

- run コマンドで restore/build/run が実行される
  - restore 必要なライブラリのダウンロードと配置
  - build ビルドし dll を作成
  - run プログラムを実行 *商用環境では推奨されない*

- dotnet コマンドの引数に dll を指定すれば、ビルド済みのバイナリを実行可能
#+begin_src sh
cd ~/Dropbox/repos/private/DotnetTest/bin/Debug/netcoreapp2.2
dotnet DotnetTest.dll
#+end_src

#+RESULTS:
: Hello World!

** ソリューションファイル

#+begin_src shell
dotnet new sln # project 階層のひとつ上で
#+end_src

- プロジェクトを追加
#+begin_src shell
dotnet sln add Hoge/Hoge.csproj
#+end_src

** nuget パッケージの追加・削除

- プロジェクトのカレントディレクトリで
- バージョンは省略するとデフォルトのものが入る
#+begin_src shell
dotnet add package Newtonsoft.Json --version 10.0.3

dotnet remove package Newtonsoft.Json --version 10.0.3
#+end_src

** 配置
*** フレームワーク依存 (ランタイム要)

- フレームワークは.csproj で指定したものの内、ひとつを選ぶ。省略可
#+begin_src shell
dotnet publish -f netcoreapp2.2 -c Release
#+end_src

- bin/Release/netcoreapp2.2/publish/hoge.dll が作成される
- dotnet hoge.dll で実行
- 配置は、publish 以下のファイルを全てコピーすればよい

*** 自己完結
** 参照の追加

- クラスライブラリプロジェクトへの参照を追加
#+begin_src shell
dotnet add hoge/hoge.csproj reference classlib/classlib.csproj
#+end_src

* .Net Core Global Tool
** dotnet-script

- インストール (-g = Global)
dotnet tool install -g dotnet-script

#+begin_src sh
dotnet tool list -g
#+end_src

#+RESULTS:
| Package                               | Id | Version | Commands |
| ------------------------------------- |    |         |          |

- インストールスクリプト
curl -s https://raw.githubusercontent.com/filipw/dotnet-script/master/install/install.sh | bash
