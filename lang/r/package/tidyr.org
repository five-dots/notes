#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results value :colnames yes :session *R:tidyr*

* ~{tidyr}~: Easily tidy data with spread and gather functions       :noexport:

~{tidyr}~ (タイディーアー) は、R の ~data.frame~ を操作するパッケージ。Tidy Data (整然データ) を作成するために用いられる。収録されている関数は、おおよそ 5 つほどのカテゴリーに分類できる。

- 縦長 (longer)・横長 (wider) に変換する関数
- ネストされた ~data.frame~ を作成するための関数
- ~NA~ 処理の関数
- 列の分割・結合の関数
- 直積集合を作る関数 (改良版 ~expand.grid()~)
\\

* 目次                                                                :quote:
#+BEGIN_QUOTE
- [[#ライブラリの読み込みとバージョンの確認][ライブラリの読み込みとバージョンの確認]]
- [[#全関数リスト][全関数リスト]]
- [[#関数リスト][関数リスト]]
  - [[#縦横変換][縦横変換]]
    - [[#-pivot_longerdata-cols-names_to--name-names_prefix--null-names_sep--null-names_pattern--null-names_ptypes--list-names_repair--check_unique-values_to--value-values_drop_na--false-values_ptypes--list][★★★ ~pivot_longer(data, cols, names_to = "name", names_prefix = NULL, names_sep = NULL, names_pattern = NULL, names_ptypes = list(), names_repair = "check_unique", values_to = "value", values_drop_na = FALSE, values_ptypes = list())~.]]
    - [[#-pivot_widerdata-id_cols--null-names_from--name-names_prefix---names_sep--_-names_repair--check_unique-values_from--value-values_fill--null-values_fn--null][★★★ ~pivot_wider(data, id_cols = NULL, names_from = name, names_prefix = "", names_sep = "_", names_repair = "check_unique", values_from = value, values_fill = NULL, values_fn = NULL)~.]]
    - [[#-gatherdata-key--key-value--value--narm--false-convert--false-factor_key--false][★★★ ~gather(data, key = "key", value = "value", ..., na.rm = FALSE, convert = FALSE, factor_key = FALSE)~.]]
    - [[#-spreaddata-key-value-fill--na-convert--false-drop--true-sep--null][★★★ ~spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE, sep = NULL)~.]]
  - [[#ネストされた-dataframe][ネストされた data.frame]]
    - [[#-nestdata--key--deprecated][★★☆ ~nest(.data, ..., .key = deprecated())~.]]
    - [[#-unnestdata-cols--keep_empty--false-ptype--null-names_sep--null-names_repair--check_unique-drop--deprecated-id--deprecated-sep--deprecated-preserve--deprecated][★★☆ ~unnest(data, cols, ..., keep_empty = FALSE, ptype = NULL, names_sep = NULL, names_repair = "check_unique", .drop = deprecated(), .id = deprecated(), .sep = deprecated(), .preserve = deprecated())~.]]
  - [[#nas][NAs]]
    - [[#データセット][データセット]]
    - [[#-drop_nadata-][★★☆ ~drop_na(data, ...)~.]]
    - [[#-replace_nadata-replace-][★★☆ ~replace_na(data, replace, ...)~.]]
    - [[#-filldata--direction--cdown-up][★★☆ ~fill(data, ..., .direction = c("down", "up"))~.]]
    - [[#-completedata--fill--list][★☆☆ ~complete(data, ..., fill = list())~.]]
  - [[#split--join][Split & Join]]
    - [[#-separatedata-col-into-sep--alnum-remove--true-convert--false-extra--warn-fill--warn-][★★☆ ~separate(data, col, into, sep = "[^[:alnum:]]+", remove = TRUE, convert = FALSE, extra = "warn", fill = "warn", ...)~.]]
    - [[#-unitedata-col--sep--_-remove--true-narm--false][★★☆ ~unite(data, col, ..., sep = "_", remove = TRUE, na.rm = FALSE)~.]]
  - [[#直積集合][直積集合]]
    - [[#-expanddata-][★☆☆ ~expand(data, ...)~.]]
    - [[#-crossing][★☆☆ ~crossing(...)~.]]
    - [[#-nesting][★☆☆ ~nesting(...)~.]]
  - [[#pivot-table][Pivot Table]]
- [[#実行環境][実行環境]]
- [[#参考リンク][参考リンク]]
#+END_QUOTE

* ライブラリの読み込みとバージョンの確認

#+begin_src R :results silent
library(tidyr)
#+end_src
\\

- バージョン
#+begin_src R :exports both
packageVersion("tidyr")
#+end_src

#+RESULTS:
: [1] ‘1.0.0’
\\

* 全関数リスト

#+begin_src R :results output :exports both
pacman::p_funs(tidyr)
#+end_src

#+RESULTS:
#+begin_example
 [1] "%>%"               "as_tibble"         "build_longer_spec"
 [4] "build_wider_spec"  "chop"              "complete"         
 [7] "complete_"         "contains"          "crossing"         
[10] "crossing_"         "drop_na"           "drop_na_"         
[13] "ends_with"         "everything"        "expand"           
[16] "expand_"           "expand_grid"       "extract"          
[19] "extract_"          "extract_numeric"   "fill"             
[22] "fill_"             "full_seq"          "gather"           
[25] "gather_"           "hoist"             "last_col"         
[28] "matches"           "nest"              "nest_"            
[31] "nest_legacy"       "nesting"           "nesting_"         
[34] "num_range"         "one_of"            "pack"             
[37] "pivot_longer"      "pivot_longer_spec" "pivot_wider"      
[40] "pivot_wider_spec"  "replace_na"        "separate"         
[43] "separate_"         "separate_rows"     "separate_rows_"   
[46] "spread"            "spread_"           "starts_with"      
[49] "tibble"            "tidyr_legacy"      "tribble"          
[52] "unchop"            "uncount"           "unite"            
[55] "unite_"            "unnest"            "unnest_"          
[58] "unnest_auto"       "unnest_legacy"     "unnest_longer"    
[61] "unnest_wider"      "unpack"
#+end_example

* 関数リスト
** 縦横変換
*** ★★★ ~pivot_longer(data, cols, names_to = "name", names_prefix = NULL, names_sep = NULL, names_pattern = NULL, names_ptypes = list(), names_repair = "check_unique", values_to = "value", values_drop_na = FALSE, values_ptypes = list())~.

- 横 -> 縦の Tidy Data へ変換
- ~gather()~ の後継
- ~cols~ でまとめる列を指定 + ~names_*~ でラベル列の操作 + ~values_*~ で値列の操作
- これまで ~separate()~ や ~unite()~ と組み合わせていた処理も一括で行うことができる
- ~cols~ での列選択方法
  - ~Sepal.Width~ (単一の列を指定)
  - ~-Species~ (マイナスで指定)
  - ~c(Sepal.Width, Petal.Width)~ (複数列を指定)
  - ~c("Sepal.Width", "Petal.Width")~ (文字列で指定)
  - ~1:3~ (範囲指定)
  - ~starts_with("Sepal")~ (~{tidyselect}~ 利用)

#+begin_src R :colnames yes
iris %>%
  pivot_longer(-Species, names_to = "key", values_to = "value") %>%
  head()
#+end_src

#+RESULTS:
| Species | key          | value |
|---------+--------------+-------|
| setosa  | Sepal.Length |   5.1 |
| setosa  | Sepal.Width  |   3.5 |
| setosa  | Petal.Length |   1.4 |
| setosa  | Petal.Width  |   0.2 |
| setosa  | Sepal.Length |   4.9 |
| setosa  | Sepal.Width  |     3 |
\\

- ~names_prefix~ で冗長な部分を削除できる
#+begin_src R :colnames yes
iris %>%
  pivot_longer(starts_with("Sepal"), names_to = "Sepal", names_prefix = "Sepal.") %>%
  head()
#+end_src

#+RESULTS:
| Petal.Length | Petal.Width | Species | Sepal  | value |
|--------------+-------------+---------+--------+-------|
|          1.4 |         0.2 | setosa  | Length |   5.1 |
|          1.4 |         0.2 | setosa  | Width  |   3.5 |
|          1.4 |         0.2 | setosa  | Length |   4.9 |
|          1.4 |         0.2 | setosa  | Width  |     3 |
|          1.3 |         0.2 | setosa  | Length |   4.7 |
|          1.3 |         0.2 | setosa  | Width  |   3.2 |
\\

*** ★★★ ~pivot_wider(data, id_cols = NULL, names_from = name, names_prefix = "", names_sep = "_", names_repair = "check_unique", values_from = value, values_fill = NULL, values_fn = NULL)~.

- ~spread()~ の後継
- まず ~pivot_longer()~ で縦長に変換
#+begin_src R :colnames yes
d <- iris %>% head(3L) %>% tibble::rownames_to_column("id")
d_long <- pivot_longer(d, c(-id, -Species))
d_long
#+end_src

#+RESULTS:
| id | Species | name         | value |
|----+---------+--------------+-------|
|  1 | setosa  | Sepal.Length |   5.1 |
|  1 | setosa  | Sepal.Width  |   3.5 |
|  1 | setosa  | Petal.Length |   1.4 |
|  1 | setosa  | Petal.Width  |   0.2 |
|  2 | setosa  | Sepal.Length |   4.9 |
|  2 | setosa  | Sepal.Width  |     3 |
|  2 | setosa  | Petal.Length |   1.4 |
|  2 | setosa  | Petal.Width  |   0.2 |
|  3 | setosa  | Sepal.Length |   4.7 |
|  3 | setosa  | Sepal.Width  |   3.2 |
|  3 | setosa  | Petal.Length |   1.3 |
|  3 | setosa  | Petal.Width  |   0.2 |
\\

- 横長に戻す
- 列名がデフォルト (name + value) であれば指定する必要もない
#+begin_src R :colnames yes
pivot_wider(d_long, names_from = name, values_from = value)
#+end_src

#+RESULTS:
| id | Species | Sepal.Length | Sepal.Width | Petal.Length | Petal.Width |
|----+---------+--------------+-------------+--------------+-------------|
|  1 | setosa  |          5.1 |         3.5 |          1.4 |         0.2 |
|  2 | setosa  |          4.9 |           3 |          1.4 |         0.2 |
|  3 | setosa  |          4.7 |         3.2 |          1.3 |         0.2 |
\\

*** ★★★ ~gather(data, key = "key", value = "value", ..., na.rm = FALSE, convert = FALSE, factor_key = FALSE)~.

- 横 -> 縦の Tidy Data へ変換
- Key-Value pair に変換
- ~key~, ~value~ に指定したものが、カラム名になる
- 最後にマイナスでまとめ上げる変数を指定する (date 等)

#+begin_src R :colnames yes
iris %>%
  gather(key = "key", value = "value", -Species) %>%
  head()
#+end_src

#+RESULTS:
| Species | key          | value |
|---------+--------------+-------|
| setosa  | Sepal.Length |   5.1 |
| setosa  | Sepal.Length |   4.9 |
| setosa  | Sepal.Length |   4.7 |
| setosa  | Sepal.Length |   4.6 |
| setosa  | Sepal.Length |     5 |
| setosa  | Sepal.Length |   5.4 |
\\

*** ★★★ ~spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE, sep = NULL)~.

- 縦 -> 横への変換
- まずは、縦長データを作成
#+begin_src R :colnames yes
d <- iris %>% head(3L) %>% tibble::rownames_to_column("id")
d_long <- gather(d, key, value, -id, -Species)
d_long
#+end_src

#+RESULTS:
| id | Species | key          | value |
|----+---------+--------------+-------|
|  1 | setosa  | Sepal.Length |   5.1 |
|  2 | setosa  | Sepal.Length |   4.9 |
|  3 | setosa  | Sepal.Length |   4.7 |
|  1 | setosa  | Sepal.Width  |   3.5 |
|  2 | setosa  | Sepal.Width  |     3 |
|  3 | setosa  | Sepal.Width  |   3.2 |
|  1 | setosa  | Petal.Length |   1.4 |
|  2 | setosa  | Petal.Length |   1.4 |
|  3 | setosa  | Petal.Length |   1.3 |
|  1 | setosa  | Petal.Width  |   0.2 |
|  2 | setosa  | Petal.Width  |   0.2 |
|  3 | setosa  | Petal.Width  |   0.2 |
\\

- ~spread()~ で横長データに戻す
#+begin_src R :colnames yes
d_wide <- spread(d_long, key, value)
#+end_src

#+RESULTS:
| id | Species | Petal.Length | Petal.Width | Sepal.Length | Sepal.Width |
|----+---------+--------------+-------------+--------------+-------------|
|  1 | setosa  |          1.4 |         0.2 |          5.1 |         3.5 |
|  2 | setosa  |          1.4 |         0.2 |          4.9 |           3 |
|  3 | setosa  |          1.3 |         0.2 |          4.7 |         3.2 |
\\

- 複数列の spread (1 つの key に対して、複数の value 列がある場合, [[https://stackoverflow.com/questions/29775461/how-can-i-spread-repeated-measures-of-multiple-variables-into-wide-format][ここでの議論]])
- Time と Score をまとめたい
#+begin_src R :colnames yes
dat <- tibble(
  Person = rep(c("greg", "sally", "sue"), each = 2),
  Time   = rep(c("Pre", "Post"), 3),
  Score1 = round(rnorm(6, mean = 80, sd = 4), 0),
  Score2 = round(jitter(Score1, 15), 0),
  Score3 = 5 + (Score1 + Score2) / 2
)
#+end_src

#+RESULTS:
| Person | Time | Score1 | Score2 | Score3 |
|--------+------+--------+--------+--------|
| greg   | Pre  |     82 |     80 |     86 |
| greg   | Post |     78 |     77 |   82.5 |
| sally  | Pre  |     74 |     72 |     78 |
| sally  | Post |     81 |     79 |     85 |
| sue    | Pre  |     83 |     82 |   87.5 |
| sue    | Post |     81 |     81 |     86 |
\\

1. ~gather()~ で一時的な変数 (temp) にまとめる
2. ~unite()~ で 2 つの列を結合する
3. ~spread()~ で横長に展開する
#+begin_src R :colnames yes
dat %>%
  gather(temp, score, starts_with("Score")) %>%
  unite(temp1, Time, temp, sep = ".") %>%
  spread(temp1, score)
#+end_src

#+RESULTS:
| Person | Post.Score1 | Post.Score2 | Post.Score3 | Pre.Score1 | Pre.Score2 | Pre.Score3 |
|--------+-------------+-------------+-------------+------------+------------+------------|
| greg   |          78 |          77 |        82.5 |         82 |         80 |         86 |
| sally  |          81 |          79 |          85 |         74 |         72 |         78 |
| sue    |          81 |          81 |          86 |         83 |         82 |       87.5 |
\\

** ネストされた data.frame
*** ★★☆ ~nest(.data, ..., .key = deprecated())~.

- ~data.frame~ をネストして *list of data.frame* (= 列が list になっている) のカラムを作る
- 内側を ... で指定し、外側をマイナスで指定

#+begin_src R :results output
iris %>% nest(-Species)

# 同じ結果
# iris %>% nest(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 3 x 2
  Species              data
  <fct>      <list<df[,4]>>
1 setosa           [50 × 4]
2 versicolor       [50 × 4]
3 virginica        [50 × 4]
Warning message:
All elements of `...` must be named.
Did you want `data = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)`?
#+end_example

- ~dplyr::group_nest()~ と同じ機能
#+begin_src R :results output
iris %>% dplyr::group_nest(Species)
#+end_src

#+RESULTS:
: # A tibble: 3 x 2
:   Species    data             
:   <fct>      <list>           
: 1 setosa     <tibble [50 × 4]>
: 2 versicolor <tibble [50 × 4]>
: 3 virginica  <tibble [50 × 4]>
\\

*** ★★☆ ~unnest(data, cols, ..., keep_empty = FALSE, ptype = NULL, names_sep = NULL, names_repair = "check_unique", .drop = deprecated(), .id = deprecated(), .sep = deprecated(), .preserve = deprecated())~.

- .drop = TRUE 余計なカラムが残らないようにする
#+begin_src R :colnames yes
iris %>%
  nest(-Species, .key = NEW_COLUMN) %>%
  unnest(NEW_COLUMN) %>%
  head()
#+end_src

#+RESULTS:
| Species | Sepal.Length | Sepal.Width | Petal.Length | Petal.Width |
|---------+--------------+-------------+--------------+-------------|
| setosa  |          5.1 |         3.5 |          1.4 |         0.2 |
| setosa  |          4.9 |           3 |          1.4 |         0.2 |
| setosa  |          4.7 |         3.2 |          1.3 |         0.2 |
| setosa  |          4.6 |         3.1 |          1.5 |         0.2 |
| setosa  |            5 |         3.6 |          1.4 |         0.2 |
| setosa  |          5.4 |         3.9 |          1.7 |         0.4 |
\\

*** ★☆☆ ~chop(data, cols)~.
    
- 列構造を維持したまま list of data.frame に集約する 
#+begin_src R :colnames yes :results output
df <- tibble(x = c(1, 1, 1, 2, 2, 3), y = 1:6, z = 6:1)
df %>% chop(c(y, z))
#+end_src

#+RESULTS:
#+begin_example

# A tibble: 3 x 3
      x y         z        
  <dbl> <list>    <list>   
1     1 <int [3]> <int [3]>
2     2 <int [2]> <int [2]>
3     3 <int [1]> <int [1]>
#+end_example
\\

- ~nest()~ との違い
- ~nest()~ は複数列を 1 つの list of data.frame に集約するが ~chop()~ は列の構造を維持したまま 
#+begin_src R :colnames yes :results output
df %>% nest(data = c(y, z))
#+end_src

#+RESULTS:
: # A tibble: 3 x 2
:       x           data
:   <dbl> <list<df[,2]>>
: 1     1        [3 × 2]
: 2     2        [2 × 2]
: 3     3        [1 × 2]

*** ★☆☆ ~unchop(data, cols, keep_empty = FALSE, ptype = NULL)~.

- list-column をフラットな ~data.frame~ へ変換する
#+begin_src R
df <- tibble(x = 1:4, y = list(integer(), 1L, 1:2, 1:3))
df %>% unchop(y)
#+end_src

#+RESULTS:
| x | y |
|---+---|
| 2 | 1 |
| 3 | 1 |
| 3 | 2 |
| 4 | 1 |
| 4 | 2 |
| 4 | 3 |
\\

- ~NA~ になる行も残す場合
#+begin_src R
df %>% unchop(y, keep_empty = TRUE)
#+end_src

#+RESULTS:
| x |   y |
|---+-----|
| 1 | nil |
| 2 |   1 |
| 3 |   1 |
| 3 |   2 |
| 4 |   1 |
| 4 |   2 |
| 4 |   3 |
\\

** NA 処理
*** データセット

- 単純なデータを用意する
#+begin_src R
df <- data.frame(x = c(1, 2, 3), y = c("A", "B", NA), stringsAsFactors = FALSE)
df
#+end_src

#+RESULTS:
| x | y   |
|---+-----|
| 1 | A   |
| 2 | B   |
| 3 | nil |
\\

*** ★★☆ ~drop_na(data, ...)~.

- 指定した列に NA があれば行を削除する
- 省略すれば、全列をチェックする
#+begin_src R
drop_na(df)
#+end_src

#+RESULTS:
| x | y |
|---+---|
| 1 | A |
| 2 | B |
\\

*** ★★☆ ~replace_na(data, replace, ...)~.

- ~NA~ を指定した値で置き換える
- ~replace = list(col = replacement)~ の形で指定する
#+begin_src R
replace_na(df, replace = list(x = 0, y = "unknown"))
#+end_src

#+RESULTS:
| x | y       |
|---+---------|
| 1 | A       |
| 2 | B       |
| 3 | unknown |
\\

*** ★★☆ ~fill(data, ..., .direction = c("down", "up"))~.

- ~NA~ を直前の ~NA~ でない値で埋める
- 下方向に補完するか、上方向に補完するかを選択できる
#+begin_src R
fill(df, y, .direction = "down")
#+end_src

#+RESULTS:
| x | y |
|---+---|
| 1 | A |
| 2 | B |
| 3 | B |
\\

** 列の分割・結合
*** ★★☆ ~separate(data, col, into, sep = "[^[:alnum:]]+", remove = TRUE, convert = FALSE, extra = "warn", fill = "warn", ...)~.

- 単純なデータを用意する
#+begin_src R
df <- data.frame(x = c("hoge_hoge", "fuga_fuga", "piyo_piyo"))
df
#+end_src

#+RESULTS:
| x         |
|-----------|
| hoge_hoge |
| fuga_fuga |
| piyo_piyo |
\\

- 区切り文字で列を分割する
#+begin_src R
df <- data.frame(x = c("hoge_hoge", "fuga_fuga", "piyo_piyo"))
separate(df, col = x, into = c("x1", "x2"), sep = "_")
#+end_src

#+RESULTS:
| x1   | x2   |
|------+------|
| hoge | hoge |
| fuga | fuga |
| piyo | piyo |
\\

*** ★★☆ ~unite(data, col, ..., sep = "_", remove = TRUE, na.rm = FALSE)~.

- 単純なデータを用意する
#+begin_src R
df <- data.frame(x = c("hoge", "fuga", "piyo"), y = c("hoge", "fuga", "piyo"))
df
#+end_src

#+RESULTS:
| x    | y    |
|------+------|
| hoge | hoge |
| fuga | fuga |
| piyo | piyo |

- 複数列を 1 つにまとめる
#+begin_src R
unite(df, xy, x:y)
#+end_src

#+RESULTS:
| xy        | x    | y    |
|-----------+------+------|
| hoge_hoge | hoge | hoge |
| fuga_fuga | fuga | fuga |
| piyo_piyo | piyo | piyo |
\\

*** ★☆☆ ~extract(data, col, into, regex = "([[:alnum:]]+)", remove = TRUE, convert = FALSE, ...)~.
** 直積集合
*** ★☆☆ ~expand_grid(...)~.

- tibble 版の ~expand.grid()~
- ~expand.grid()~ との違い
  • Varies the first element fastest
  • Never converts strings to factors
  • Does not add any additional attributes
  • Returns a tibble, not a data frame
  • Can expand any generalised vector, including data frames
#+begin_src R
expand_grid(vs = unique(mtcars$vs), cyl = unique(mtcars$cyl))
#+end_src

#+RESULTS:
| vs | cyl |
|----+-----|
|  0 |   6 |
|  0 |   4 |
|  0 |   8 |
|  1 |   6 |
|  1 |   4 |
|  1 |   8 |

*** ★☆☆ ~nesting(...)~.

- 実際にデータ内に存在する組み合わせのみ得たい場合に利用する
#+begin_src R
nesting(x = 1:3, y = 3:1)
#+end_src

#+RESULTS:
| x | y |
|---+---|
| 1 | 3 |
| 2 | 2 |
| 3 | 1 |
\\

- ~expand_gird()~ だと全ての組み合わせになってしまう
#+begin_src R
expand_grid(x = 1:3, y = 3:1)
#+end_src

#+RESULTS:
| x | y |
|---+---|
| 1 | 3 |
| 1 | 2 |
| 1 | 1 |
| 2 | 3 |
| 2 | 2 |
| 2 | 1 |
| 3 | 3 |
| 3 | 2 |
| 3 | 1 |
\\

*** ★☆☆ ~expand(data, ...)~.

- 指定したデータの全ての組み合わせを作成する
- ~left_join()~ と組み合わせて、implicit な欠損値を explicit な欠損値へ変換するために利用する
#+begin_src R :results output
mtcars$vs
unique(mtcars$vs)

mtcars$cyl
unique(mtcars$cyl)
#+end_src

#+RESULTS:
:  [1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1
: 
: [1] 0 1
: 
:  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4
: 
: [1] 6 4 8
\\

- vs, cyl の全ての組み合わせ
#+begin_src R
expand(mtcars, vs, cyl)
#+end_src

#+RESULTS:
| vs | cyl |
|----+-----|
|  0 |   4 |
|  0 |   6 |
|  0 |   8 |
|  1 |   4 |
|  1 |   6 |
|  1 |   8 |
\\

- ~base::expand.grid()~ を使って書くとこうなる
#+begin_src R
expand.grid(vs = unique(mtcars$vs), cyl = unique(mtcars$cyl))
#+end_src

#+RESULTS:
| vs | cyl |
|----+-----|
|  0 |   6 |
|  1 |   6 |
|  0 |   4 |
|  1 |   4 |
|  0 |   8 |
|  1 |   8 |
\\

- 実際に存在する組み合わせのみに限定するには ~nesting()~ を使う (vs = 1, cyl = 8 は存在しない)
#+begin_src R
expand(mtcars, nesting(vs, cyl))
#+end_src

#+RESULTS:
| vs | cyl |
|----+-----|
|  0 |   4 |
|  0 |   6 |
|  0 |   8 |
|  1 |   4 |
|  1 |   6 |
\\

*** ★☆☆ ~crossing(...)~.

- tibble 版の ~expand.grid()~
- ~expand_grid()~ のラッパーになっている (+重複削除, +ソート)
#+begin_src R
crossing(mtcars$vs, mtcars$cyl)
#+end_src

#+RESULTS:
| mtcars$vs | mtcars$cyl |
|-----------+------------|
|         0 |          4 |
|         0 |          6 |
|         0 |          8 |
|         1 |          4 |
|         1 |          6 |
|         1 |          8 |
\\

*** ★☆☆ ~complete(data, ..., fill = list())~.

- implicit な欠損値を explicit な欠損値として埋めるための関数
- 行として存在していないデータを無理やり ~NA~ として登場させる
#+begin_src R
df <- tibble(
  group = c(1:2, 1),
  item_id = c(1:2, 2),
  item_name = c("a", "b", "b"),
  value1 = 1:3,
  value2 = 4:6)
df
#+end_src

#+RESULTS:
| group | item_id | item_name | value1 | value2 |
|-------+---------+-----------+--------+--------|
|     1 |       1 | a         |      1 |      4 |
|     2 |       2 | b         |      2 |      5 |
|     1 |       2 | b         |      3 |      6 |
\\

- group と item_id を必須の組み合わせとした場合
#+begin_src R
df %>% complete(group, item_id)
## df %>% complete(group, nesting(item_id, item_name))
#+end_src

#+RESULTS:
| group | item_id | item_name | value1 | value2 |
|-------+---------+-----------+--------+--------|
|     1 |       1 | a         |      1 |      4 |
|     1 |       2 | b         |      3 |      6 |
|     2 |       1 | nil       |    nil |    nil |
|     2 |       2 | b         |      2 |      5 |
\\

- item_id と item_name が依存関係にあるとする場合は ~nesting()~ を使う
#+begin_src R
df %>% complete(group, nesting(item_id, item_name))
#+end_src

#+RESULTS:
| group | item_id | item_name | value1 | value2 |
|-------+---------+-----------+--------+--------|
|     1 |       1 | a         |      1 |      4 |
|     1 |       2 | b         |      3 |      6 |
|     2 |       1 | a         |    nil |    nil |
|     2 |       2 | b         |      2 |      5 |

- ~NA~ を置換する場合は ~replace_na()~ と同じ書式で指定する
#+begin_src R
df %>% complete(group, nesting(item_id, item_name), fill = list(value1 = 0, value2 = 0))
#+end_src

#+RESULTS:
| group | item_id | item_name | value1 | value2 |
|-------+---------+-----------+--------+--------|
|     1 |       1 | a         |      1 |      4 |
|     1 |       2 | b         |      3 |      6 |
|     2 |       1 | a         |      0 |      0 |
|     2 |       2 | b         |      2 |      5 |
\\

* 実行環境

#+begin_src R :results output :exports both
sessionInfo()
#+end_src

#+RESULTS:
#+begin_example
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] tidyr_1.0.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2       zeallot_0.1.0    crayon_1.3.4     dplyr_0.8.3     
 [5] assertthat_0.2.1 R6_2.4.0         lifecycle_0.1.0  backports_1.1.5 
 [9] pacman_0.5.1     magrittr_1.5     pillar_1.4.2     rlang_0.4.0     
[13] vctrs_0.2.0      tools_3.6.1      glue_1.3.1       purrr_0.3.2     
[17] compiler_3.6.1   pkgconfig_2.0.3  tidyselect_0.2.5 tibble_2.1.3
#+end_example
\\

* 参考リンク

- [[https://tidyr.tidyverse.org/][公式サイト]]
- [[https://cran.r-project.org/web/packages/tidyr/index.html][CRAN]]
- [[https://cran.r-project.org/web/packages/tidyr/tidyr.pdf][Reference Manual]]
- [[https://github.com/tidyverse/tidyr][Github Repo]]
- [[https://github.com/rstudio/cheatsheets/raw/master/data-import.pdf][Cheatsheet(PDF)]]
- [[https://r4ds.had.co.nz/][R for Data Science]]
- Vignette
  - [[https://cran.r-project.org/web/packages/tidyr/vignettes/in-packages.html][Introduction]]
  - [[https://cran.r-project.org/web/packages/tidyr/vignettes/nest.html][Nested data]]
  - [[https://cran.r-project.org/web/packages/tidyr/vignettes/pivot.html][Pivoting]]
  - [[https://cran.r-project.org/web/packages/tidyr/vignettes/rectangle.html][Rectangling]]
  - [[https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html][Tidy data]]
- Blog
  - [[https://heavywatal.github.io/rstats/tidyr.html][tidyr — シンプルなデータ変形ツール@Heavy Watal]]
  - [[https://notchained.hatenablog.com/entry/2019/06/29/234050][Tokyo.Rでtidyr::pivot_longer()、tidyr::pivot_wider()について発表してきました@Technically, technophobic.]]
  - [[https://notchained.hatenablog.com/entry/2016/01/19/215332][tidyr 0.4を使ってみる@Technically, technophobic.]]
  - [[https://stackoverflow.com/questions/29775461/how-can-i-spread-repeated-measures-of-multiple-variables-into-wide-format][How can I spread repeated measures of multiple variables into wide format?@stackoverflow]]
  - [[https://qiita.com/kazutan/items/ab81958994426e67e017][tidyrの関数たちと向き合ってみる@Qiita]]
