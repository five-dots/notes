#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results value :colnames yes :session *R:two-table-verbs*

* 目次                                                            :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#ライブラリの読み込みとバージョンの確認][ライブラリの読み込みとバージョンの確認]]
- [[#2-つの-dataframe-を操作する関数群][2 つの ~data.frame~ を操作する関数群]]
  - [[#データセット][データセット]]
  - [[#集合演算][集合演算]]
    - [[#積集合][積集合]]
      - [[#-intersectx-y-][★★☆ ~intersect(x, y, ...)~.]]
    - [[#和集合][和集合]]
      - [[#-unionx-y-][★★☆ ~union(x, y, ...)~.]]
      - [[#-union_allx-y-][★☆☆ ~union_all(x, y, ...)~.]]
    - [[#差集合][差集合]]
      - [[#-setdiffx-y-][★★☆ ~setdiff(x, y, ...)~.]]
    - [[#同値][同値]]
      - [[#-setequalx-y-][★☆☆ ~setequal(x, y, ...)~.]]
      - [[#-all_equaltarget-current-ignore_col_order--true-ignore_row_order--true-convert--false-][★☆☆ ~all_equal(target, current, ignore_col_order = TRUE, ignore_row_order = TRUE, convert = FALSE, ...)~.]]
  - [[#結合演算][結合演算]]
    - [[#mutating-join][Mutating join]]
      - [[#-inner_joinx-y-by--null-copy--false-suffix--cx-y-][★★★ ~inner_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.]]
      - [[#-left_joinx-y-by--null-copy--false-suffix--cx-y-][★★★ ~left_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.]]
      - [[#-right_joinx-y-by--null-copy--false-suffix--cx-y-][★☆☆ ~right_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.]]
      - [[#-full_joinx-y-by--null-copy--false-suffix--cx-y-][★★☆ ~full_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.]]
      - [[#-nest_joinx-y-by--null-copy--false-keep--false-name--null-][★☆☆ ~nest_join(x, y, by = NULL, copy = FALSE, keep = FALSE, name = NULL, ...)~.]]
    - [[#filtering-join][Filtering join]]
      - [[#-semi_joinx-y-by--null-copy--false-][★★☆ ~semi_join(x, y, by = NULL, copy = FALSE, ...)~.]]
      - [[#-anti_joinx-y-by--null-copy--false-][★☆☆ ~anti_join(x, y, by = NULL, copy = FALSE, ...)~.]]
    - [[#bind-tables][Bind tables]]
      - [[#-bind_rows-id--null][★★★ ~bind_rows(..., .id = NULL)~.]]
      - [[#-bind_cols][★☆☆ ~bind_cols(...)~.]]
- [[#実行環境][実行環境]]
#+END_QUOTE

* ライブラリの読み込みとバージョンの確認

#+begin_src R :results silent
# install.packages("dplyr")
library(dplyr)
#+end_src
\\

- バージョン
#+begin_src R :results output :exports both
packageVersion("dplyr")
#+end_src

#+RESULTS:
: [1] ‘0.8.3’
\\

* 2 つの ~data.frame~ を操作する関数群
** データセット

- x, y は同じ列で構成された ~data.frame~ である必要あり
- FANG ではなく、より単純なデータを用意する

#+begin_src R
x <- data.frame(fruit = c("apple", "banana", "peach"),
                vegetable = c("carrot", "potato", "tomato"),
                stringsAsFactors = FALSE)
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| peach  | tomato    |
\\

#+begin_src R
y <- data.frame(fruit = c("apple", "banana", "grape"),
                vegetable = c("carrot", "potato", "radish"),
                stringsAsFactors = FALSE)
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| grape  | radish    |
\\

** 集合演算

- ~{base}~, ~{dplyr}~, ~{data.table}~ に同名の関数あり
- 絶対参照にして利用したほうが、誤解がなくて無難
\\

*** 積集合
**** ★★☆ ~intersect(x, y, ...)~.

- *積集合* = x, y の両方にある列を抜き出す

#+begin_src R
dplyr::intersect(x, y)
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
\\

*** 和集合
**** ★★☆ ~union(x, y, ...)~.

- *和集合* = x, y を連結し、重複を削除

#+begin_src R
dplyr::union(x, y)
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| peach  | tomato    |
| grape  | radish    |
\\

**** ★☆☆ ~union_all(x, y, ...)~.

- *和集合* = x, y を連結し、重複を削除 *しない*

#+begin_src R
dplyr::union_all(x, y)
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| peach  | tomato    |
| apple  | carrot    |
| banana | potato    |
| grape  | radish    |
\\

- ~bind_rows()~ と同じ？
- [[https://stackoverflow.com/questions/39709487/is-there-a-way-to-use-dplyrbind-rows-without-collecting-data-frames-from-the-d][ここ]] によると DB を利用する場合に違いがでる模様 (要調査)

#+begin_src R
bind_rows(x, y)
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| peach  | tomato    |
| apple  | carrot    |
| banana | potato    |
| grape  | radish    |
\\

*** 差集合
**** ★★☆ ~setdiff(x, y, ...)~.

- *差集合* = y にはない x の行を返す

#+begin_src R
dplyr::setdiff(x, y)
#+end_src

#+RESULTS:
| fruit | vegetable |
|-------+-----------|
| peach | tomato    |
\\

*** 同値
**** ★☆☆ ~setequal(x, y, ...)~.

- 同じ集合かどうかを判断する

#+begin_src R :results output :exports both
dplyr::setequal(x, y)
#+end_src

#+RESULTS:
: [1] FALSE
\\

**** ★☆☆ ~all_equal(target, current, ignore_col_order = TRUE, ignore_row_order = TRUE, convert = FALSE, ...)~.

- 同じ ~data.frame~ かどうかを比較
- 同じでない場合、異なる箇所を指摘してくれる

#+begin_src R :results output :exports both
dplyr::all_equal(x, y)
#+end_src

#+RESULTS:
: [1] "Rows in x but not y: 3. Rows in y but not x: 3. "

** 結合演算
*** Mutating join
**** ★★★ ~inner_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.

- x, y の両方に by が存在する場合に結合する
- ~by~ の指定方法
  - ~by = c("hoge")~
  - ~by = c("hoge" = "fuga")~ 列名が異なる場合
  - ~by = c("hoge" = "fuga", "foo" = "bar")~ 複数の列にマッチさせる場合

#+begin_src R
inner_join(x, y, by = c("fruit"))
#+end_src

#+RESULTS:
| fruit  | vegetable.x | vegetable.y |
|--------+-------------+-------------|
| apple  | carrot      | carrot      |
| banana | potato      | potato      |
\\

**** ★★★ ~left_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.

- x は全て利用し、by が一致する y があれば結合する
- y の欠損値は ~NA~ になる

#+begin_src R
left_join(x, y, by = "fruit")
#+end_src

#+RESULTS:
| fruit  | vegetable.x | vegetable.y |
|--------+-------------+-------------|
| apple  | carrot      | carrot      |
| banana | potato      | potato      |
| peach  | tomato      | nil         |
\\

**** ★☆☆ ~right_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.

- ~left_join()~ の x, y が逆のバージョン
- 基本的には ~left_join()~ の方が直感的にわかりやすいので利用しない

#+begin_src R
right_join(x, y, by = "fruit")
#+end_src

#+RESULTS:
| fruit  | vegetable.x | vegetable.y |
|--------+-------------+-------------|
| apple  | carrot      | carrot      |
| banana | potato      | potato      |
| grape  | nil         | radish      |
\\

**** ★★☆ ~full_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)~.

- x, y の全てを利用し、マッチしない部分を ~NA~ とする

#+begin_src R
full_join(x, y, by = "fruit")
#+end_src

#+RESULTS:
| fruit  | vegetable.x | vegetable.y |
|--------+-------------+-------------|
| apple  | carrot      | carrot      |
| banana | potato      | potato      |
| peach  | tomato      | nil         |
| grape  | nil         | radish      |
\\

**** TODO ★☆☆ ~nest_join(x, y, by = NULL, copy = FALSE, keep = FALSE, name = NULL, ...)~.

- ~full_join()~ 以外を一般的に扱うことができる

#+begin_src R
nest_join(x, y, by = "fruit")
#+end_src

\\

*** Filtering join
**** ★★☆ ~semi_join(x, y, by = NULL, copy = FALSE, ...)~.

- x をフィルタリングする条件として、y の ~by~ 列を利用する

#+begin_src R
semi_join(x, y, by = "fruit")
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
\\

**** ★☆☆ ~anti_join(x, y, by = NULL, copy = FALSE, ...)~.

- semi_join の否定形。y とマッチしなかった行を抜き出す

#+begin_src R
anti_join(x, y, by = "fruit")
#+end_src

#+RESULTS:
| fruit | vegetable |
|-------+-----------|
| peach | tomato    |
\\

*** Bind tables
**** ★★★ ~bind_rows(..., .id = NULL)~.

- 行の結合
- ~rbind~ よりも高速

#+begin_src R
bind_rows(x, y)
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| peach  | tomato    |
| apple  | carrot    |
| banana | potato    |
| grape  | radish    |
\\

- 引数は ~list of data.frames~ でもよい

#+begin_src R
bind_rows(list(x, y))
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| peach  | tomato    |
| apple  | carrot    |
| banana | potato    |
| grape  | radish    |
\\

- ~do.call()~ を使ったイディオムを置き換えるもの

#+begin_src R
do.call(rbind, list(x, y))
#+end_src

#+RESULTS:
| fruit  | vegetable |
|--------+-----------|
| apple  | carrot    |
| banana | potato    |
| peach  | tomato    |
| apple  | carrot    |
| banana | potato    |
| grape  | radish    |
\\

- .id = "column_name" で結合前のテーブル毎に id をつけてくれる
#+begin_src R
bind_rows(x, y, .id = "src")
#+end_src

#+RESULTS:
| src | fruit  | vegetable |
|-----+--------+-----------|
|   1 | apple  | carrot    |
|   1 | banana | potato    |
|   1 | peach  | tomato    |
|   2 | apple  | carrot    |
|   2 | banana | potato    |
|   2 | grape  | radish    |
\\

**** ★☆☆ ~bind_cols(...)~.

- 列の結合
- ~bind_rows()~ 同様に ~do.call(cbind, dfs)~ を置き換えるもの

#+begin_src R
bind_cols(x, y)
#+end_src

#+RESULTS:
| fruit  | vegetable | fruit1 | vegetable1 |
|--------+-----------+--------+------------|
| apple  | carrot    | apple  | carrot     |
| banana | potato    | banana | potato     |
| peach  | tomato    | grape  | radish     |
\\

* 実行環境

#+begin_src R :results output :exports both
sessionInfo()
#+end_src

#+RESULTS:
#+begin_example
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] rlang_0.4.0                tidyquant_0.5.7           
[3] quantmod_0.4-15            TTR_0.23-5                
[5] PerformanceAnalytics_1.5.3 xts_0.11-2                
[7] zoo_1.8-6                  lubridate_1.7.4           
[9] dplyr_0.8.3               

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2       rstudioapi_0.10  magrittr_1.5     tidyselect_0.2.5
 [5] lattice_0.20-38  R6_2.4.0         quadprog_1.5-7   fansi_0.4.0     
 [9] httr_1.4.1       stringr_1.4.0    tools_3.6.1      grid_3.6.1      
[13] utf8_1.1.4       cli_1.1.0        assertthat_0.2.1 tibble_2.1.3    
[17] crayon_1.3.4     purrr_0.3.2      vctrs_0.2.0      zeallot_0.1.0   
[21] curl_3.3         Quandl_2.10.0    glue_1.3.1       stringi_1.4.3   
[25] compiler_3.6.1   pillar_1.4.2     backports_1.1.5  jsonlite_1.6    
[29] pkgconfig_2.0.3
#+end_example
