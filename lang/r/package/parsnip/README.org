#+STARTUP: folded indent
#+PROPERTY: header-args:R :results output :colnames yes :session *R:parsnip*

* ~{parsnip}~: A tidy unified interface to models                    :noexport:

~{parsnip}~ は複数のモデリングパッケージをラップするパッケージ。
\\

* 目次                                                                :quote:
* ライブラリの読み込みとバージョンの確認

#+begin_src R :results silent
library(parsnip)
library(tidyverse)
library(tidymodels)
#+end_src
\\

- バージョン
#+begin_src R :results output :exports both
packageVersion("parsnip")
#+end_src

#+RESULTS:
: [1] ‘0.0.3.1’
\\

* 全関数リスト

#+begin_src R :results output
pacman::p_funs(parsnip)
#+end_src

#+RESULTS:
#+begin_example
 [1] ".cols"                     ".dat"                     
 [3] ".facts"                    ".lvls"                    
 [5] ".obs"                      ".preds"                   
 [7] ".x"                        ".y"                       
 [9] "%>%"                       "add_rowindex"             
[11] "boost_tree"                "C5.0_train"               
[13] "check_empty_ellipse"       "decision_tree"            
[15] "fit"                       "fit_control"              
[17] "fit_xy"                    "fit_xy.model_spec"        
[19] "fit.model_spec"            "get_dependency"           
[21] "get_fit"                   "get_from_env"             
[23] "get_model_env"             "get_pred_type"            
[25] "has_multi_predict"         "keras_mlp"                
[27] "linear_reg"                "logistic_reg"             
[29] "make_classes"              "mars"                     
[31] "min_grid"                  "min_grid.boost_tree"      
[33] "min_grid.linear_reg"       "min_grid.logistic_reg"    
[35] "min_grid.mars"             "min_grid.multinom_reg"    
[37] "min_grid.nearest_neighbor" "mlp"                      
[39] "model_printer"             "multi_predict"            
[41] "multi_predict_args"        "multinom_reg"             
[43] "nearest_neighbor"          "null_model"               
[45] "nullmodel"                 "pred_value_template"      
[47] "predict.model_fit"         "rand_forest"              
[49] "rpart_train"               "set_args"                 
[51] "set_dependency"            "set_engine"               
[53] "set_env_val"               "set_fit"                  
[55] "set_in_env"                "set_mode"                 
[57] "set_model_arg"             "set_model_engine"         
[59] "set_model_mode"            "set_new_model"            
[61] "set_pred"                  "show_call"                
[63] "show_model_info"           "surv_reg"                 
[65] "svm_poly"                  "svm_rbf"                  
[67] "tidy.model_fit"            "translate"                
[69] "varying"                   "varying_args"             
[71] "xgb_train"
#+end_example

* 概要

- ~type~: モデルの種類
- ~mode~: 分類 (classification) or 回帰 (regression)
- ~engine~: 実際に処理をおこなうパッケージ

*ワークフロー*
1. モデルを選択
2. ~set_engine()~ でパッケージを選択
3. ~fit()~ でモデル当てはめ

* Vignette

- ~model_spec~ class + 特定のモデル
- のちのち最適化されるパラメタは ~varying()~ として作成 (Placeholder の役割)
#+begin_src R
rf_mod <- rand_forest(trees =  2000, mtry = varying(), mode = "regression") %>%
  set_engine("ranger", seed = 63233)
rf_mod
class(rf_mod)
#+end_src

#+RESULTS:
#+begin_example
Random Forest Model Specification (regression)

Main Arguments:
  mtry = varying()
  trees = 2000

Engine-Specific Arguments:
  seed = 63233

Computational engine: ranger
[1] "rand_forest" "model_spec"
#+end_example
\\

- モデルの当てはめを行うためには ~varying()~ のパラメタに具体的な値を入れる必要がある
- ~{ranger}~ を使う場合
#+begin_src R
rf_mod %>%
  set_args(mtry = 4) %>%
  set_engine("ranger") %>%
  fit(mpg ~ ., data = mtcars)
#+end_src

#+RESULTS:
#+begin_example
parsnip model object

Ranger result

Call:
 ranger::ranger(formula = formula, data = data, mtry = ~4, num.trees = ~2000,      num.threads = 1, verbose = FALSE, seed = sample.int(10^5,          1)) 

Type:                             Regression 
Number of trees:                  2000 
Sample size:                      32 
Number of independent variables:  10 
Mtry:                             4 
Target node size:                 5 
Variable importance mode:         none 
Splitrule:                        variance 
OOB prediction error (MSE):       5.49497 
R squared (OOB):                  0.8487239
#+end_example
\\

- ~{randomForest}~ を使う場合
#+begin_src R
rf_mod %>%
  set_args(mtry = 4) %>%
  set_engine("randomForest") %>%
  fit(mpg ~ ., data = mtcars)
#+end_src

#+RESULTS:
#+begin_example
parsnip model object


Call:
 randomForest(x = as.data.frame(x), y = y, ntree = ~2000, mtry = ~4) 
               Type of random forest: regression
                     Number of trees: 2000
No. of variables tried at each split: 4

          Mean of squared residuals: 5.564976
                    % Var explained: 84.19
#+end_example
\\

* iris: 線形回帰 vs. ランダムフォレスト

#+begin_src R
# 訓練データとテストデータに分割
splits <- initial_split(iris, prop = 0.8)

# 対数変換するレシピを作成
rec <- recipe(Sepal.Width ~ ., data =  iris) %>%
  step_log(all_numeric())
rec_trained <- rec %>% prep()
train_baked <- rec_trained %>% bake(new_data = training(splits))
test_baked <- rec_trained %>% bake(new_data = testing(splits))

# "lm" を engine として利用
lm_mod <- linear_reg() %>%
  set_engine("lm") %>%
  fit(Sepal.Width ~ Sepal.Length, data = train_baked)
lm_mod
#+end_src

#+RESULTS:
: parsnip model object
: 
: 
: Call:
: stats::lm(formula = formula, data = data)
: 
: Coefficients:
:  (Intercept)  Sepal.Length  
:      1.22309      -0.06394
\\

#+begin_src R
# predict() 予測生成
# テストデータと予測を結合
pred <- test_baked %>% bind_cols(predict(lm_mod, new_data = .))

# yardstick で予測精度指標を取得
metrics(pred, Sepal.Width, .pred)
#+end_src

#+RESULTS:
: # A tibble: 3 x 3
:   .metric .estimator .estimate
:   <chr>   <chr>          <dbl>
: 1 rmse    standard       0.141
: 2 rsq     standard       0.101
: 3 mae     standard       0.113
\\

- ランダムフォレスト
#+begin_src R
rf_mod <- rand_forest(trees =  2000, mtry = 1, mode = "regression") %>%
  set_engine("ranger", seed = 63233) %>%
  fit(Sepal.Width ~ Sepal.Length, data = train_baked)
rf_mod
#+end_src

#+RESULTS:
#+begin_example
parsnip model object

Ranger result

Call:
 ranger::ranger(formula = formula, data = data, mtry = ~1, num.trees = ~2000,      seed = ~63233, num.threads = 1, verbose = FALSE) 

Type:                             Regression 
Number of trees:                  2000 
Sample size:                      121 
Number of independent variables:  1 
Mtry:                             1 
Target node size:                 5 
Variable importance mode:         none 
Splitrule:                        variance 
OOB prediction error (MSE):       0.02354428 
R squared (OOB):                  -0.1513539
#+end_example
\\

- 線形回帰よりも精度向上
#+begin_src R
rf_pred <- test_baked %>% bind_cols(predict(rf_mod, new_data = .))
metrics(rf_pred, Sepal.Width, .pred)
#+end_src

#+RESULTS:
: # A tibble: 3 x 3
:   .metric .estimator .estimate
:   <
:   <
:          <dbl>
: 1 rmse    standard      0.122 
: 2 rsq     standard      0.316 
: 3 mae     standard      0.0950
\\

* 関数リスト
** 対応モデル
*** mode = "unknown"
**** ~boost_tree(mode = "unknown", mtry = NULL, trees = NULL, min_n = NULL, tree_depth = NULL, learn_rate = NULL, loss_reduction = NULL, sample_size = NULL)~.

- 勾配ブースティング (Gradient Boosting)

**** ~decision_tree(mode = "unknown", cost_complexity = NULL, tree_depth = NULL, min_n = NULL)~.

- 決定木

**** ~mars(mode = "unknown", num_terms = NULL, prod_degree = NULL, prune_method = NULL)~.

- MARS (Multivariate Adaptive Regression Splines)

**** ~mlp(mode = "unknown", hidden_units = NULL, penalty = NULL, dropout = NULL, epochs = NULL, activation = NULL)~.

- Multilayer Perceptron 多層パーセプトロン

**** ~nearest_neighbor(mode = "unknown", neighbors = NULL, weight_func = NULL, dist_power = NULL)~.

- k 近傍法 (k-nearest neighbor algorithm, k-NN)

**** ~rand_forest(mode = "unknown", mtry = NULL, trees = NULL, min_n = NULL)~.

- ランダムフォレスト

**** ~svm_poly(mode = "unknown", cost = NULL, degree = NULL, scale_factor = NULL, margin = NULL)~.

- Support Vector Machine
- 非線形多項式

**** ~svm_rbf(mode = "unknown", cost = NULL, rbf_sigma = NULL, margin = NULL)~.

- SVM Radial Basis Function

*** mode = "classification"
**** ~logistic_reg(mode = "classification", penalty = NULL, mixture = NULL)~.
**** ~multinom_reg(mode = "classification", penalty = NULL, mixture = NULL)~.
**** ~null_model(mode = "classification")~.
*** mode = "regression"
**** ~linear_reg(mode = "regression", penalty = NULL, mixture = NULL)~.

- 対応エンジン
  • "lm" (the default) or "glmnet"
  • "stan"
  • "spark"
  • "keras"

**** ~surv_reg(mode = "regression", dist = NULL)~.
** ユーティリティ関数
*** set_engine(object, engine, ...)
*** set_args(object, ...)
*** set_mode(object, mode)
* 実行環境

#+begin_src R :results output :exports both
sessionInfo()
#+end_src

#+RESULTS:
#+begin_example
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] forcats_0.4.0   stringr_1.4.0   dplyr_0.8.3     purrr_0.3.2    
 [5] readr_1.3.1     tidyr_1.0.0     tibble_2.1.3    ggplot2_3.2.1  
 [9] tidyverse_1.2.1 parsnip_0.0.3.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2       cellranger_1.1.0 pillar_1.4.2     compiler_3.6.1  
 [5] tools_3.6.1      zeallot_0.1.0    jsonlite_1.6     lubridate_1.7.4 
 [9] lifecycle_0.1.0  gtable_0.3.0     nlme_3.1-141     lattice_0.20-38 
[13] pkgconfig_2.0.3  rlang_0.4.0      cli_1.1.0        rstudioapi_0.10 
[17] haven_2.1.1      withr_2.1.2      xml2_1.2.2       httr_1.4.1      
[21] generics_0.0.2   vctrs_0.2.0      hms_0.5.1        grid_3.6.1      
[25] tidyselect_0.2.5 glue_1.3.1       R6_2.4.0         readxl_1.3.1    
[29] pacman_0.5.1     modelr_0.1.5     magrittr_1.5     backports_1.1.5 
[33] scales_1.0.0     rvest_0.3.4      assertthat_0.2.1 colorspace_1.4-1
[37] stringi_1.4.3    lazyeval_0.2.2   munsell_0.5.0    broom_0.5.2     
[41] crayon_1.3.4
#+end_example
\\

* 参考リンク

- [[https://tidymodels.github.io/parsnip/][公式サイト]]
- [[https://cloud.r-project.org/web/packages/parsnip/index.html][CRAN]]
- [[https://cloud.r-project.org/web/packages/parsnip/parsnip.pdf][Reference Manual]]
- [[https://github.com/tidymodels/parsnip][Github Repo]]
- [[https://tidymodels.github.io/parsnip/articles/articles/Models.html][List of Models]]
- Vignette
  - [[https://cloud.r-project.org/web/packages/parsnip/vignettes/parsnip_Intro.html][parsnip Basics]]
- Blog
  - [[https://dropout009.hatenablog.com/entry/2019/01/06/124932][tidymodelsによるtidyな機械学習フロー（その1）@Dropout]]
  - [[https://dropout009.hatenablog.com/entry/2019/01/09/214233][tidymodelsによるtidyな機械学習フロー（その2：Cross Varidation）@Dropout]]
