#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results output :colnames yes :session *R:stringr*

* 目次                                                            :QUOTE:TOC:
#+BEGIN_QUOTE
- [[#stringr-a-fresh-approach-to-string-manipulation-in-r][~{stringr}~: A fresh approach to string manipulation in R]]
- [[#ライブラリの読み込みとバージョンの確認][ライブラリの読み込みとバージョンの確認]]
- [[#全関数リスト][全関数リスト]]
- [[#基本操作][基本操作]]
  - [[#-str_lengthstring-文字数をカウント][★☆☆ ~str_length(string)~ 文字数をカウント]]
  - [[#-str_substring-start--1l-end---1l-インデックスで抽出][★☆☆ ~str_sub(string, start = 1L, end = -1L)~ インデックスで抽出]]
  - [[#-str_flattenstring-collapse---ベクトルの結合][★☆☆ ~str_flatten(string, collapse = "")~ ベクトルの結合]]
  - [[#-str_c-sep---collapse--null--の結合][★☆☆ ~str_c(..., sep = "", collapse = NULL)~ ~...~ の結合]]
  - [[#-str_splitstring-pattern-n--inf-simplify--false-分割][★★☆ ~str_split(string, pattern, n = Inf, simplify = FALSE)~ 分割]]
  - [[#-str_split_fixedstring-pattern-n-固定長で分割][★☆☆ ~str_split_fixed(string, pattern, n)~ 固定長で分割]]
  - [[#-str_dupstring-times-複製][★☆☆ ~str_dup(string, times)~ 複製]]
  - [[#-str_trimstring-side--cboth-left-right-空白を除去][★☆☆ ~str_trim(string, side = c("both", "left", "right"))~ 空白を除去]]
  - [[#-str_squishstring-複数の空白を除去][★☆☆ ~str_squish(string)~ 複数の空白を除去]]
  - [[#-str_padstring-width-side--cleft-right-both-pad----文字埋め][★☆☆ ~str_pad(string, width, side = c("left", "right", "both"), pad = " ")~ 文字埋め]]
  - [[#-str_truncstring-width-side--cright-left-center-ellipsis--][★☆☆ ~str_trunc(string, width, side = c("right", "left", "center"), ellipsis = "...")~]]
- [[#正規表現][正規表現]]
  - [[#-str_countstring-pattern---マッチをカウント][★☆☆ ~str_count(string, pattern = "")~ マッチをカウント]]
  - [[#-str_detectstring-pattern-negate--false-マッチ-predicate][★★★ ~str_detect(string, pattern, negate = FALSE)~ マッチ Predicate]]
  - [[#-str_startsstring-pattern-negate--false-先頭マッチ-predicate][★★★ ~str_starts(string, pattern, negate = FALSE)~ 先頭マッチ Predicate]]
  - [[#-str_endsstring-pattern-negate--false-末尾マッチ-predicate][★★★ ~str_ends(string, pattern, negate = FALSE)~ 末尾マッチ Predicate]]
  - [[#-str_extractstring-pattern-マッチ部分を抽出][★★☆ ~str_extract(string, pattern)~ マッチ部分を抽出]]
  - [[#-str_extract_allstring-pattern-simplify--false][★☆☆ ~str_extract_all(string, pattern, simplify = FALSE)~]]
  - [[#-str_subsetstring-pattern-negate--false-マッチ要素を抽出][★★★ ~str_subset(string, pattern, negate = FALSE)~ マッチ要素を抽出]]
  - [[#-str_whichstring-pattern-negate--false-マッチのインデックス][★★☆ ~str_which(string, pattern, negate = FALSE)~ マッチのインデックス]]
  - [[#-str_locatestring-pattern-マッチの開始終了インデックス][★☆☆ ~str_locate(string, pattern)~ マッチの開始・終了インデックス]]
  - [[#-str_locate_allstring-pattern][★☆☆ ~str_locate_all(string, pattern)~]]
  - [[#-str_matchstring-pattern-マッチしないものも含めて返す][★☆☆ ~str_match(string, pattern)~ マッチしないものも含めて返す]]
  - [[#-str_match_allstring-pattern][★☆☆ ~str_match_all(string, pattern)~]]
  - [[#-str_replacestring-pattern-replacement-マッチを置換][★☆☆ ~str_replace(string, pattern, replacement)~ マッチを置換]]
  - [[#-str_replace_allstring-pattern-replacement][★☆☆ ~str_replace_all(string, pattern, replacement)~]]
  - [[#-str_removestring-pattern-マッチを削除][★☆☆ ~str_remove(string, pattern)~ マッチを削除]]
  - [[#-str_remove_allstring-pattern][★☆☆ ~str_remove_all(string, pattern)~]]
  - [[#regex][REGEX]]
- [[#書式変換][書式変換]]
  - [[#-str_to_lowerstring-locale--en][★☆☆ ~str_to_lower(string, locale = "en")~]]
  - [[#-str_to_upperstring-locale--en][★☆☆ ~str_to_upper(string, locale = "en")~]]
  - [[#-str_to_titlestring-locale--en][★☆☆ ~str_to_title(string, locale = "en")~]]
  - [[#-str_to_sentencestring-locale--en][★☆☆ ~str_to_sentence(string, locale = "en")~]]
  - [[#-str_interpstring-env--parentframe-文字列中に-formatexpr-を埋め込む][★☆☆ ~str_interp(string, env = parent.frame())~ 文字列中に $[format]{expr} を埋め込む]]
- [[#参考リンク][参考リンク]]
- [[#実行環境][実行環境]]
#+END_QUOTE

* ~{stringr}~: A fresh approach to string manipulation in R

~{stringr}~ (ストリンガー) は、R の文字列を操作するパッケージ。
\\

* ライブラリの読み込みとバージョンの確認

#+begin_src R :results silent
library(stringr)
#+end_src
\\

- バージョン
#+begin_src R :exports both
packageVersion("stringr")
#+end_src

#+RESULTS:
: [1] ‘1.4.0’
\\

* 全関数リスト

#+begin_src R :exports both
pacman::p_funs(stringr)
#+end_src

#+RESULTS:
#+begin_example
 [1] "%>%"             "boundary"        "coll"            "fixed"          
 [5] "invert_match"    "regex"           "str_c"           "str_conv"       
 [9] "str_count"       "str_detect"      "str_dup"         "str_ends"       
[13] "str_extract"     "str_extract_all" "str_flatten"     "str_glue"       
[17] "str_glue_data"   "str_interp"      "str_length"      "str_locate"     
[21] "str_locate_all"  "str_match"       "str_match_all"   "str_order"      
[25] "str_pad"         "str_remove"      "str_remove_all"  "str_replace"    
[29] "str_replace_all" "str_replace_na"  "str_sort"        "str_split"      
[33] "str_split_fixed" "str_squish"      "str_starts"      "str_sub"        
[37] "str_sub<-"       "str_subset"      "str_to_lower"    "str_to_sentence"
[41] "str_to_title"    "str_to_upper"    "str_trim"        "str_trunc"      
[45] "str_view"        "str_view_all"    "str_which"       "str_wrap"       
[49] "word"
#+end_example

* 基本操作
** ★☆☆ ~str_length(string)~ 文字数をカウント

#+begin_src R :exports both
str_length("hoge")
#+end_src

#+RESULTS:
: [1] 4
\\

** ★☆☆ ~str_sub(string, start = 1L, end = -1L)~ インデックスで抽出
     
#+begin_src R
str_sub("hoge_fuga", start = 1, end = 4)
#+end_src

#+RESULTS:
: [1] "hoge"
\\

- インデックスをマイナスにすると後ろから指定できる
#+begin_src R
str_sub("hoge_fuga", start = 1, end = 4)
str_sub("hoge_fuga", start = -4, end = -1)
#+end_src

#+RESULTS:
: [1] "hoge"
: 
: [1] "fuga"
\\

- ~str_sub(string, start = 1L, end = -1L, omit_na = FALSE) <- value~

** ★☆☆ ~str_flatten(string, collapse = "")~ ベクトルの結合

#+begin_src R
str_flatten(c("hoge", "fuga"), collapse = "_")
#+end_src

#+RESULTS:
: hoge_fuga

** ★☆☆ ~str_c(..., sep = "", collapse = NULL)~ ~...~ の結合

- ... 引数を結合
#+begin_src R
str_c("hoge", "fuga", c("piyo", "piyo"), sep = "_")
#+end_src

#+RESULTS:
: [1] "hoge_fuga_piyo" "hoge_fuga_piyo"

** ★★☆ ~str_split(string, pattern, n = Inf, simplify = FALSE)~ 分割

- ~list~ で返す
#+begin_src R
str_split("hoge_fuga", "_")
#+end_src

#+RESULTS:
: [[1]]
: [1] "hoge" "fuga"

- ~matrix~ で返す
#+begin_src R
str_split("hoge_fuga", "_", simplify = TRUE)
#+end_src

#+RESULTS:
:      [,1]   [,2]  
: [1,] "hoge" "fuga"

- 長さを指定する
#+begin_src R
str_split("hoge_fuga_piyo", "_", n = 2)
#+end_src

#+RESULTS:
: [[1]]
: [1] "hoge"      "fuga_piyo"

** ★☆☆ ~str_split_fixed(string, pattern, n)~ 固定長で分割

- 不足分を空文字で埋めてくれる
#+begin_src R
str_split_fixed("hoge_fuga_piyo", "_", 4)
#+end_src

#+RESULTS:
:      [,1]   [,2]   [,3]   [,4]
: [1,] "hoge" "fuga" "piyo" ""

** ★☆☆ ~str_dup(string, times)~ 複製

- 指定した文字を複製して結合
#+begin_src R
str_dup("hoge", 10)
#+end_src

#+RESULTS:
: [1] "hogehogehogehogehogehogehogehogehogehoge"

- 区切りとして便利
#+begin_src R
str_dup("#", 79) 
#+end_src

#+RESULTS:
: [1] "###############################################################################"

** ★☆☆ ~str_trim(string, side = c("both", "left", "right"))~ 空白を除去

#+begin_src R
str_trim(" hoge ", side = "both")
#+end_src

#+RESULTS:
: [1] "hoge"

** ★☆☆ ~str_squish(string)~ 複数の空白を除去

- 2 つ以上の空白文字を取り除く
#+begin_src R
str_squish("  hoge  ")
#+end_src

#+RESULTS:
: [1] "hoge"

** ★☆☆ ~str_pad(string, width, side = c("left", "right", "both"), pad = " ")~ 文字埋め

#+begin_src R
str_pad("hoge", width = 7, side = "right", pad = "_")
#+end_src

#+RESULTS:
: [1] "hoge___"

** TODO ★☆☆ ~str_trunc(string, width, side = c("right", "left", "center"), ellipsis = "...")~

#+begin_src R
names <- c("Shun", "Shiori", "Tamaki", "Ryo")
str_trunc(names, 4, side = "right", ellipsis = "...")
#+end_src

#+RESULTS:
: [1] "Shun" "S..." "T..." "Ryo"

* 正規表現
** ★☆☆ ~str_count(string, pattern = "")~ マッチをカウント

#+begin_src R
str_count("hoge_hoge_hoge", pattern = "hoge")
#+end_src

#+RESULTS:
: [1] 3

** ★★★ ~str_detect(string, pattern, negate = FALSE)~ マッチ Predicate

#+begin_src R
str_detect("hoge", "ho")
#+end_src

#+RESULTS:
: [1] TRUE

- negate = TRUE で結果を反転
#+begin_src R
str_detect("hoge", "ho", negate = TRUE)
#+end_src

#+RESULTS:
: [1] FALSE

** ★★★ ~str_starts(string, pattern, negate = FALSE)~ 先頭マッチ Predicate

#+begin_src R
str_starts("hoge", "h")
#+end_src

#+RESULTS:
: [1] TRUE

** ★★★ ~str_ends(string, pattern, negate = FALSE)~ 末尾マッチ Predicate

#+begin_src R
str_ends("hoge", "e")
#+end_src

#+RESULTS:
: [1] TRUE

** ★★☆ ~str_extract(string, pattern)~ マッチ部分を抽出

- マッチしないと NA
#+begin_src R
str_extract("hoge_fuga", "^hoge_")
#+end_src

#+RESULTS:
: [1] "hoge_"

** ★☆☆ ~str_extract_all(string, pattern, simplify = FALSE)~

- マッチした全て
#+begin_src R
str_extract_all("hoge_hoge_fuga", "hoge") 
#+end_src

#+RESULTS:
: [[1]]
: [1] "hoge" "hoge"

** ★★★ ~str_subset(string, pattern, negate = FALSE)~ マッチ要素を抽出

#+begin_src R
strings <- c("hoge", "fuga", "moge")
str_subset(strings, "hoge")

# 上記と同じ
# strings[str_detect(strings, "hoge")]
#+end_src

#+RESULTS:
: [1] "hoge"

** ★★☆ ~str_which(string, pattern, negate = FALSE)~ マッチのインデックス

#+begin_src R
strings <- c("hoge", "fuga", "moge")
str_which(strings, "hoge")

# 上記と同じ
# which(str_detect(strings, "hoge"))
#+end_src

#+RESULTS:
: [1] 1

** ★☆☆ ~str_locate(string, pattern)~ マッチの開始・終了インデックス

#+begin_src R
str_locate("hoge_fuga", "hoge")
#+end_src

#+RESULTS:
:      start end
: [1,]     1   4

** ★☆☆ ~str_locate_all(string, pattern)~

#+begin_src R
str_locate_all("hoge_hoge_fuga", "hoge")
#+end_src

#+RESULTS:
: [[1]]
:      start end
: [1,]     1   4
: [2,]     6   9

** ★☆☆ ~str_match(string, pattern)~ マッチしないものも含めて返す

#+begin_src R
strings <- c("hoge", "fuga", "moge")
str_match(strings, "hoge") # matrix で返す
#+end_src

#+RESULTS:
:      [,1]  
: [1,] "hoge"
: [2,] NA    
: [3,] NA

** ★☆☆ ~str_match_all(string, pattern)~

- list で返す
#+begin_src R
strings <- c("hoge", "fuga", "moge")
str_match_all(strings, "hoge")
#+end_src

#+RESULTS:
: [[1]]
:      [,1]  
: [1,] "hoge"
: 
: [[2]]
:      [,1]
: 
: [[3]]
:      [,1]

** ★☆☆ ~str_replace(string, pattern, replacement)~ マッチを置換

#+begin_src R
str_replace("hoge_fuga", "hoge", "xxxx")
#+end_src

#+RESULTS:
: [1] "xxxx_fuga"

** ★☆☆ ~str_replace_all(string, pattern, replacement)~

#+begin_src R
str_replace_all("hoge_hoge", "hoge", "xxxx")
#+end_src

#+RESULTS:
: [1] "xxxx_xxxx"

** ★☆☆ ~str_remove(string, pattern)~ マッチを削除

#+begin_src R
str_remove("hoge_fuga", "hoge")
#+end_src

#+RESULTS:
: [1] "_fuga"

** ★☆☆ ~str_remove_all(string, pattern)~

#+begin_src R 
str_remove_all("hoge_hoge_fuga", "hoge")
#+end_src

#+RESULTS:
: [1] "__fuga"

** TODO REGEX

stringr の pattern 引数に以下の関数を通して渡すことで正規表現の挙動を変更できる
regex()
fixed()
boundary()
coll()

* 書式変換
** ★☆☆ ~str_to_lower(string, locale = "en")~

#+begin_src R
str_to_lower("HOGE")
#+end_src

#+RESULTS:
: [1] "hoge"

** ★☆☆ ~str_to_upper(string, locale = "en")~

#+begin_src R
str_to_upper("hoge")
#+end_src

#+RESULTS:
: [1] "HOGE"

** ★☆☆ ~str_to_title(string, locale = "en")~

#+begin_src R
str_to_title("hoge no fuga")
#+end_src

#+RESULTS:
: [1] "Hoge No Fuga"

** ★☆☆ ~str_to_sentence(string, locale = "en")~

#+begin_src R
str_to_sentence("hoge no fuga")
#+end_src

#+RESULTS:
: [1] "Hoge no fuga"

** ★☆☆ ~str_interp(string, env = parent.frame())~ 文字列中に $[format]{expr} を埋め込む

#+begin_src R
str_interp("Mean sepal width is $[.3f]{mean(Sepal.Width)}.", iris)
#+end_src

#+RESULTS:
: [1] "Mean sepal width is 3.057."

#+begin_src R
str_interp("Mean sepal width is $[.3f]{mean(iris$Sepal.Width)}.")
#+end_src

#+RESULTS:
: [1] "Mean sepal width is 3.057."

* 参考リンク

- [[https://stringr.tidyverse.org/][公式サイト]]
- [[https://cloud.r-project.org/web/packages/stringr/index.html][CRAN]]
- [[https://cloud.r-project.org/web/packages/stringr/stringr.pdf][Reference Manual]]
- [[https://github.com/tidyverse/stringr][Github Repo]]
- [[https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf][Cheatsheet(PDF)]]
- Vignette
  - [[https://cloud.r-project.org/web/packages/stringr/vignettes/stringr.html][Introduction to stringr]]
  - [[https://cloud.r-project.org/web/packages/stringr/vignettes/regular-expressions.html][Regular expressions]]
- Blog
  - [[https://heavywatal.github.io/rstats/stringr.html][stringr — Rの文字列をまともな方法で処理する@Heavy Watal]]
    
* 実行環境

#+begin_src R :results output :exports both
sessionInfo()
#+end_src

#+RESULTS:
#+begin_example
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] stringr_1.4.0

loaded via a namespace (and not attached):
[1] compiler_3.6.1 magrittr_1.5   tools_3.6.1    stringi_1.4.3
#+end_example
