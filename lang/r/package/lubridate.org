#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results output :colnames yes :session *R:lubridate*

* ~{lubridate}~: Make working with dates in R just that little bit easier :noexport:

~{lubridate}~ (リュブリデート) は、R の日付を操作するパッケージ。 ~{tidyverse}~ の他のパッケージ同様、base R ではややこしい機能を簡単に扱えるようにしてくれている。

- 日付データは ~Date~ class で扱う
- 日時データは ~POSIXct~ class で扱う (POSIXlt などは使わない)
- タイムスパンを表現する 3 つのクラスが追加されている
\\

* 目次                                                            :toc:quote:
#+BEGIN_QUOTE
- [[#ライブラリの読み込みとバージョンの確認][ライブラリの読み込みとバージョンの確認]]
- [[#関数リスト-dateposixct-class][関数リスト: Date/POSIXct class]]
  - [[#新規作成][新規作成]]
    - [[#-nowtzone--][★★☆ ~now(tzone = "")~.]]
    - [[#-todaytzone--][★★☆ ~today(tzone = "")~.]]
    - [[#-make_datetimeyear--1970l-month--1l-day--1l-hour--0l-min--0l-sec--0-tz--utc][★★☆ ~make_datetime(year = 1970L, month = 1L, day = 1L, hour = 0L, min = 0L, sec = 0, tz = "UTC")~.]]
    - [[#-make_dateyear--1970l-month--1l-day--1l][★★☆ ~make_date(year = 1970L, month = 1L, day = 1L)~.]]
    - [[#-ymd-quiet--false-tz--null-locale--sysgetlocalelc_time-truncated--0][★★★ ~ymd(..., quiet = FALSE, tz = NULL, locale = Sys.getlocale("LC_TIME"), truncated = 0)~.]]
    - [[#-ymd_hms-quiet--false-tz--utc-locale--sysgetlocalelc_time-truncated--0][★★★ ~ymd_hms(..., quiet = FALSE, tz = "UTC", locale = Sys.getlocale("LC_TIME"), truncated = 0)~.]]
    - [[#-as_datex-tz--null][★★☆ ~as_date(x, tz = NULL)~.]]
    - [[#-as_datetimex-tz--utc][★★☆ ~as_datetime(x, tz = "UTC")~.]]
  - [[#要素の抽出--アクセサ関数][要素の抽出 + アクセサ関数]]
    - [[#-secondx-minutex-hourx][★☆☆ ~second(x)~, ~minute(x)~, ~hour(x)~.]]
    - [[#-dayx-wdayx-qdayx-ydayx][★☆☆ ~day(x)~, ~wday(x)~, ~qday(x)~, ~yday(x)~.]]
    - [[#-weekx-isoweekx-epiweekx][★★★ ~week(x)~, ~isoweek(x)~, ~epiweek(x)~.]]
    - [[#-monthx-label--false-abbr--true-locale--sysgetlocalelc_time][★★★ ~month(x, label = FALSE, abbr = TRUE, locale = Sys.getlocale("LC_TIME"))~.]]
    - [[#-yearx-isoyearx-epiyearx][★★★ ~year(x)~, ~isoyear(x)~, ~epiyear(x)~.]]
    - [[#-tzx][★☆☆ ~tz(x)~]]
  - [[#タイムゾーン][タイムゾーン]]
    - [[#-with_tztime-tzone--][★★☆ ~with_tz(time, tzone = "")~.]]
    - [[#-force_tztime-tzone---roll--false][★★☆ ~force_tz(time, tzone = "", roll = FALSE)~.]]
    - [[#-force_tzstime-tzones-tzone_out--utc-roll--false][★☆☆ ~force_tzs(time, tzones, tzone_out = "UTC", roll = FALSE)~.]]
  - [[#丸め][丸め]]
    - [[#-round_datex-unit--second-week_start--getoptionlubridateweekstart-7][★★☆ ~round_date(x, unit = "second", week_start = getOption("lubridate.week.start", 7))~.]]
    - [[#-floor_datex-unit--seconds-week_start--getoptionlubridateweekstart-7][★★☆ ~floor_date(x, unit = "seconds", week_start = getOption("lubridate.week.start", 7))~.]]
    - [[#-ceiling_datex-unit--seconds-change_on_boundary--null-week_start--getoptionlubridateweekstart-7][★★☆ ~ceiling_date(x, unit = "seconds", change_on_boundary = NULL, week_start = getOption("lubridate.week.start", 7))~.]]
- [[#関数リスト-timespan-class][関数リスト: Timespan class]]
  - [[#3-つの-s4-クラスが用意されている][3 つの S4 クラスが用意されている]]
  - [[#intervals][Intervals]]
    - [[#-intervalstart-end--null-tzone--tzstart][★☆☆ ~interval(start, end = NULL, tzone = tz(start))~.]]
    - [[#-start----end][★☆☆ ~start %--% end~.]]
    - [[#-isintervalx][★☆☆ ~is.interval(x)~.]]
    - [[#-int_startint][★☆☆ ~int_start(int)~.]]
    - [[#-int_endint][★☆☆ ~int_end(int)~.]]
    - [[#-int_lengthint][★☆☆ ~int_length(int)~.]]
    - [[#-int_flipint][★☆☆ ~int_flip(int)~.]]
    - [[#-int_shiftint-by][★☆☆ ~int_shift(int, by)~.]]
    - [[#-int_overlapsint1-int2][★☆☆ ~int_overlaps(int1, int2)~.]]
    - [[#-int_standardizeint][★☆☆ ~int_standardize(int)~.]]
    - [[#-int_alignsint1-int2][★☆☆ ~int_aligns(int1, int2)~.]]
    - [[#-int_difftimes][★☆☆ ~int_diff(times)~.]]
  - [[#durations][Durations]]
    - [[#-durationnum--null-units--seconds-][★☆☆ ~duration(num = NULL, units = "seconds", ...)~.]]
    - [[#-dsecondsx--1][★☆☆ ~dseconds(x = 1)~.]]
    - [[#-dminutesx--1][★☆☆ ~dminutes(x = 1)~.]]
    - [[#-dhoursx--1][★☆☆ ~dhours(x = 1)~.]]
    - [[#-ddaysx--1][★☆☆ ~ddays(x = 1)~.]]
    - [[#-dweeksx--1][★☆☆ ~dweeks(x = 1)~.]]
    - [[#-dyearsx--1][★☆☆ ~dyears(x = 1)~.]]
    - [[#-dmillisecondsx--1][★☆☆ ~dmilliseconds(x = 1)~.]]
    - [[#-dmicrosecondsx--1][★☆☆ ~dmicroseconds(x = 1)~.]]
    - [[#-dnanosecondsx--1][★☆☆ ~dnanoseconds(x = 1)~.]]
    - [[#-dpicosecondsx--1][★☆☆ ~dpicoseconds(x = 1)~.]]
    - [[#-isdurationx][★☆☆ ~is.duration(x)~.]]
  - [[#periods][Periods]]
    - [[#-periodnum--null-units--second-][★☆☆ ~period(num = NULL, units = "second", ...)~.]]
    - [[#-isperiodx][★☆☆ ~is.period(x)~.]]
    - [[#-secondsx--1][★☆☆ ~seconds(x = 1)~.]]
    - [[#-minutesx--1][★☆☆ ~minutes(x = 1)~.]]
    - [[#-hoursx--1][★☆☆ ~hours(x = 1)~.]]
    - [[#-daysx--1][★☆☆ ~days(x = 1)~.]]
    - [[#-weeksx--1][★☆☆ ~weeks(x = 1)~.]]
    - [[#-yearsx--1][★☆☆ ~years(x = 1)~.]]
    - [[#-millisecondsx--1][★☆☆ ~milliseconds(x = 1)~.]]
    - [[#-microsecondsx--1][★☆☆ ~microseconds(x = 1)~.]]
    - [[#-nanosecondsx--1][★☆☆ ~nanoseconds(x = 1)~.]]
    - [[#-picosecondsx--1][★☆☆ ~picoseconds(x = 1)~.]]
- [[#実行環境][実行環境]]
- [[#参考リンク][参考リンク]]
#+END_QUOTE

* ライブラリの読み込みとバージョンの確認

#+begin_src R :results silent
library(lubridate)
#+end_src
\\

- バージョン
#+begin_src R :exports both
packageVersion("lubridate")
#+end_src

#+RESULTS:
: [1] ‘1.7.4’
\\

* 関数リスト: Date/POSIXct class
** 新規作成
*** ★★☆ ~now(tzone = "")~.

- ~POSIXct~ class で現在日時を返す
- ~tzone~ は省略するとシステムのデフォルトになる
- ~Sys.time()~ と同じだが ~tzone~ を指定できる

#+begin_src R
now()
Sys.time()
#+end_src

#+RESULTS:
: [1] "2019-10-17 13:03:19 JST"
: 
: [1] "2019-10-17 13:03:19 JST"
\\

- ~tzone~ 指定
#+begin_src R
now(tzone = "America/New_York")
#+end_src

#+RESULTS:
: [1] "2019-10-17 00:01:39 EDT"
\\

*** ★★☆ ~today(tzone = "")~.

- ~Date~ class
#+begin_src R
today()
Sys.Date()
#+end_src

#+RESULTS:
: [1] "2019-10-17"
: 
: [1] "2019-10-17"
\\

*** ★★☆ ~make_datetime(year = 1970L, month = 1L, day = 1L, hour = 0L, min = 0L, sec = 0, tz = "UTC")~.
 
- ~POSIXct~ class
#+begin_src R
make_datetime(2018, 1, 28, 14, 32, 23)
#+end_src

#+RESULTS:
: [1] "2018-01-28 14:32:23 UTC"

*** ★★☆ ~make_date(year = 1970L, month = 1L, day = 1L)~.

- ~Date~ class
#+begin_src R
make_date(2018, 1, 28)
#+end_src

#+RESULTS:
: [1] "2018-01-28"

*** ★★★ ~ymd(..., quiet = FALSE, tz = NULL, locale = Sys.getlocale("LC_TIME"), truncated = 0)~.

- ~Date~ class
#+begin_src R
ymd("20190128")
ymd("2019/01/28")
ymd("2019-01-28")
ymd("19-01-28")
ymd("19-1-28")
#+end_src

#+RESULTS:
: [1] "2019-01-28"
: 
: [1] "2019-01-28"
: 
: [1] "2019-01-28"
: 
: [1] "2019-01-28"
: 
: [1] "2019-01-28"

- 同様に ~Date~ を作成する亜種
  - ~ydm()~, ~mdy()~, ~myd()~, ~dmy()~, ~dym()~, ~yq()~

*** ★★★ ~ymd_hms(..., quiet = FALSE, tz = "UTC", locale = Sys.getlocale("LC_TIME"), truncated = 0)~.

- ~POSIXct~ class
#+begin_src R
ymd_hms("2019-01-28 16:39:02", tz = "America/New_York")
#+end_src

#+RESULTS:
: [1] "2019-01-28 16:39:02 EST"

- 同様に POSIXct を作成する亜種
  - ~ymd_hms()~, ~ymd_hm()~, ~ymd_h()~
  - ~dmy_hms()~, ~dmy_hm()~, ~dmy_h()~
  - ~mdy_hms()~, ~mdy_hm()~, ~mdy_h()~
  - ~ydm_hms()~, ~ydm_hm()~, ~ydm_h()~

*** ★★☆ ~as_date(x, tz = NULL)~.

- ~POSIXt~ -> ~Date~
- ~as_date(x, tz = NULL)~
- 日時を無視するだけなので、変換結果がより直感的
#+begin_src R
dt_europe <- ymd_hms("2010-08-03 00:50:50", tz="Europe/London")
as_date(dt_europe)
as.Date(dt_europe)
#+end_src

#+RESULTS:
: [1] "2010-08-03"
: [1] "2010-08-02"

- ~numeric~ -> ~Date~
- ~as_date(x, origin = lubridate::origin)~
- origin を指定しなくてもよい
#+begin_src R
as_date(10)
as.Date(10, origin = "1970-01-01")
#+end_src

#+RESULTS:
: [1] "1970-01-11"
: [1] "1970-01-11"
\\

- character -> Date
- ~as_date(x, tz = NULL, format = NULL)~
- format で書式を指定できる
#+begin_src R
as_date("Jan26, 2019", tz = "UTC", format = "%b%d, %Y")
#+end_src

#+RESULTS:
: [1] "2019-01-26"
\\

*** ★★☆ ~as_datetime(x, tz = "UTC")~.

- ~POSIXt~ -> ~POSIXct~
- ~as_date(x, tz = NULL)~
#+begin_src R
dt_europe <- ymd_hms("2010-08-03 00:50:50", tz="Europe/London")
as_datetime(dt_europe, tz = "Europe/London")
#+end_src

#+RESULTS:
: [1] "2010-08-03 00:50:50 BST"
\\

- ~numeric~ -> ~POSIXct~
- ~as_datetime(x, origin = lubridate::origin, tz = "UTC")~
- origin を指定しなくてもよい
#+begin_src R
as_datetime(10)
as.POSIXct(10, tz = "UTC", origin = "1970-01-01 00:00:00")
#+end_src

#+RESULTS:
: [1] "1970-01-01 00:00:10 UTC"
: [1] "1970-01-01 00:00:10 UTC"
\\

- ~character~ -> ~POSIXct~
- ~as_datetime(x, tz = "UTC", format = NULL)~
- format で書式を指定できる
#+begin_src R
as_datetime("Jan26, 2019 15:12:53", tz = "UTC", format = "%b%d, %Y %H:%M:%OS")
#+end_src

#+RESULTS:
: [1] "2019-01-26 15:12:53 UTC"
\\

** 要素の抽出 + アクセサ関数
*** ★☆☆ ~second(x)~, ~minute(x)~, ~hour(x)~.

- 日時を抽出
#+begin_src R
dt <- now()
dt
second(dt)
#+end_src

#+RESULTS:
: [1] "2019-10-17 13:33:47 JST"
: [1] 47.59161

- 変更もできる
#+begin_src R
second(dt) <- 0
dt
#+end_src

#+RESULTS:
: [1] "2019-10-17 13:33:00 JST"

*** ★☆☆ ~day(x)~, ~wday(x)~, ~qday(x)~, ~yday(x)~.

- 特定の起点からの経過日を返す
- wday() は更に細かいオプションが指定可能
  ~wday(x, label = FALSE, abbr = TRUE, week_start = getOption("lubridate.week.start", 7), locale = Sys.getlocale("LC_TIME"))~

#+begin_src R
dt <- today()
dt
day(dt)
wday(dt) # day of the week
mday(dt)
qday(dt) # day of the quarter
yday(dt) # day of the year
#+end_src

#+RESULTS:
: [1] "2019-10-17"
: [1] 17
: [1] 5
: [1] 17
: [1] 17
: [1] 290
\\

*** ★★★ ~week(x)~, ~isoweek(x)~, ~epiweek(x)~.

- week は 1 月 1 日からの経過日数、isoweek はいわゆる年間の week
#+begin_src R
dt <- today()
dt
week(dt)
isoweek(dt)
epiweek(dt)
#+end_src

#+RESULTS:
: [1] "2019-10-17"
: [1] 42
: [1] 42
: [1] 42

*** ★★★ ~month(x, label = FALSE, abbr = TRUE, locale = Sys.getlocale("LC_TIME"))~.

#+begin_src R
dt <- today()
month(dt)
#+end_src

#+RESULTS:
: [1] 10
\\

- ~month()~, ~wday()~ は ~label = TRUE~ でファクターとして取り出す 
#+begin_src R
dt <- today()
month(dt, label = TRUE)
wday(dt, label = TRUE)
#+end_src

#+RESULTS:
: [1] Oct
: 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec
: [1] Thu
: Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat
\\

- abbr = FALSE で完全名を取得
#+begin_src R
month(dt, label = TRUE, abbr = FALSE)
#+end_src

#+RESULTS:
: [1] October
: 12 Levels: January < February < March < April < May < June < ... < December
\\

*** ★★★ ~year(x)~, ~isoyear(x)~, ~epiyear(x)~.

#+begin_src R
dt <- today()
dt
year(dt)
isoyear(dt) # ISO 8601 year
epiyear(dt) # Epidemilogical year
#+end_src

#+RESULTS:
: [1] "2019-10-17"
: [1] 2019
: [1] 2019
: [1] 2019
\\

*** ★☆☆ ~tz(x)~

#+begin_src R
dt <- today()
dt
tz(dt)
#+end_src

#+RESULTS:
: [1] "2019-10-17"
: [1] "UTC"

** タイムゾーン
*** ★★☆ ~with_tz(time, tzone = "")~.

- タイムゾーン間の変換が可能
#+begin_src R
dt <- ymd_hms("2018-02-08 11:38:43", tz = "Asia/Tokyo")
dt
with_tz(dt, "America/New_York")
#+end_src

#+RESULTS:
: [1] "2018-02-08 11:38:43 JST"
: [1] "2018-02-07 21:38:43 EST"
\\

*** ★★☆ ~force_tz(time, tzone = "", roll = FALSE)~.

- 日時はそのままで、タイムゾーンのみ変更可能
#+begin_src R
dt <- ymd_hms("2018-02-08 11:38:43", tz = "Asia/Tokyo")
dt
force_tz(dt, "America/New_York")
#+end_src

#+RESULTS:
: [1] "2018-02-08 11:38:43 JST"
: [1] "2018-02-08 11:38:43 EST"
\\

*** ★☆☆ ~force_tzs(time, tzones, tzone_out = "UTC", roll = FALSE)~.

- 複数のタイムゾーンに一括変換
#+begin_src R
dt <- ymd_hms("2018-02-08 11:38:43", tz = "Asia/Tokyo")
dt
force_tzs(dt, c("America/New_York", "America/Chicago"), tzone_out = "UTC")
#+end_src

#+RESULTS:
: [1] "2018-02-08 11:38:43 JST"
: [1] "2018-02-08 16:38:43 UTC" "2018-02-08 17:38:43 UTC"
\\

** 丸め
*** ★★☆ ~round_date(x, unit = "second", week_start = getOption("lubridate.week.start", 7))~.

- "year", "quarter", "month", "day", "hour", "minute", "second" で丸める
#+begin_src R
dt <- today()
dt
floor_date(dt, "week")
#+end_src

#+RESULTS:
: [1] "2019-10-17"
: [1] "2019-10-13"
\\

*** ★★☆ ~floor_date(x, unit = "seconds", week_start = getOption("lubridate.week.start", 7))~.
*** ★★☆ ~ceiling_date(x, unit = "seconds", change_on_boundary = NULL, week_start = getOption("lubridate.week.start", 7))~.
* 関数リスト: Timespan class
** 3 つの S4 クラスが用意されている

- Intervals class :: 時間間隔のこと。 *開始と終了の 2 つの日時を保持している。* period と duration に正確に変換可能。
- Durations class :: 期間のこと。 *正確な秒数として保持されている。* 人間の直感とはずれることがある。
- Periods class :: 時期のこと。週や月などの *人間が扱う単位で変換* してくれる。

** Intervals
*** ★☆☆ ~interval(start, end = NULL, tzone = tz(start))~.

#+begin_src R
arrive <- ymd_hms("2011-06-04 12:00:00", tz = "Asia/Tokyo")
leave  <- ymd_hms("2011-08-20 14:00:00", tz = "Asia/Tokyo")

int <- interval(arrive, leave)
int
class(int)
#+end_src

#+RESULTS:
: [1] 2011-06-04 12:00:00 JST--2011-08-20 14:00:00 JST
: [1] "Interval"
: attr(,"package")
: [1] "lubridate"
\\

*** ★☆☆ ~start %--% end~.

- %--% でも同じ表現
#+begin_src R
arrive <- ymd_hms("2011-06-04 12:00:00", tz = "Asia/Tokyo")
leave  <- ymd_hms("2011-08-20 14:00:00", tz = "Asia/Tokyo")

arrive %--% leave
#+end_src

#+RESULTS:
: [1] 2011-06-04 12:00:00 JST--2011-08-20 14:00:00 JST
\\

*** TODO ★☆☆ ~is.interval(x)~.
*** TODO ★☆☆ ~int_start(int)~.
- ~int_start(int) <- value~.
*** TODO ★☆☆ ~int_end(int)~.
- ~int_end(int) <- value~.
*** TODO ★☆☆ ~int_length(int)~.
*** TODO ★☆☆ ~int_flip(int)~.
*** TODO ★☆☆ ~int_shift(int, by)~.
*** TODO ★☆☆ ~int_overlaps(int1, int2)~.
*** TODO ★☆☆ ~int_standardize(int)~.
*** TODO ★☆☆ ~int_aligns(int1, int2)~.
*** TODO ★☆☆ ~int_diff(times)~.
** Durations
*** ★☆☆ ~duration(num = NULL, units = "seconds", ...)~.

- R では日付の差は ~difftime~ object
- 計算によって、単位が週・日・時・分・秒で異なる
- この例の場合は、日数
#+begin_src R
today() - ymd("1983-05-23")
#+end_src

#+RESULTS:
: 13034

- duration クラスでは、秒に統一して扱う
#+begin_src R
age <- today() - ymd("1983-05-23")
as.duration(age)
#+end_src

#+RESULTS:
: 1139184000s (~36.1 years)

- "d" + 単位 で duration class を作成できる
#+begin_src R
dminutes(2)
#+end_src

#+RESULTS:
: 120s (~2 minutes)

- 演算もできる
#+begin_src R
ymd("2018-12-21") + ddays(2)
#+end_src

#+RESULTS:
: 2018-12-23
*** ★☆☆ ~dseconds(x = 1)~.
*** ★☆☆ ~dminutes(x = 1)~.
*** ★☆☆ ~dhours(x = 1)~.
*** ★☆☆ ~ddays(x = 1)~.
*** ★☆☆ ~dweeks(x = 1)~.
*** ★☆☆ ~dyears(x = 1)~.
*** ★☆☆ ~dmilliseconds(x = 1)~.
*** ★☆☆ ~dmicroseconds(x = 1)~.
*** ★☆☆ ~dnanoseconds(x = 1)~.
*** ★☆☆ ~dpicoseconds(x = 1)~.
*** ★☆☆ ~is.duration(x)~.

** Periods
*** ★☆☆ ~period(num = NULL, units = "second", ...)~.

- Periods は秒数固定ではない
#+begin_src R
minutes(2)
#+end_src

#+RESULTS:
: 2M 0S

- Period を足す
#+begin_src R
ymd("2018-12-21") + days(2)
#+end_src

#+RESULTS:
: 2018-12-23

- Durations を使うと計算が正確 (夏時間への変更を考慮)
#+begin_src R
dt1 <- ymd_hms("2016-03-12 13:00:00", tz = "America/New_York")
dt1 + ddays(1)
#+end_src

#+RESULTS:
: 2016-03-13 14:00:00

- Period を使うとより直感的 (人間の感覚でプラス 1 日)
#+begin_src R :exports none
dt1 <- ymd_hms("2016-03-12 13:00:00", tz = "America/New_York")
dt1 + days(1)
#+end_src

#+RESULTS:
: 2016-03-13 13:00:00
*** ★☆☆ ~is.period(x)~.
*** ★☆☆ ~seconds(x = 1)~.
*** ★☆☆ ~minutes(x = 1)~.
*** ★☆☆ ~hours(x = 1)~.
*** ★☆☆ ~days(x = 1)~.
*** ★☆☆ ~weeks(x = 1)~.
*** ★☆☆ ~years(x = 1)~.
*** ★☆☆ ~milliseconds(x = 1)~.
*** ★☆☆ ~microseconds(x = 1)~.
*** ★☆☆ ~nanoseconds(x = 1)~.
*** ★☆☆ ~picoseconds(x = 1)~.
* 実行環境

#+begin_src R :results output :exports both
sessionInfo()
#+end_src

#+RESULTS:
#+begin_example
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] lubridate_1.7.4

loaded via a namespace (and not attached):
[1] compiler_3.6.1 magrittr_1.5   tools_3.6.1    Rcpp_1.0.2     stringi_1.4.3 
[6] stringr_1.4.0  pacman_0.5.1
#+end_example
\\

* 参考リンク

- [[https://lubridate.tidyverse.org/][公式サイト]]
- [[https://cloud.r-project.org/web/packages/lubridate/index.html][CRAN]]
- [[https://cloud.r-project.org/web/packages/lubridate/lubridate.pdf][Reference Manual]]
- [[https://github.com/tidyverse/lubridate][Github Repo]]
- [[https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_lubridate.pdf][Cheatsheet(PDF)]]
- [[https://r4ds.had.co.nz/][R for Data Science]]
- [[https://www.jstatsoft.org/article/view/v040i03][Original Paper]]
- [[https://kazutan.github.io/SappoRoR8/index.html][ログデータ処理で始めるlubridate入門]]
- Vignette
  - [[https://cloud.r-project.org/web/packages/lubridate/vignettes/lubridate.html][Do more with dates and times in R]] ([[https://qiita.com/nozma/items/01725761d980a0110027][日本語訳@Qiita]])
- Blog
