#+STARTUP: folded indent
#+PROPERTY: header-args:R :results output code :eval never-export :session *R:blog*
#+OPTIONS: author:nil H:6 toc:nil
#+HUGO_BASE_DIR: ~/Dropbox/repos/github/five-dots/blog
#+HUGO_SECTION: post/2020/05/

#+TITLE: R の Date/POSIXct 型でハマったこと
#+DATE: 2020-05-09
#+HUGO_CATEGORIES: programming
#+HUGO_TAGS: r
#+HUGO_CUSTOM_FRONT_MATTER: :toc true

R の =Date= / =POSIXct= 型を利用していて過去にハマったポイントを備忘録として整理しておく。

* =for= loop 内で =Date= が =numeric= になってしまう問題
** 現象

- =Date= =vector= に対して =for= loop でアクセスすると意図した結果にならない
- =for= loop 内で class attribute が欠落してしまうことが原因
  - [[https://www.r-bloggers.com/for-loops-in-r-can-lose-class-information/][For loops in R can lose class information@R-bloggers]]
  - =Date= は =numeric= に class attribute を追加したものであるため
#+begin_src R :exports both
dates <- c(as.Date("2020-05-01"), as.Date("2020-05-02"))

for (date in dates) {
  print(date)
}
#+end_src

#+RESULTS:
#+begin_src R
[1] 18383
[1] 18384
#+end_src
\\

** 対策 1: =list= に変換してからループする

#+begin_src R :exports both
for (date in as.list(dates)) {
  print(date)
}
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01"
[1] "2020-05-02"
#+end_src
\\

** 対策 2: インデックスでアクセスする

#+begin_src R :exports both
for (i in seq_along(dates)) {
  print(dates[i])
}
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01"
[1] "2020-05-02"
#+end_src
\\

* =POSIXct= から =Date= への変換で日付がずれる問題
** 現象

- 参考: [[https://qiita.com/kota9/items/657c8c0ac5092e3ec1ff][R: POSIXct -> Date で日付がズレる@Qiita]]
#+begin_src R :exports both
td <- as.POSIXct("2020-05-01")
as.Date(td)
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-04-30"
#+end_src
\\

- これは =as.Date()= は元の =POSIXct= のタイムゾーンを意識せず、デフォルトで UTC へ変換してしまうことが原因
  - =as.POSIXct()= で作成した場合、デフォルトでシステムのタイムゾーンを利用する (この場合は、JST)
  - そのため、JST から 9 時間分の差が発生する
- 以下の例を見れば、違いが良くわかる
#+begin_src R :exports both
as.Date(as.POSIXct("2020-05-01 8:00:00")) # 2020-04-30 23:00 へ変換されてから、時間情報が削除されている
as.Date(as.POSIXct("2020-05-01 9:00:00")) # 2020-05-01 00:00 へ変換されてから、時間情報が削除されている
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-04-30"
[1] "2020-05-01"
#+end_src
\\

** 対策 1: =tz= を指定する

- 変換前と変換後のタイムゾーンを揃えることを意識しておけば良い
  - タイムゾーンは、"Area/Locality" の形式で指定すべき
    - [[https://stackoverflow.com/questions/37205128/understanding-timezone-strings-in-r][Understanding timezone strings in R@Stackoverflow]]
#+begin_src R :exports both
# UTC に統一して変換
td <- as.POSIXct("2020-05-01", tz = "UTC")
as.Date(td)

# もしくは、JST に統一して変換
## td <- as.POSIXct("2020-05-01")
## as.Date(td, tz = "Asia/Tokyo")
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01"
#+end_src
\\

** 対策 2: =lubridate::as_date()= を利用する

- =lubridate::as_Date()= は、元の =POSIXct= のタイムゾーンを保持して変換してくれる
#+begin_src R :exports both
td <- as.POSIXct("2020-05-01")
lubridate::as_date(td)
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01"
#+end_src
\\

* ミリ秒の丸め問題
** 現象

- 文字列から =POSIXct= を作成する際に、ミリ秒がずれる (切り捨てられる)
  - [[https://stackoverflow.com/questions/10931972/r-issue-with-rounding-milliseconds][R issue with rounding milliseconds@Stackoverflow]]
  - =format= の =%OS= は ="second.millisecond"= の形式
#+begin_src R :exports both
options(digits.secs = 3)
ms_dt <- as.POSIXct("2020-05-01 00:00:00.123", format = "%Y-%m-%d %H:%M:%OS")
ms_dt
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01 00:00:00.122 JST"
#+end_src
\\

** 対策 1: =lubridate::ymd_hms()= を使う

#+begin_src R :exports both
options(digits.secs = 3)
lubridate::ymd_hms("2020-05-01 00:00:00.123", tz = "Asia/Tokyo")
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01 00:00:00.123 JST"
#+end_src
\\

** [番外] ミリ秒単位の経過時間を =POSIXct= に変換する

- [[https://stackoverflow.com/questions/49828433/r-how-to-convert-milliseconds-from-origin-to-date-and-keep-the-milliseconds][R How to convert milliseconds from origin to date and keep the milliseconds@Stackoverflow]]
- 株価のティックデータなど、ミリ秒単位の経過時間で表現されるデータがある
- 1000 で割って秒数に換算する
- +0.0005 を足すことで丸め誤差を消すことができる
#+begin_src R :exports both
msec <- 1588291200123 # 2020-05-01 00:00:00.123 JST
dt <- as.POSIXct(msec/1000, origin = "1970-01-01", tz = "JST")
format(dt + 0.0005, "%Y-%m-%d %H:%M:%OS")
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01 00:00:00.123"
#+end_src
\\

- =lubridate::as_datetime()= でも同じようにずれるので、+0.0005 する
#+begin_src R :exports both
lubridate::as_datetime(msec/1000 + 0.0005, tz = "JST")
#+end_src

#+RESULTS:
#+begin_src R
[1] "2020-05-01 00:00:00.123 JST"
#+end_src
\\

* セッション情報

#+begin_src R :exports both
sessionInfo()
#+end_src

#+RESULTS:
#+begin_src R
R version 3.6.3 (2020-02-29)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.4 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=C
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=C
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.6.3  generics_0.0.2  tools_3.6.3     Rcpp_1.0.4.6
[5] lubridate_1.7.8
#+end_src

* COMMENT Local Variables :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
