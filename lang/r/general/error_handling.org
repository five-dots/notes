#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results output :colnames yes :session *R:error*

* Error Handling
* Conditions
** Conditions

- 3 つのコンディションを適切に使い分ける
  - =stop()= 処理を継続できないとき
  - =warning()= 処理をリカバリーできるとき. 関数が =Deprecate= であることを通知するとき.
  - =message()= その他

- 重要なメッセージに単なる =print()=, =cat()= を使わない
#+begin_src R :results silent
stop(..., call. = TRUE, domain = NULL)
warning(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE, domain = NULL)
message(..., domain = NULL, appendLF = TRUE)
#+end_src

- warning/error
#+begin_src R
## warning
log(-1) # warning
log("x") # error
#+end_src

#+RESULTS:
: [1] NaN
: Warning message:
: In log(-1) : NaNs produced
: Error in log("x") : non-numeric argument to mathematical function

** =try()=

- =try()= の結果を受けて、処理を分岐させるのは、推奨されない (by Hadley)
- 代わりに =tryCatch()= を使う
#+begin_src R
try()
try(log("x"))
try(log("x"), silent = TRUE)

## 失敗時は、try-error クラスを返す
fail <- try(log("x"), silent = TRUE)
class(fail)
#+end_src

- 有用なユースケース
- try() の中で assignment を行い、デフォルト値を設定する
#+begin_src R
default <- NULL
try(default <- read.csv("possibly-bad-input.csv"), silent = TRUE)
default
#+end_src

#+RESULTS:
: Warning message:
: In file(file, "rt") :
:   cannot open file 'possibly-bad-input.csv': No such file or directory
: NULL

** =tryCatch()=

- exiting handler
  - =tryCatch()=
  - condition を受け取った場合、その後の処理を停止する
- calling handler
  - =withCallingHandlers()=
  - condition を受け取っても、その後の処理を継続する
#+begin_src R :results silent
tryCatch(expr, ..., finally)
rlang::catch_cnd(expr, classes = "condition") # tryCatch の wrapper

## calling handler
withCallingHandlers(expr, ...)

## classes
simpleCondition(message, call = NULL)
simpleError    (message, call = NULL)
simpleWarning  (message, call = NULL)
simpleMessage  (message, call = NULL)
#+end_src

- =simpleError= class を返す
- condition -> error -> simpleError
- message, call を持った list になっている
#+begin_src R
err <- tryCatch(log("x"), error = function(e) e)
class(err)
str(err)

conditionMessage(err)
conditionCall(err)
#+end_src

#+RESULTS:
: [1] "simpleError" "error"       "condition"
: List of 2
:  $ message: chr "non-numeric argument to mathematical function"
:  $ call   : language log("x")
:  - attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
: [1] "non-numeric argument to mathematical function"
: log("x")

** =rlang::abort()=

- Custom condition を作成するのに便利

#+begin_src R :results silent
abort(
  message = NULL,
  class = NULL,
  ...,
  trace = NULL,
  call,
  parent = NULL,
  msg,
  type,
  .subclass
)
#+end_src

#+begin_src R
e <- tryCatch(
  rlang::abort(
    "error_not_found", # error クラス名
    message = "Path `blah.csv` not found",
    path = "blah.csv" # 追加の属性
  ),
  error = function(e) e
)
str(e)
#+end_src

#+RESULTS:
#+begin_example
List of 4
 $ message: chr "Path `blah.csv` not found"
 $ trace  :List of 4
  ..$ calls  :List of 4
  .. ..$ : language base::tryCatch(rlang::abort("error_not_found", message = "Path `blah.csv` not found",      path = "blah.csv"), er| __truncated__
  .. ..$ : language base:::tryCatchList(expr, classes, parentenv, handlers)
  .. ..$ : language base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  .. ..$ : language base:::doTryCatch(return(expr), name, parentenv, handler)
  ..$ parents: int [1:4] 0 1 2 3
  ..$ ids    : chr [1:4] "0x5598f52c7e38" "0x5598f52c87a0" "0x5598f52c2d98" "0x5598f52c30e0"
  ..$ indices: int [1:4] 1 2 3 4
  ..- attr(*, "class")= chr "rlang_trace"
 $ parent : NULL
 $ path   : chr "blah.csv"
 - attr(*, "class")= chr [1:4] "error_not_found" "rlang_error" "error" "condition"
#+end_example

* Debugging
** Debug

1. バグの存在を認識する => auto test by testthat
2. 再現性を確保する
3. バグの発生場所を特定する -> =traceback()=
4. 修正しテストする -> =browser()=, =debug()=

#+begin_src R
browser()
# traceback (Call stack)
f <- function(a) g(a)
g <- function(a) h(a)
h <- function(a) i(a)
i <- function(a) "a" + a
f(10)
#+end_src

#+RESULTS:
: Error in "a"
: a (from #1) : non-numeric argument to binary operator

- 最後のキャッチされなかったエラーの call stack を表示 (下から上に読む)
#+begin_src R :results silent
traceback(x = NULL, max.lines = getOption("deparse.max.lines"))
.traceback(x = NULL)
#+end_src

- browser (=Breakpoint)
#+begin_src R :results silent
browser(text = "", condition = NULL, expr = TRUE, skipCalls = 0L)
# c     continue (次の Breakpoint まで進む)
# f     finish
# help  show help
# n     next = F11:Step over
# s     step into = F11:Step in
# where stack trace
# r     resume
# Q     exit the browser (結果を表示しない)
#+end_src

#+begin_src R :results silent
add <- function(a, b, c) {
  d <- a + b
  e <- b + c
  browser()
  d + e
}
add(10, 20, 30)

add <- function(a, b, c) {
  d <- a + b
  e <- b + c
  d + e
}
#+end_src

- debug 関数をステップ実行
#+begin_src R :results silent
debug(fun, text = "", condition = NULL, signature = NULL)
debugonce(fun, text = "", condition = NULL, signature = NULL)
undebug(fun, signature = NULL)
isdebugged(fun, signature = NULL)
debuggingState(on = NULL)

debug(add) # 関数のデバッグ指定
add(1, 3, 6)
undebug(add) # デバッグ解除
#+end_src

- trace 関数の任意の位置に Breakpoint を置く
#+begin_src R :results silent
trace(what, tracer, exit, at, print, signature, where = topenv(parent.frame()), edit = FALSE)
untrace(what, signature = NULL, where = topenv(parent.frame()))

trace(add, tracer = browser, at = 2)
add(1, 2, 3)
untrace(add)
#+end_src

- 以下の設定で、error 時に browser 関数を実行するかを切り替えられる
#+begin_src R :results silent
options(error = browser)
options(error = NULL)

# 一度だけ実行する関数
browseOnce <- function() {
  old <- getOption("error")
  function() {
    options(error = old)
    browser()
  }
}
options(error = browseOnce())
f <- function() stop("!") #
f()
f()
#+end_src

** RTVS

- [[https://docs.microsoft.com/ja-jp/visualstudio/rtvs/debugging-r-in-visual-studio?view=vs-2017][Visual Studio で R をデバッグする]]

#+begin_src R
add <- function(a, b, c) {
  d <- a + b
  e <- b + c
  f <- a + c

  answer = d + e + f
  answer
}

add(1, 2, 3)

# デバッガーを添付した後に、自前でファイルをソースする
#rtvs::debug_source(glue("{repos}/Workspace/R/memo/R/rtvs_debug.R", repos = Sys.getenv("REPOS")))
#+end_src

* Defensive Programming

: The basic principle of defensive programming is to “fail fast”, to raise an error as soon as something goes wrong. In R, this takes three particular forms:

1. checking that inputs are correct, (入力値の検証する)
2. avoiding non-standard evaluation, and (NSE を避ける)
3. avoiding functions that can return different types of output. (関数の返り値の型を統一する)

* Reference

- [[http://adv-r.had.co.nz/Exceptions-Debugging.html][Advanced R 1st Edition: Debugging, condition handling, and defensive programming]]
- [[https://adv-r.hadley.nz/conditions.html][Advanced R 2nd Edition: Conditions]]
