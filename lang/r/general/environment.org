#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results output code :colnames yes :session *R:env*

* Table of Contents :quote:toc:
#+BEGIN_QUOTE
- [[#what-is-an-environment-][What is an Environment ?]]
- [[#search-path-and-environments-basics][Search path and environments basics]]
  - [[#r_globalenv][R_GlobalEnv]]
  - [[#search-path][Search Path]]
  - [[#r_emptyenv][R_EmptyEnv]]
  - [[#autoloads][Autoloads]]
- [[#environments-as-a-data-structure][Environments as a data structure]]
  - [[#reference-semantics][Reference Semantics]]
  - [[#basic-operations][Basic operations]]
- [[#environments-in-function][Environments in Function]]
  - [[#basics][Basics]]
  - [[#enclosing-enviroment--biding-environment][Enclosing enviroment / Biding environment]]
  - [[#execution-environment][Execution environment]]
  - [[#function-factory-and-closure][Function factory and closure]]
  - [[#関数内から-globalenv-の値を得る][関数内から .GlobalEnv の値を得る]]
  - [[#値の割当て][値の割当て]]
- [[#links][Links]]
- [[#reference][Reference]]
#+END_QUOTE

* What is an Environment ?

1. スコーピングのためのデータ構造
   - 全ての R のオブジェクトは ~enviroment~ に属している
   - パッケージ毎に ~environment~ をもつ
   - 異なるパッケージ間で同じ名前を持っていても衝突しないようにする
  
2. ~name~ にメモリ上の特定のオブジェクトを紐付ける役割
   - ~name~ (オブジェクトのラベル) からオプジェクトを探すことができるようにする
     - ~name~ は一意でなければならない
     - ~environment~ 内の名前は順序付けられていない
  
3. ~frame~ (= name と object を紐付けたもの) と 親 ~environment~ を組み合わせたもの
   - 親環境を遡って名前を探すことができる
   - 親環境は *Enclosing environment* とも呼ばれる
  
4. 参照型のデータ構造を持つデータ型
   - ~enviroment~ 自体がデータ構造である
   - *Copy on modify semantics* ではなく、 *Reference semantics* を持つデータ構造として利用できる
     
* Search path and environments basics
** R_GlobalEnv

- 現在の環境は、通常 ~R_GlobalEnv~
- ~environment()~ で現在の環境を取得する
#+begin_src R :exports both
environment()
#+end_src

#+RESULTS:
#+begin_src R
<environment: R_GlobalEnv>
#+end_src
\\

- 上記と同じ結果
#+begin_src R :exports both
globalenv()
#+end_src

#+RESULTS:
#+begin_src R
<environment: R_GlobalEnv>
#+end_src
\\

- ~.GlobalEnv~ は ~R_GlobalEnv~ がバインドされている名前のこと
  - [[https://stackoverflow.com/questions/37918335/difference-between-globalenv-and-globalenv][Difference between `.GlobalEnv` and `globalenv()`@Stackoverflow]]
#+begin_src R :exports both
.GlobalEnv
#+end_src

#+RESULTS:
#+begin_src R
<environment: R_GlobalEnv>
#+end_src
\\

- 環境の比較は ~==~ ではできない
  - ~identical()~ を使う
#+begin_src R :exports both
identical(environment(), globalenv())
#+end_src

#+RESULTS:
#+begin_src R
[1] TRUE
#+end_src
\\

** Search Path

- オブジェクトをどの順番で検索するか
- 通常のサーチパス
  - ~.GlobalEnv~ -> ~packge:A~ -> ~package:B~ -> ~...~ -> ~Autoloads~ -> ~package:base~ -> ~Empty_Env~
  - ~.GlobalEnv~ からはじまって ~Empty_Env~ で終わる
  - ~{base}~ まで探して見つからなかったらエラーになる

- ~parent.env()~ で親環境を得る
- ~.GlobalEnv~ で見つからなかった場合に次に探す環境
#+begin_src R :exports both
parent.env(globalenv())
#+end_src

#+RESULTS:
#+begin_src R
<environment: 0x55d3f00b7b20>
attr(,"name")
[1] "ESSR"
#+end_src
\\

- ~search()~ でサーチパスを表示
- ~parent.env()~ の環境が、.GlobalEnv の次に来ているのが確認できる
#+begin_src R :exports both
search()
#+end_src

#+RESULTS:
#+begin_src R
 [1] ".GlobalEnv"        "ESSR"              "package:stats"
 [4] "package:graphics"  "package:grDevices" "package:utils"
 [7] "package:datasets"  "package:methods"   "Autoloads"
[10] "package:base"
#+end_src
\\

- パッケージを読み込むと GlobalEnv の次に来る
#+begin_src R :exports both
library(dplyr)
search()
#+end_src

#+RESULTS:
#+begin_src R

 [1] ".GlobalEnv"        "package:dplyr"     "ESSR"
 [4] "package:stats"     "package:graphics"  "package:grDevices"
 [7] "package:utils"     "package:datasets"  "package:methods"
[10] "Autoloads"         "package:base"
#+end_src
\\

- サーチパスに先にマッチした関数が使われるので、利用した関数が意図したパッケージのものか注意する
#+begin_src R :exports both
environment(filter)
environment(stats::filter)
#+end_src

#+RESULTS:
#+begin_src R
<environment: namespace:dplyr>

<environment: namespace:stats>
#+end_src
\\

- 名前から環境を得る
#+begin_src R :exports both
environment(sd)

find("sd")
#+end_src

#+RESULTS:
#+begin_src R
<environment: namespace:stats>

[1] "package:stats"
#+end_src
\\

** R_EmptyEnv

- Parent を持たないのは ~R_EmptyEnv~ のみ
#+begin_src R :exports both
parent.env(emptyenv())
#+end_src

#+RESULTS:
#+begin_src R
Error in parent.env(emptyenv()) : the empty environment has no parent
#+end_src
\\

- ~{base}~ package の親環境は ~R_EmptyEnv~
#+begin_src R :exports both
baseenv()
parent.env(baseenv())
#+end_src

#+RESULTS:
#+begin_src R
<environment: base>

<environment: R_EmptyEnv>
#+end_src
\\

** Autoloads

- ~AutoLoads~ 環境は、遅延ロードのパッケージ用に使われる
  - [[https://stackoverflow.com/questions/13401977/what-does-the-autoloads-environment-do][What does the Autoloads environment do?@Stackoverflow]]
- ~autoload(name, package)~ で ~name~ を遅延ロードに指定
- この時点では ~{splines}~ パッケージはロードされていない
#+begin_src R :exports both
autoload("interpSpline", "splines")
search()
#+end_src

#+RESULTS:
#+begin_src R

 [1] ".GlobalEnv"        "package:dplyr"     "ESSR"
 [4] "package:stats"     "package:graphics"  "package:grDevices"
 [7] "package:utils"     "package:datasets"  "package:methods"
[10] "Autoloads"         "package:base"
#+end_src
\\

- ~AutoLoads~ 環境に、遅延ロード指定された関数が入っている
- ~.Autoloaded~ に遅延指定されたパッケージ名が入る
#+begin_src R :exports both
ls("Autoloads")
.Autoloaded
#+end_src

#+RESULTS:
#+begin_src R
[1] "interpSpline"

[1] "splines"
#+end_src
\\

- 遅延ロード指定された ~interpSpline()~ を実行すると ~{splines}~ もロードされる
#+begin_src R :exports both
x <- sort(stats::rnorm(12))
y <- x^2
is <- interpSpline(x, y)
search()
#+end_src

#+RESULTS:
#+begin_src R

 [1] ".GlobalEnv"        "package:splines"   "package:dplyr"
 [4] "ESSR"              "package:stats"     "package:graphics"
 [7] "package:grDevices" "package:utils"     "package:datasets"
[10] "package:methods"   "Autoloads"         "package:base"
#+end_src
\\

* Environments as a data structure
** Reference Semantics

- *Reference Semantics*
  - 大きなデータのコピーを避けることができる
  - package 内の state 管理に最適
  - name での lookup が効率的に行える
#+begin_src R :exports both
modify <- function(x) {
  x$a <- 2
  invisible(x)
}

x_l <- list()
x_l$a <- 1
modify(x_l)
x_l$a # list だと元のオブジェクトは変わらない

x_e <- new.env()
x_e$a <- 1
modify(x_e)
x_e$a # env だと元のオブジェクトが書き換わる
#+end_src

#+RESULTS:
#+begin_src R

[1] 1

[1] 2
#+end_src
\\

** Basic operations
*** =new.env(hash = TRUE, parent = parent.frame(), size = 29L)=

#+begin_src R :exports both
e <- new.env()
e$a <- 10
e$b <- "a"
e$a
e[["b"]]
#+end_src

#+RESULTS:
#+begin_src R

[1] 10

[1] "a"
#+end_src
\\

- データとして ~envivroment~ を使う際は、親を ~emptyevn()~ にする 
  - *予期せず、他の環境の値を変えてしまうのを防ぐ*
#+begin_src R :exports both
e2 <- new.env()
parent.env(e2) # 通常は、.GlobalEnv
e2 <- new.env(parent = emptyenv())
parent.env(e2)
#+end_src

#+RESULTS:
#+begin_src R

<environment: R_GlobalEnv>

<environment: R_EmptyEnv>
#+end_src
\\

*** =ls(name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE)=

#+begin_src R :exports both
ls(e)

e$.c <- TRUE 
ls(e, all.names = TRUE) # .も表示
#+end_src

#+RESULTS:
#+begin_src R
[1] "a" "b"

[1] ".c" "a"  "b"
#+end_src
\\

*** =ls.str(pos = -1, name, envir, all.names = FALSE, pattern, mode = "any")=

#+begin_src R :exports both
ls.str(e)
#+end_src

#+RESULTS:
#+begin_src R
a :  num 10
b :  chr "a"
#+end_src
\\

*** =get(x, pos = -1, envir = as.environment(pos), mode = "any", inherits = TRUE)=
 
- 指定した環境にない場合は、親環境を探しに行く
  - inherits = FALSE で親環境を探さない
#+begin_src R :exports both
c <- 20
get("c", envir = e)
get("c", envir = e, inherits = FALSE)
#+end_src

#+RESULTS:
#+begin_src R

[1] 20

Error in get("c", envir = e, inherits = FALSE) : object 'c' not found
#+end_src
\\

*** =rm(..., list = character(), pos = -1, envir = as.environment(pos), inherits = FALSE)=

- ~NULL~ では消せない (~list~ では消すことができる)
#+begin_src R :exports both
e$a <- NULL
ls(e)
#+end_src

#+RESULTS:
#+begin_src R

[1] "a" "b"
#+end_src
\\

- ~rm()~ で消す
#+begin_src R :exports both
rm("a", envir =  e)
ls(e)
#+end_src

#+RESULTS:
#+begin_src R

[1] "b"
#+end_src
\\

*** =exists(x, where = -1, envir = , frame, mode = "any", inherits = TRUE)=

#+begin_src R :exports both
ls(e)
exists("a", envir = e)
exists("b", envir = e) # get() と同じく、指定した環境になければ、親を探す
#+end_src

#+RESULTS:
#+begin_src R
[1] "b"

[1] FALSE

[1] TRUE
#+end_src
\\

*** =as.environment(x)=

- Search path のインデックスか、パッケージ名で環境を取得できる
#+begin_src R :exports both
as.environment(1) # serch path index
as.environment(2)
as.environment("package:stats")
#+end_src

#+RESULTS:
#+begin_src R
<environment: R_GlobalEnv>

<environment: package:splines>
attr(,"name")
[1] "package:splines"
attr(,"path")
[1] "/home/shun/.anyenv/envs/Renv/versions/3.6.3/lib/R/library/splines"

<environment: package:stats>
attr(,"name")
[1] "package:stats"
attr(,"path")
[1] "/home/shun/.anyenv/envs/Renv/versions/3.6.3/lib/R/library/stats"
#+end_src
\\

*** getter/setter example

- 環境で getter/setter 関数を利用する例
- ~on.exit()~ で reset するために、setter では invisible() で設定前の値を返す
#+begin_src R :exports both
my_env <- new.env(parent = emptyenv())
my_env$a <- 1

get_a <- function() {
  my_env$a
}

set_a <- function(value) {
  old <- my_env$a
  my_env$a <- value
  invisible(old)
}

get_a()
set_a(2)
ls.str(my_env)
#+end_src

#+RESULTS:
#+begin_src R

[1] 1

a :  num 2
#+end_src
\\

* Environments in Function
** Basics

1. *Enclosing enviroment*
  - 作成された場所
  - すべての関数が必ず 1 つ持つ (変わらない)
  - how the function finds values
  - *namespace environment*
    - package 内のすべての関数を持つ
    - 親環境が、必要な全ての外部 package が import された特別な環境になっている
    - 外部の package に同名の関数があっても影響を受けないようにしている (= globalenv を探さない)
  
2. *Binding enviroment*
  - 関数が格納されている場所
  - how we find the function = search path
  - *package environment*
    - 明示的に export された関数を持つ場所 (search path に置かれる)
    - namespace env に Enclose されている
   
3. *Execution enviroment*
  - 関数内の環境
  - 毎回 fresh start される
  
4. *Calling enviroment*
  - どの環境から関数が呼ばれたか
  - ~parent.frame()~ でアクセスできる
  - 通常は ~R_GlobalEnv~

** Enclosing enviroment / Biding environment

- Enclosing env
#+begin_src R :exports both
f <- function(x) 1
environment(f)
#+end_src

#+RESULTS:
#+begin_src R

<environment: R_GlobalEnv>
#+end_src
\\

- Biding env
#+begin_src R :exports both
e <- new.env()
e$g <- function() 1
e
#+end_src

#+RESULTS:
#+begin_src R

<environment: 0x55d3f0522220>
#+end_src
\\

- Enclosing env (= namespace env)
#+begin_src R :exports both
environment(sd)
#+end_src

#+RESULTS:
#+begin_src R
<environment: namespace:stats>
#+end_src
\\

- Biding env (= package env)
#+begin_src R :exports both
where("sd")
#+end_src

#+RESULTS:
#+begin_src R
Error in where("sd") : could not find function "where"
#+end_src
\\

** Execution environment

- ~R_GlobalEnv~ -> 関数内の環境 -> 子関数内の環境 というように入れ子になっている
#+begin_src R :exports both
h <- function() {
  # 関数内の環境 (Execution env)
  print(environment())
  
  # 関数の親環境 (R_GlobalEnv = Enclosing env)
  print(parent.env(environment()))

  hoge <- function() {
    # 子関数内の環境 (Execution env)
    print(environment())
    
    # 1つ上の関数の環境 (Enclosing env)
    print(parent.env(environment()))
  }
  hoge()
}

h()
#+end_src

#+RESULTS:
#+begin_src R

<environment: 0x55d3ee760f98>
<environment: R_GlobalEnv>
<environment: 0x55d3ee7544f0>
<environment: 0x55d3ee760f98>
#+end_src
\\

- ~parent.env()~ と ~parent.frame()~ が紛らわしい
- parent.frame = Calling enviroment = 関数を呼び出している環境 (~parent.env()~ ではない)
#+begin_src R :exports both
i <- function() {
  print(parent.env(environment()))
  print(parent.frame()) # Calling env
}

i()
#+end_src

#+RESULTS:
#+begin_src R

<environment: R_GlobalEnv>
<environment: R_GlobalEnv>
#+end_src
\\

** Function factory and closure

- Function Factory で作成された関数は、親関数の環境を持つ (=closure)
- 簡易的なオブジェクトとして利用できる (親環境内の変数をプロパティとして扱う)
#+begin_src R :exports both
plus <- function(x) {
  print(environment())
  num1 <- 10
  num2 <- 20
  function(y) x + y + num1 + num2
}

plus_one <- plus(1)
plus_one(10)

plus_two <- plus(2)
plus_two(10)
#+end_src

#+RESULTS:
#+begin_src R

<environment: 0x55d3ee716670>

[1] 41

<environment: 0x55d3ee70db30>

[1] 42
#+end_src
\\

#+begin_src R :exports both
environment(plus_one)
identical(parent.env(environment(plus_one)), environment(plus))
#+end_src

#+RESULTS:
#+begin_src R
<environment: 0x55d3ee716670>

[1] TRUE
#+end_src
\\

- 20 ではなく、10 が返る (親関数内の x を環境内で引き継いでいる)
#+begin_src R :exports both
h <- function() {
  x <- 10
  function() {
    x
  }
}
i <- h()
x <- 20
i()
#+end_src

#+RESULTS:
#+begin_src R

[1] 10
#+end_src
\\

** 関数内から .GlobalEnv の値を得る

- Dynamic Scoping (Interactive Data Analysis では便利)
- ~get()~ を利用するか ~.GlobalEnv$~ でアクセスする
#+begin_src R :exports both
f2 <- function() {
  x <- 10
  function() {
    def <- get("x", environment())  # Execution env を探しに行く
    cll <- get("x", parent.frame()) # Calling env を探しにいく
    list(defined = def, called = cll)
  }
}

g2 <- f2()
x <- 20
str(g2())
#+end_src

#+RESULTS:
#+begin_src R

List of 2
 $ defined: num 10
 $ called : num 20
#+end_src
\\

** 値の割当て

- ~<-~ (束縛)
  - ?Reserved ワード以外は利用可能
#+begin_src R :exports both
`a + b` <- 3
`:)` <- "smile"
`    ` <- "spaces"
ls()
#+end_src

#+RESULTS:
#+begin_src R

 [1] "    "     ":)"       "a
b"    "c"        "e"        "e2"
 [7] "f"        "f2"       "g2"       "get_a"    "h"        "i"
[13] "is"       "modify"   "my_env"   "plus"     "plus_one" "plus_two"
[19] "set_a"    "settings" "x"        "x_e"      "x_l"      "y"
#+end_src
\\

- ~<<-~
  - 親環境をさかのぼって変更する
  - 通常は利用しない方が良いが、Closure と組み合わせて使うと便利
#+begin_src R :exports both
x <- 0
f <- function() {
  x <<- 1
}
f()
x
#+end_src

#+RESULTS:
#+begin_src R

[1] 1
#+end_src
\\

- ~pryr::`%<d-%`~ (~base::delayedAssign()~)
  - Delayed binding => ~promise~ (遅延評価) を作成する
#+begin_src R :exports both
library(pryr)
system.time(b %<d-% {
  Sys.sleep(1)
  1
})
system.time(b) # ここを実行した時点で、%<d-% のブロックが実行される
#+end_src

#+RESULTS:
#+begin_src R

   user  system elapsed
      0       0       0

   user  system elapsed
  0.000   0.000   1.001
#+end_src
\\

- ~pryr::`%<a-%`~ (~base::makeActiveBinding()~)
  - Active binding => アクセスされる毎に再計算される
#+begin_src R :exports both
x %<a-% runif(1)
x
x
#+end_src

#+RESULTS:
#+begin_src R

[1] 0.4642073

[1] 0.7943504
#+end_src
\\

* Links

- [[file:../package/r-lib/rlang.org][ ={rlang}= ]]

* Reference

- [[http://adv-r.had.co.nz/Environments.html][Advanced R 1st Edition: Environments]]
- [[https://adv-r.hadley.nz/environments.html][Advanced R 2nd Edition: Environments]]
- [[http://blog.obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/][How R Searches and Finds Stuff]]
- [[https://qiita.com/kohske/items/325bdf48f4f4885a86f1][（Rの）環境問題について　その１。@Qiita]]
- [[https://qiita.com/kohske/items/35184390984975ec7c6d][（Rの）環境問題について　その２。@Qiita]]
- [[https://qiita.com/kohske/items/7fdb523a05a2e0b12f35][（Rの）環境問題について　その３。@Qiita]]
- [[https://stackoverflow.com/questions/37918335/difference-between-globalenv-and-globalenv][Difference between `.GlobalEnv` and `globalenv()`]]
- [[https://stackoverflow.com/questions/13401977/what-does-the-autoloads-environment-do][What does the Autoloads environment do?]]
