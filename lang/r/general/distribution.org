#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :session *R:distribution* :results output :width 560 :height 420
#+LATEX_HEADER: \usepackage{bm}

* TODOs
** TODO 確率分布の性質を追記する
- 特に、nig, jsu, sstd, sged, ghyp の５個
* ライブラリの読み込み

#+begin_src R :results silent
library(GeneralizedHyperbolic)
library(MASS)
library(PerformanceAnalytics)
library(SuppDists)
library(fBasics)
library(fGarch)
library(fitdistrplus)
library(forecast)
library(gamlss.dist)
library(moments)
library(mvtnorm)
library(nimble)
library(sn)
library(tidyverse)
library(VineCopula)
#+end_src

* 基本
** 確率分布とは

: 確率密度とは
- [[https://logics-of-blue.com/%E7%A2%BA%E7%8E%87%E5%AF%86%E5%BA%A6%E9%96%A2%E6%95%B0%E3%81%A8%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83/][確率密度関数と正規分布@Logics of blue]]
- 単体の数字では、確率は常に 0 になってしまう
- 確率密度 = 積分すると確率になる
- 確率密度関数 (probability distribution function, PDF) = -Inf ~ Inf までを積分すると 1 になる関数
- 確率質量関数 (probalitiy mass function, PMF) = 離散値の場合は、こちらの用語

** 確率分布の選び方

- 確率分布 ＝ 確率変数とその出現確率の対応を表す
  1. 連続？ or 離散？
  2. 範囲は無限？ or 有限？、0 以上？ 整数（カウントデータ）？ or 実数？
  3. 標本分散と標本平均の関係は？ （分散は平均の関数など = 平均が大きと分散が大きい）

** 同時分布・周辺分布・条件付き分布

| 同時分布     | Joint Distribution       | 全部を細かく表す |
| 周辺分布     | Marginal Distribution    | 合計を表す       |
| 条件付き分布 | Conditional Distribution | 一部を固定する   |

- 同時分布
  2 つの確率変数 X, Y の _取りうる全ての値のペアに対しての確率_ を表したもの
  
   $P_{X,Y}(x, y)$

- 周辺分布
  _同時分布から、特定の確率変数のみに注目_ して、その他を削除した分布 (周辺化消去)
  多変量から単変量を取り出す
  
  $P_X(x) = \sum_{y=0}^2 P_{X,Y}(x, y)$
  
  - 離散分布 = 和を取る (上記の例)
  - 連続分布 = 積分する

- 条件付き分布
  一方の確率変数の値がわかったもとで、もう一方の確率変数の取りうる分布
  
  $P_{X|Y}(x | 1)$

[[file:../../../img/download/Basics/doujibunpu1_2019-08-09_10-51-33.png]]
#+DOWNLOADED: https://mathwords.net/wp-content/uploads/2017/02/doujibunpu1.png @ 2019-08-09 10:51:33

** 混合分布

- Mixture Distribution
- 複数の確率分布を重み付けして混合

** 中心極限定理 (Central Limit Theorem)

- 独立な確率変数 $X_1, X_2, \dots , X_n$が, 同じ平均, 分散の確率分布に従う時 n が大きくなるにつれて、以下の Z は標準正規分布に近づく
- _どんな確率分布であっても、n がおおきければ、Z値は標準正規分布になる_

$Z = \frac{\bar{X} - \mu}{\sigma / \sqrt{n}}$

このとき、
$\bar{X} = \frac{X_1 + X_2 + X_3, \dots , X_n}{n}$

$n \to \infty, Z \sim N(0,1)$

** モーメント
*** Overview

: モーメント
- 確率分布の形状を数値的に計算すること
- 全てのモーメントを 1 つの関数で表す = モーメント母関数

- _X の原点周り r 次モーメント_

 $\mu_r = E[X^r]$
 
- _X の期待値周りの r 次モーメント_ (偏差の何乗か？)

$\mu_r' = E[(X-\mu)^r]$

- _X の標準化 r 次モーメント_ (sigma で割る)

$\alpha_r = \frac{E[(X - \mu)^r]}{\sigma^r}$


- http://t-fund.hatenablog.com/entry/2013/11/25/180512
- 分類
  - 平均 = 原点周りの 1 次モーメント
  - 分散 = 期待値周りの 2 次のモーメント
  - 尖度 = 標準化 3 次のモーメント
  - 歪度 = 標準化 4 次のモーメント

- ={moments}= package n 次のモーメントを計算できる
#+begin_src R
rn <- rnorm(1000)
moment(rn, 1)
moment(rn, 2)
moment(rn, 3)
moment(rn, 4)
#+end_src

#+RESULTS:
: [1] 0.04246525
: [1] 1.020226
: [1] 0.1189978
: [1] 3.052259

*** Skewness (歪度)

- 歪度(わいど) 分布の左右の歪み (= 3 次のモーメント)
- リターン系列の分布形状を確かめる
- 利大損小の収益率は、 Positive Skew になる
- 計算方法: z-score を 3 乗した平均 (マイナスになりうる)
- 正の値であると右に傾いた分布になる

$Sk = E[(\frac{X - \mu}{\sigma})^3] = E[Z^3]$

- ={moments}=, ={e1071}=, ={PerformanceAnalytics}= に収録されている
#+begin_src R
## method = "moment"
skew_moment <- function(x) {
  sum(((x - mean(x)) / sd(x))^3) / length(x)
}
## method = "fisher"
skew_fisher <- function(x) {
  n <- length(x)
  ((sqrt(n*(n-1))/(n-2))*(sum(x^3)/n))/((sum(x^2)/n)^(3/2))
}

set.seed(123)
rn <- rnorm(1000)

## "moment" 若干結果がことなる
skew_moment(rn)
e1071::skewness(rn)
moments::skewness(rn)
PerformanceAnalytics::skewness(rn, method = "moment")

## "fisher"
PerformanceAnalytics::skewness(rn, method = "fisher")
skew_fisher(rn)
#+end_src

#+RESULTS:
: [1] 0.065196
: [1] 0.065196
: [1] 0.06529391
: [1] 0.06529391
: [1] 0.1142376
: [1] 0.1142376

*** Kurtosis (尖度)

- 尖度(せんど)。とんがりと裾野の厚み。上下の歪み。 (= 4 次のモーメント)
- 相対尖度 = 正規分布との相対的な尖度 (3 を基準)

$k = E[(\frac{X - \mu}{\sigma})^4] -3 = E[Z^4] - 3$

- 絶対尖度
$k^' = E[(\frac{X - \mu}{\sigma})^4] = E[Z^4]$

- 尖度が大きい = Fat-tail
- 4 乗することで、絶対値の大きい変動が強調される (=fat tail)
#+begin_src R
kurt_moment <- function(x) {
  sum((x-mean(x))^4/sd(x)^4)/length(x)
}

e1071::kurtosis(rn, type = 3)
moments::kurtosis(rn)
PerformanceAnalytics::kurtosis(rn, method = "moment")
kurt_moment(rn)
#+end_src

#+RESULTS:
: [1] -0.07188844
: [1] 2.933977
: [1] 2.933977
: [1] 2.928112

** 尤度

- ある確率分布の元でデータが得られる確率
- 厳密は尤度の和が 1 以上になることがあるので、確率ではない
  - [[http://www.statgenet.med.kyoto-u.ac.jp/StatGenet/ryamada_bon/SaikouPDFs/GNMT_CH09.pdf][確率と尤度]]
- _R での計算法 = 全データの d 関数の合計_
- 尤度は非常に小さな数字になりやすいので、扱いやすいように対数を取る

: 最尤推定: Maximum Likelihood Estimation (MLE)
- 全データの対数尤度の合計が最も大きくなる (= 最大対数尤度, logL*) パラメータを探すこと

** {base} での関数命名規則

- 統一的な名前を持つ
| dxxx | density    | 確率密度関数                                                 |
| rxxx | random     | 疑似乱数                                                     |
| qxxx | quantile   | 確率点 = 確率になる確率点 (積分した累積確率を返す)           |
| pxxx | percentile | 累積確率分布 = 確率点になる確率 (確率を入力し、確率点を返す) |

- 乱数発生器
~.Random.seed~
~set.seed()~

** カーネル密度

: Kernel density = カーネル密度推定
標本データから、全体の分布を推定する手法

- パラメタ
1. バンド幅 = カーネル関数の広がりの幅
2. カーネル関数 = 各標本点の影響度の広がりを定義 (カーネル = 重み付けという意味)

- 関数シグネチャ
#+begin_src R :results silent
density(
  x,
  bw = "nrd0",
  adjust = 1,
  kernel = c("gaussian", "epanechnikov", "rectangular",
             "triangular", "biweight", "cosine", "optcosine"),
  weights = NULL,
  window = kernel,
  width,
  give.Rkern = FALSE,
  n = 512,
  from,
  to,
  cut = 3,
  na.rm = FALSE,
  ...)
#+end_src

#+begin_src R :results graphics :file (get-babel-file)
rand <- rnorm(1000)
dens <- density(x = rand, kernel = "gaussian") # density class
plot(dens)
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-AfRpjH.png]]

** 検定
- 正規性の検定やコルモゴロフ・スミノフ検定などは、 [[file:test.org][Test]] を参照

** パラメタ推定
*** TODO 手計算
*** ~MASS::fitdistr()~

- 最尤法で分布のパラメタを推定
- 対応している確率分布 (文字列 or 関数名 で指定)
  - beta
  - cauchy
  - chi-squared
  - exponential
  - gamma
  - geometric
  - log-normal
  - lognormal
  - logistic
  - negative binomial
  - normal
  - poisson
  - t
  - weibull

#+begin_src R
# fitdistr(x, densfun, start, ...)
x <- rnorm(1000, 5, 10)
fit1 <- fitdistr(x, "normal")
fit1
class(fit1) # fitdistr class
logLik(fit1)
#+end_src

#+RESULTS:
: 
:       mean          sd    
:    5.2313894   10.0290281 
:  ( 0.3171457) ( 0.2242559)
: 
: [1] "fitdistr"
: 
: 'log Lik.' -3724.422 (df=2)

- 標本から初期値を与える
#+begin_src R
fit2 <- fitdistr(x, dnorm, start = list(mean = mean(x), sd = sd(x)))
fit2
#+end_src

#+RESULTS:
: 
:       mean          sd    
:    5.2313894   10.0290269 
:  ( 0.3171457) ( 0.2242558)

*** ~fitdistrplus::fitdist()~

#+begin_src R
## fitdist(data, distr, method = c("mle", "mme", "qme", "mge"),
##         start = NULL, fix.arg = NULL, discrete, keepdata = TRUE, keepdata.nb = 100, ...)

fit3 <- fitdist(x, "norm")
fit3 # fitdist class
summary(fit3)
#+end_src

#+RESULTS:
#+begin_example

Fitting of the distribution ' norm ' by maximum likelihood 
Parameters:
      estimate Std. Error
mean  5.231389  0.3171457
sd   10.029028  0.2242559

Fitting of the distribution ' norm ' by maximum likelihood 
Parameters : 
      estimate Std. Error
mean  5.231389  0.3171457
sd   10.029028  0.2242559
Loglikelihood:  -3724.422   AIC:  7452.844   BIC:  7462.66 
Correlation matrix:
     mean sd
mean    1  0
sd      0  1
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
plot(fit3)
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-KNk133.png]]

*** ~rugarch::fitdist()~
** TODO コピュラ
*** Reference

- コピュラの金融実務での 具体的な活用方法の解説
  https://www.imes.boj.or.jp/research/papers/japanese/kk24-b2-3.pdf

- コピュラとは？
  http://grg.hatenablog.com/entry/2017/03/13/101234
 
- S&P500 と日経 225 の時系列分析（コピュラ ＆ DCD モデル）
  http://grg.hatenablog.com/entry/2017/03/19/001059
   
*** Overview

: コピュラ (沖本本)
すべての周辺分布が区間 [0, 1] の一様分布 U(0, 1) に等しい 
n 変量同時確率分布関数は n 変量コピュラと呼ばれる

: スクラーの定理
n 個の確率変数の同時分布関数をコピュラ C を用いて、
以下のように変形できることを Sklar が証明 (F1 は x1 周辺分布関数)

$F(x_1, \dots, x_n) = C(F_1(x_1), \dots, F_n(x_n))$


- 多変数の累積分布関数(CDF) と 周辺分布関数 の関係を示す *関数*
- 単体のリスク(=F1) と、依存関係 (=C) の 2 つに分けること
- 確率変数間の依存関係を柔軟に表現できる (相関係数などと比べて)
- ラテン語の「つなぎ・結び付き」を意味する言葉が由来
- _景気悪化時には、相関が強まる_ といったデータのリスク計測に応用される

- 例えば、多変量正規分布は、周辺分布として正規分布、
  コピュラとして、正規コピュラから構築することができる

重要
- _周辺分布とコピュラは同じ系列のものでなくても良い_
  周辺分布として正規分布、コピュラとして t コピュラ等
  => 結果としての同時分布は、多変量正規分布でも多変量 t 分布でもないモノになる

*** List

コピュラの種類によって、多変数に与える影響がことなる

_変数間の依存関係を行列で表現するタイプ_
- *正規コピュラ* (by David X. Li, CDO のリスク評価に使われた)
- *t コピュラ* (自由度によって、裾部分での関係の強弱を表現)
=> 楕円コピュラとも呼ばれうる

_変数間の依存関係を 1 パラメタで表現 (1 パラメタ・アルキメディアン・コピュラ)_
- *クレイトンコピュラ* (下側の関係を強める)
- *グンベルコピュラ* (上側の関係を強める)
- *フランクコピュラ*
=> 1 パラメタしかないので、多数の銘柄を扱うには、制約が強すぎるとも言える

- 積コピュラ

*** {VineCopula} でコピュラをプロット
**** 正規コピュラ

- family = 1 は正規コピュラ
#+begin_src R :results graphics :file (get-babel-file)
norm_copula <- BiCop(1, par = 0.8)
plot(norm_copula, type="contour")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-RqLXTq.png]]

**** t コピュラ

- family = 2 は t コピュラ
- 正規コピュラよりも選択が尖っている = 裾部分の関連が強い
#+begin_src R :results graphics :file (get-babel-file)
t_copula <- BiCop(2, par = 0.8, par2 = 3)
plot(t_copula, type="contour")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-0284os.png]]

**** コピュラのモデル間の AIC 比較
* 確率分布のリスト
** Distributions for Continous Data

|-------------------------+-----------+--------------------------------+--------------------------------------------|
| Name (EN)               | Abbrev    | Parameters                     | Note                                       |
|-------------------------+-----------+--------------------------------+--------------------------------------------|
| Normal                  | norm      | mean, sd                       | ブラウン運動の分布, テストの点             |
| Multivariate Normal     | mvnorm    | mean, sigma                    | 正規分布の多変量化                         |
| Lognormal               | lnorm     | meanlog, sdlog                 | 対数をとると正規分布に從う分布             |
| Chi-Square              | chisq     | df                             | 標準正規分布の二乗和の分布                 |
| Student-t               | t, std    | df                             | 裾が厚い分布, _正規分布〜コーシー分布を含む_ |
| F                       | f         | df1, df2                       | 標本間の分散が等しいかの検定に利用         |
| Cauthy                  | cauchy    | location, scale                | 裾が非常に厚い分布, _稀に大きな外れ値_       |
| Double-Exponential      | dexp      | location, scale, (rate)        | 指数分布を両側に貼り付けた分布, _鋭いピーク_ |
| Weibull                 | weibull   | shape, scale                   |                                            |
| Inverse Gaussian        | invgauss  | m, s                           |                                            |
|-------------------------+-----------+--------------------------------+--------------------------------------------|
| Generalized Error       | ged       | mean, sd, nu(=shape)           | + 尖度 の分布, 誤差分布の一般化            |
| Normal Inverse Gaussian | nig       | alpha, beta, delta, mu         | + 尖度 + 歪度                              |
| Generalized Hyperbolic  | ghyp      | mu, delta, alpha, beta, lambda | + 尖度 + 歪度 + lambda?                    |
| Johnson's SU            | jsu       | mu, sigma, nu, tau             | + 尖度 + 歪度                              |
|-------------------------+-----------+--------------------------------+--------------------------------------------|
| Skew Normal             | sn, snorm | xi, omega, alpha, (tau)        | + 歪度                                     |
| Skew Student-t          | st, sstd  | xi, omega, alpha, nu           | + 歪度 (自由度で尖度も調整できる)          |
| Skew GED                | sged      |                                | + 歪度 (つまり 歪度と尖度を両方持つ)       |
|-------------------------+-----------+--------------------------------+--------------------------------------------|

- Distributions for Equity Return
  - Parameters x 4: *nig*, *jsu*, *sstd*, *sged*
  - Parameters x 5: *ghyp*

** Distributions for Count Data (Discrete)

|--------------+----------------------------+---------------+-----------------------------------------|
| Name (JP)    | Name (EN)                  | Parameters    | Note                                    |
|--------------+----------------------------+---------------+-----------------------------------------|
| 幾何分布     | Geometric (geom)           | x, prob       | 最初に成功するまでに x 回試行する確率   |
|              |                            |               | _負の二項分布の size=1_                   |
| 負の二項分布 | Negative Binomial (nbinom) | x, size, prob | size 回成功するまでに x 回失敗する確率  |
|              |                            |               | _二項分布の反転_, _幾何分布の多変量化_      |
| 二項分布     | Binomial (binom)           | x, size, prob | size 回試行して、x 回成功する確率       |
|              |                            |               | _size=1 でベルヌーイ分布_, _k=2 の多項分布_ |
|              |                            |               | コイントスの確率                        |
| 多項分布     | Multinomial (multinom)     | x, size, prob | k 個のカテゴリの生起確率                |
|              |                            |               | prob は長さ k のベクトルで合計が 1      |
|              |                            |               | _二項分布の多変量化_                      |
| ポアソン分布 | Poisson (pois)             | x, lambda     | 時間内に x 回発生する確率               |
|              |                            |               | _二項分布の極限 (size 大, prob 小)_       |
|--------------+----------------------------+---------------+-----------------------------------------|

** Distributions for Probability (Continous)

- 一様分布は、離散値でも可
|------------------+----------------+------------------------+-----------------------------------|
| Name (JP)        | Name (EN)      | Parameters             | Note                              |
|------------------+----------------+------------------------+-----------------------------------|
| 一様分布         | Uniform (unif) | x, min, max            | 全事象 (min~max) の発生確率が同じ |
|                  |                |                        | サイコロの目の確率                |
| ベータ分布       | Beta           | x, shape1, shape2, ncp | 確率 (0~1) の分布, 故障率など     |
| ディリクレ分布   | Dirichlet      | x, alpha               | 確率の分布, _ベータ分布の多変量化_  |
|                  |                |                        | {MCMCPack}                        |
| カテゴリカル分布 | Categorical    |                        |                                   |
|------------------+----------------+------------------------+-----------------------------------|

** Distributions for Waiting Time (Continous)

|------------+-------------------+-------------------------+----------------------------------|
| Name (JP)  | Name (EN)         | Parameters              | Note                             |
|------------+-------------------+-------------------------+----------------------------------|
| 指数分布   | Exponential (exp) | x, rate                 | 一回発生するまでの待ち時間の分布 |
|            |                   |                         | _ガンマ分布の shape(k)=1_           |
| ガンマ分布 | Gamma             | x, shape, (rate), scale | x 回発生するまでの待ち時間の分布 |
|            |                   |                         | _shape(k)=1 のとき指数分布_        |
|------------+-------------------+-------------------------+----------------------------------|

* 確率分布の詳細
** 連続値の確率分布
*** 正規分布 (ガウス分布) - Normal (Gaussian)
**** 基本

- ガウス (1777-1855)

**** {base} funs

#+begin_src R :results silent
dnorm(x, mean = 0, sd = 1, log = FALSE)
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
rnorm(n, mean = 0, sd = 1)
#+end_src

**** PMF: =dnorm()=
***** Definition

- 正規分布 (exp 関数表記)
$f(x)=\frac{1}{\sqrt{2\pi\sigma^2}}\exp(-\frac{(x-\mu)^2}{2\sigma^2})$

- 正規分布 (e 表記)
$f(x)=\frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$

- 標準正規分布 (mean = 0, sigma = 1)
$f(x)=\frac{1}{\sqrt{2\pi}}\exp(-\frac{x^2}{2})$

- 独自に関数を作成
#+begin_src R :results silent
my_dnorm <- function(x, mean = 0, sd = 1) {
  1 / (sqrt(2 * pi) * sd) * exp(-(x - mean)^2 / (2 * sd^2))
}
## 標準正規分布
my_sdnorm <- function(x) {
  1 / sqrt(2 * pi) * exp(-x^2 / 2)
}
#+end_src

***** Function

- すべて同じ結果
#+begin_src R
dnorm(1, mean = 0, sd = 1)
my_dnorm(1, mean = 0, sd = 1)
my_sdnorm(1)
#+end_src

#+RESULTS:
: [1] 0.2419707
: 
: [1] 0.2419707
: 
: [1] 0.2419707

- PMF を積分する
#+begin_src R
## 確率密度関数を無限大で積分すると 1 になる
integrate(dnorm, -Inf, Inf) # => 1
integrate(f1, -Inf, Inf)

integrate(dnorm, -1, 1) # ± SD は 68.3%
integrate(dnorm, -2, 2) # ± SD は 95.4%
#+end_src

#+RESULTS:
: 
: 1 with absolute error < 9.4e-05
: 
: 1 with absolute error < 9.4e-05
: 
: 0.6826895 with absolute error < 7.6e-15
: 
: 0.9544997 with absolute error < 1.8e-11

***** Plot
 
- SD 1 ~ 3 のプロット
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dnorm, args = list(mean = 0, sd = 1)) +
  stat_function(fun = dnorm, args = list(mean = 0, sd = 2)) +
  stat_function(fun = dnorm, args = list(mean = 0, sd = 3))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-nhhdND.png]]

**** Random: =rnorm()=

#+begin_src R :results graphics :file (get-babel-file)
rand <- rnorm(1000, 0, 1)
ggtsdisplay(rand, plot.type = "histogram")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-JuFI6I.png]]

**** Percentile: =pnrom()=

- 累積分布関数 (Cumulative Distribtuion Function: CDF) とも言う
- -Inf~x までの定積分した値を返す
#+begin_src R
pnorm(1.6544854)  # => 95%
pnorm(-1.6544854) # => 5%
#+end_src

#+RESULTS:
: [1] 0.9509855
: 
: [1] 0.04901446

#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = pnorm, args = list(mean = 0, sd = 1)) +
  stat_function(fun = pnorm, args = list(mean = 0, sd = 2), color = "orange") +
  stat_function(fun = pnorm, args = list(mean = 0, sd = 3), color = "red")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-4iR6jA.png]]

**** Quantile: =qnorm()=

- 指定された累積確率を満たす値（点）を返す
#+begin_src R :results output
# 95% 確率の確率点
qnorm(0.95) # 1.644854
qnorm(0.05) # -1.644854
#+end_src

#+RESULTS:
: 
: [1] 1.644854
: 
: [1] -1.644854

*** 多変量正規分布
**** PDF

単変量の正規分布
$f(x)=\frac{1}{\sqrt{2\pi\sigma^2}}\exp(-\frac{(x-\mu)^2}{2\sigma^2})$


多変量正規分布
$f(\bm{x}) = \frac{1}{(\sqrt{2\pi})^m \sqrt{|\bm{\Sigma|}}} exp(-\frac{1}{2}(\bm{x}-\bm{\mu})^T \Sigma^{-1}(\bm{x}-\bm{\mu}))$


- $\bm{\mu}$ 平均のベクトル
- $\bm{\Sigma}$ 分散共分散行列
- 正規分布が多変量になったもの
- Sigma によって、多変量間の相関をきめている

基本統計量
- 平均
- 分散
- 共分散 (多変量なので)
- 相関係数
- 独立性 $p(x,y) = p(x)p(y)$ ※一方がもう一方に影響を与えない 独立であれば相関は 0

各成分が独立な標準正規分布の場合は、共分散が 0, 分散が 1 なので、単位行列になる

**** Random

- ={mvtnorm}= パッケージ
- =dmvnorm(x, mean = rep(0, p), sigma = diag(p), log = FALSE)=

- ={MASS}= パッケージ
- =MASS::mvrnorm()=
- 平均と分散共分散行列を与える
#+begin_src R
mvrnorm(
  n = 1,
  mu,    # 平均のベクトル
  Sigma, # 分散共分散行列 (matrix の対称行列)
  tol = 1e-6,
  empirical = FALSE,
  EISPACK = FALSE)
#+end_src

- 5 次元の標準正規分布に従う乱数データ
#+begin_src R
num   <- 1000
dim   <- 5
mu    <- rep(0, dim)
Sigma <- diag(dim)
mvr   <- mvrnorm(num, mu, Sigma)

head(mvr)
#+end_src

#+RESULTS:
:              [,1]       [,2]        [,3]       [,4]       [,5]
: [1,] -0.312709838  1.1811075 -0.07963183  0.6343904 -0.2486661
: [2,]  0.004549732  0.6495250  0.33988716  0.3466732 -1.2043665
: [3,]  0.365593736 -0.3820334  0.67146219 -0.3156895 -0.9755513
: [4,]  0.393791691  0.0697378  1.32554925  0.4843509  0.9976438
: [5,]  0.343834148 -0.9774693  2.61705162 -1.7865551  0.2627806
: [6,]  1.210315433  1.3318761  0.13007879 -0.2796113  0.5779865

おおよそ、平均 0 標準偏差 1
#+begin_src R
map_dbl(1:ncol(mvr), ~ mean(mvr[.x, ]))
map_dbl(1:ncol(mvr), ~ sd(mvr[.x, ]))
#+end_src

#+RESULTS:
: [1]  0.23489803  0.02725373 -0.12724365  0.65421468  0.09192839
: [1] 0.6495275 0.7253264 0.6520880 0.5017272 1.6689222

- 概ね、相関は見られない (シグマとして、単位行列を与えているので)
#+begin_src R
cov(mvr)
#+end_src

#+RESULTS:
:             [,1]          [,2]          [,3]        [,4]        [,5]
: [1,]  1.00159289  0.0149680322 -0.0156970123  0.07460762 -0.02667612
: [2,]  0.01496803  0.9881117611 -0.0009264083  0.01886346  0.04723245
: [3,] -0.01569701 -0.0009264083  1.0424594678 -0.01024727  0.06146179
: [4,]  0.07460762  0.0188634628 -0.0102472685  0.93745595  0.04794817
: [5,] -0.02667612  0.0472324468  0.0614617935  0.04794817  1.03263822

**** Plot
***** データ

- [[https://data-se.netlify.com/2018/12/13/visualizing-a-multivariate-normal-distribution/][Visualizing a multivariate normal distribution]]

- =mvtnorm::rmvnorm()= で乱数生成
#+begin_src R :results value :colnames yes
sigma <- matrix(c(4,2,2,3), ncol = 2)
means <- c(0, 0)
n <- 1000

set.seed(42)
x <- rmvnorm(n = n, mean = means, sigma = sigma)
d <- data.frame(x)
head(d)
#+end_src

#+RESULTS:
|                X1 |                 X2 |
|-------------------+--------------------|
|  2.31391502037616 | -0.154423752603409 |
|  1.05275222554906 |   1.24094662403123 |
| 0.716278917654476 | 0.0534054172702754 |
|  2.84794947347205 |  0.694653091050573 |
|  3.83883783877482 |   1.03195245933518 |
|  3.79000418603259 |   4.47972607593532 |

***** 散布図 + 確率密度

#+begin_src R :results output graphics file :file (my/get-babel-file)
p2 <- ggplot(d, aes(x = X1, y = X2)) +
  geom_point(alpha = .5) +
  geom_density_2d()
p2
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-RABpaN.png]]

***** 散布図 + bin2d

#+begin_src R :results output graphics file :file (my/get-babel-file)
p3 <- ggplot(d, aes(x = X1, y = X2)) +
  geom_point(alpha = .5) +
  geom_bin2d() +
  scale_fill_viridis_c()
p3
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-x9oJ8e.png]]

***** 3D by Plotly

#+begin_src R
dens <- kde2d(d$X1, d$X2)
plot_ly(x = dens$x,
        y = dens$y,
        z = dens$z) %>% add_surface()
#+end_src

*** Log Normal

- 確率変数の対数を取ると正規分布になる確率変数の分布
#+begin_src R :results silenet
dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)
plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)
qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)
rlnorm(n, meanlog = 0, sdlog = 1)
#+end_src

#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = 0:10), aes(x = x)) +
  stat_function(fun = dlnorm, args = list(meanlog = 0, sdlog = 1)) +
  stat_function(fun = dlnorm, args = list(meanlog = 0, sdlog = 0.5), linetype = "dashed", color = "brown") +
  stat_function(fun = dlnorm, args = list(meanlog = 2, sdlog = 0.5), linetype = "dotted", color = "brown")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-Ufax6m.png]]

*** Chi-Square

- df = 自由度
- ncp = Non-centrality Parameter
#+begin_src R
dchisq(x, df, ncp = 0, log = FALSE)
pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)
qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)
rchisq(n, df, ncp = 0)
#+end_src

- 自由度を変えてプロット
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = 0:8), aes(x = x)) +
  stat_function(fun = dchisq, args = list(df = 1)) +
  stat_function(fun = dchisq, args = list(df = 2), linetype = "dotted") +
  stat_function(fun = dchisq, args = list(df = 8), linetype = "dashed")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-bTNmFS.png]]

*** t 分布

- 正規分布よりも裾が厚い分布
- 自由度によって、正規分布〜コーシー分布までを含む

#+begin_src R :results silent
dt(x, df, ncp, log = FALSE)
pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE)
qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE)
rt(n, df, ncp)
#+end_src

- 自由度 inf: 正規分布
- 自由度 2-8: くらいで裾の厚い分布として使う
- 自由度 1:   コーシー分布 (非常に裾が厚い)
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dt, args = list(df = 1)) + #? = コーシー分布(裾が厚い)
  stat_function(fun = dt, args = list(df = 2), linetype = "dotted") +
  stat_function(fun = dt, args = list(df = 8), linetype = "dashed") +
  stat_function(fun = dt, args = list(df = Inf), color = "red") # 正規分布(裾が薄くて、尖っている)
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-w5UGIP.png]]

*** F 分布

- スネデカーの F 分布 (英: Snedecor's F distribution)
- またはフィッシャー-スネデカー分布 (英: Fisher-Snedecor distribution) とも呼ばれる
- F 分布は F 検定で帰無仮説に従う分布として用いられる
- 正規分布に従う二つの群に対して「標準偏差が等しい」という仮説の検定や、分散分析に応用される
- _カイ 2 乗分布に従う 2 つの変数の比は F 分布に従う_

- df1, df2: 2 つの自由度を指定
#+begin_src R :results silent
df(x, df1, df2, ncp, log = FALSE)
pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)
qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)
rf(n, df1, df2, ncp)
#+end_src

#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = 0:5), aes(x = x)) +
  stat_function(fun = df, args = list(df1 = 1, df2 = 5)) +
  stat_function(fun = df, args = list(df1 = 2, df2 = 5), linetype = "dotted") +
  stat_function(fun = df, args = list(df1 = 10, df2 = 20), linetype = "dotted")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-pyBUew.png]]

*** TODO Cauthy
*** Double Exponential (Biexponential) / Laplae

- ={nimble}=, ={rmutil}= package
- 二重指数分布/ラプラス分布 ともいう
- 指数分布を両側に貼り付けた分布
- 裾が厚く、鋭いピークがあるのが特徴

#+begin_src R :results silent
ddexp(x, location = 0, scale = 1, rate = 1 / scale, log = FALSE)
rdexp(n, location = 0, scale = 1, rate = 1 / scale)
pdexp(q, location = 0, scale = 1, rate = 1 / scale, lower.tail = TRUE, log.p = FALSE)
qdexp(p, location = 0, scale = 1, rate = 1 / scale, lower.tail = TRUE, log.p = FALSE)
#+end_src

- scale 1-3 のプロット
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = ddexp, args = list(location = 0, scale = 1)) +
  stat_function(fun = ddexp, args = list(location = 0, scale = 2), linetype = "dashed", color = "brown") +
  stat_function(fun = ddexp, args = list(location = 0, scale = 3), linetype = "dotted", color = "brown")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-dVn2m0.png]]

*** TODO Weibull
*** Inverse Gaussian / Wald

- ={rmutil}= package
- 逆ガウス分布 / ワルド分布

#+begin_src R
dinvgauss(y, m, s, log = FALSE)
pinvgauss(q, m, s)
qinvgauss(p, m, s)
rinvgauss(n, m, s)
#+end_src

## いろいろなパラメタでプロット
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = 0.0000001:10), aes(x = x)) +
  stat_function(fun = dinvgauss, args = list(m = 1, s = 1)) +
  stat_function(fun = dinvgauss, args = list(m = 1, s = 2), linetype = "dotted", color = "brown") +
  stat_function(fun = dinvgauss, args = list(m = 1, s = 3), linetype = "dashed", color = "brown")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-CD3ctI.png]]

*** ---
*** Generalized Error Distribution (GED)
**** Overview

- ={fGarch}=, ={rugarch}= package
- 一般化誤差分布
- _二重指数(ラプラス分布) 〜 正規分布 〜 一様分布 を特殊系として持つ_
  - shape=2: 正規分布
  - shape=sqrt(2): 二重指数分布
- 正規分布 + Kurtosis (shape parameter) と捉えることもできる
- 複数の呼び方がある模様
  - 一般化正規分布 (Generalized Normal Distribution)
  - 誤差分布
  - 指数べき分布

- nu = shape parameter (自由度とも言われる)
#+begin_src R :results silent
dged(x, mean = 0, sd = 1, nu = 2, log = FALSE)
pged(q, mean = 0, sd = 1, nu = 2)
qged(p, mean = 0, sd = 1, nu = 2)
rged(n, mean = 0, sd = 1, nu = 2)
#+end_src

**** nu(shape)=2 => Normal

#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dged,  args = list(mean = 0, sd = 1, nu = 2)) +
  stat_function(fun = dnorm, size = 4, alpha = 0.2, color = "red")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-9DIkP6.png]]

**** nu(shape)=√2 => Double-Exponential

#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dged,  args = list(mean = 0, sd = sqrt(2), nu = 1)) +
  stat_function(fun = ddexp, args = list(location = 0, scale = 1), size = 4, alpha = 0.2, color = "red")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-agR3r5.png]]

**** Plots by nu (shape)

- ラプラス分布 〜 正規分布 〜 一様分布への変化
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 0.8), size = 0.4, alpha = 1.0) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 1.0), size = 0.5, alpha = 1.0) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 1.2), size = 0.6, alpha = 0.9) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 1.4), size = 0.7, alpha = 0.8) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 1.6), size = 0.8, alpha = 0.7) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 1.8), size = 0.9, alpha = 0.6) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 2.0), size = 1.0, alpha = 0.5) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 3.0), size = 1.2, alpha = 0.4) +
  stat_function(fun = dged, args = list(mean = 0, sd = 1, nu = 4.0), size = 1.4, alpha = 0.3)
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-IT8Ujm.png]]

*** Normal Inverse Gaussian (NIG)
**** Overview

- ={fBasics}= package
- 一般化逆ガウス分布 (Normal Inverse Gaussian)
- 上下・左右に調整できる柔軟な分布
- Applications in Mathematical Finance
  https://math.ucalgary.ca/files/finlab/CliffTalk26March09.pdf

- alpha = shape (alpha >= 0)
- beta  = skewness (abs(beta) = range(0, alpha))
- delta = scale (delta >= 0)
- mu    = location
#+begin_src R :results silenet
dnig(x, alpha = 1, beta = 0, delta = 1, mu = 0, log = FALSE)
pnig(q, alpha = 1, beta = 0, delta = 1, mu = 0)
qnig(p, alpha = 1, beta = 0, delta = 1, mu = 0)
rnig(n, alpha = 1, beta = 0, delta = 1, mu = 0)
#+end_src

**** Plots by alpha (shape)

- alpha (shape) をいじる => 上下に広げる
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dnig, args = list(alpha =   1, beta = 0, delta = 1, mu = 0), size = 2) +
  stat_function(fun = dnig, args = list(alpha =   2, beta = 0, delta = 1, mu = 0)) +
  stat_function(fun = dnig, args = list(alpha = 0.5, beta = 0, delta = 1, mu = 0))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-oWgpdc.png]]

**** Plots by beta (skew)

- beta (skew) をいじる => 左右に歪める
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dnig, args = list(alpha = 1, beta =    0, delta = 1, mu = 0), size = 2) +
  stat_function(fun = dnig, args = list(alpha = 1, beta = -0.9, delta = 1, mu = 0)) +
  stat_function(fun = dnig, args = list(alpha = 1, beta =  0.9, delta = 1, mu = 0))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-I6c1J5.png]]

**** Plots by delta (scale)

- delta (scale) をいじる => 上下に広げる
- alpha をいじるよりも裾が厚くなるイメージ
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dnig, args = list(alpha = 1, beta = 0, delta = 0.5, mu = 0)) +
  stat_function(fun = dnig, args = list(alpha = 1, beta = 0, delta = 1,   mu = 0), size = 2) +
  stat_function(fun = dnig, args = list(alpha = 1, beta = 0, delta = 2,   mu = 0))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-kljTZb.png]]

**** Plots by mu (location)

- mu (localtion) をいじる => 平均の位置をずらす
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dnig, args = list(alpha = 1, beta = 0, delta = 1, mu = -1)) +
  stat_function(fun = dnig, args = list(alpha = 1, beta = 0, delta = 1, mu = 0), size = 2) +
  stat_function(fun = dnig, args = list(alpha = 1, beta = 0, delta = 1, mu = 1))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-bis7em.png]]

*** Generalized Hyperbolic (GH)
**** Overview

- ={GeneralizedHyperbolic}= package
- 一般化双曲型分布
- 金融市場のモデル化によく使われる

- mu     = location
- delta  = scale (delta >= 0)
- alpha  = tail (alpha >= 0)
- beta   = skew (abs(beta) = range(0, alpha))
- lambda = shape
#+begin_src R :results silent
dghyp(x, mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 1, param = c(mu, delta, alpha, beta, lambda))
pghyp(q, mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 1, param = c(mu, delta, alpha, beta, lambda),
      lower.tail = TRUE, subdivisions = 100, intTol = .Machine$double.eps ^ 0.25, valueOnly = TRUE, ...)
qghyp(p, mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 1, param = c(mu, delta, alpha, beta, lambda),
      lower.tail = TRUE, method = c("spline", "integrate"), nInterpol = 501, uniTol = .Machine$double.eps ^ 0.25,
      subdivisions = 100, intTol = uniTol, ...)
rghyp(n, mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 1, param = c(mu, delta, alpha, beta, lambda))
ddghyp(x, mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 1, param = c(mu, delta, alpha, beta, lambda))
#+end_src

**** Plots by alpha (tail)

- alpha (tail) をいじる => 上下に広げる (裾の厚さ)
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 0.5, beta = 0, lambda = 1)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1.0, beta = 0, lambda = 1), size = 2) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 2.0, beta = 0, lambda = 1)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 3.0, beta = 0, lambda = 1)) +
  ggtitle("alpha")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-bNzsJq.png]]

**** Plots by delta (scale)

- delta (scale) をいじる => 上下に広げる (裾の厚さは、alpha 程は変わらない)
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 0.5, alpha = 1, beta = 0, lambda = 1)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1.0, alpha = 1, beta = 0, lambda = 1), size = 2) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 2.0, alpha = 1, beta = 0, lambda = 1)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 3.0, alpha = 1, beta = 0, lambda = 1)) +
  ggtitle("delta")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-om0864.png]]

**** Plots by beta (skew)

- beta (skew) をいじる => 左右にずれる
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = -0.5, lambda = 1)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 1), size = 2) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = 0.5, lambda = 1))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-8UInEX.png]]

**** Plots by lambda (shape)

- lambda (shape) をいじる => 上下に広げる (=> alpha とほぼ変わらない？？)
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = 0, lambda = -1), color = "brown") +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 0), color = "brown") +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 1), size = 2) +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 2), color = "blue") +
  stat_function(fun = dghyp, args = list(mu = 0, delta = 1, alpha = 1, beta = 0, lambda = 3), color = "blue") +
  ggtitle("lambda")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-vwPJNU.png]]

*** Johnson's SU (JSU)
**** Overview

- ={gamlss.dist}= package
- ジョンソンの SU 分布 (Johnson's SU)
- 正規分布の欠点をカバーするというコンセプト
- 歪度・尖度を加える

- それぞれのモーメント毎の変数
- mu    = location
- sigma = scale
- nu    = skew
- tau   = kurtosis (tau >= 0)
#+begin_src R :results silent
JSU(mu.link = "identity", sigma.link = "log", nu.link = "identity", tau.link = "log")

dJSU(x, mu = 0, sigma = 1, nu = 1, tau = 1, log = FALSE)
pJSU(q, mu = 0, sigma = 1, nu = 1, tau = 1, lower.tail = TRUE, log.p = FALSE)
qJSU(p, mu = 0, sigma = 1, nu = 1, tau = 1, lower.tail = TRUE, log.p = FALSE)
rJSU(n, mu = 0, sigma = 1, nu = 1, tau = 1)
#+end_src

**** Plots by nu (skew)

- nu (skew)
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu = -2.0, tau = 1), color = "brown") +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu = -1.0, tau = 1), color = "brown") +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu =  0.0, tau = 1), size = 2) +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu =  1.0, tau = 1), color = "blue") +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu =  2.0, tau = 1), color = "blue") +
  ggtitle("nu")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-2ONIO0.png]]

**** Plots by tau (kurtosis)

- tau (kurtosis)
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu = 0, tau = 0.5), color = "brown") +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu = 0, tau = 1), size = 2) +
  stat_function(fun = dJSU, args = list(mu = 0, sigma = 1, nu = 0, tau = 1.5), color = "blue") +
  ggtitle("tau")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-gSaIxW.png]]

*** ---
*** Skew Normal
**** Overview
- ={sn}=, ={rugarch}=
- xi    = location parameter
- omega = scale parameter (must be positive)
- alpha = slant paramter (= shape parameter) ※歪み具合
- tau   = hidden mean for extended skew normal

#+begin_src R
dsn(x, xi = 0, omega = 1, alpha = 0, tau = 0, dp = NULL, log = FALSE)
psn(x, xi = 0, omega = 1, alpha = 0, tau = 0, dp = NULL, engine, ...)
qsn(p, xi = 0, omega = 1, alpha = 0, tau = 0, dp = NULL, tol = 1e-8, solver = "NR", ...)
rsn(n = 1, xi = 0, omega = 1, alpha = 0, tau = 0, dp = NULL)
#+end_src

**** Histogram

- Skew normal: SN(0, 1, 2) に従う乱数
#+begin_src R :results graphics :file (get-babel-file)
rand <- rsn(n = 10000, xi = 0, omega = 1, alpha = 2)

# plot histogram
ggplot(data = tibble(rand = rand), aes(x = rand)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.05, fill = "white", color = "black") +
  stat_function(fun = dsn, args = list(xi = 0, omega = 1, alpha = 2))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-AwkC66.png]]

**** Plots by alpha

- alpha -4 ~ 4 のプロット
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dsn, args = list(xi = 0, omega = 1, alpha = -4), linetype = "dashed", color = "brown") +
  stat_function(fun = dsn, args = list(xi = 0, omega = 1, alpha = -1), linetype = "dotted", color = "brown") +
  stat_function(fun = dsn, args = list(xi = 0, omega = 1, alpha = 0)) +
  stat_function(fun = dsn, args = list(xi = 0, omega = 1, alpha = 1), linetype = "dotted", color = "blue") +
  stat_function(fun = dsn, args = list(xi = 0, omega = 1, alpha = 4), linetype = "dashed", color = "blue")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-v1BiHD.png]]

*** Skew Student-t
**** Overview

- ={sn}=, ={rugarch}=
- xi    = location parameter
- omega = scale parameter (must be positive)
- alpha = slant paramter (= shape parameter) ※歪み具合
- nu    = degree of freedom

#+begin_src R
dst(x, xi = 0, omega = 1, alpha = 0, nu = Inf, dp = NULL, log = FALSE)
pst(x, xi = 0, omega = 1, alpha = 0, nu = Inf, dp = NULL, method = 0, ...)
qst(p, xi = 0, omega = 1, alpha = 0, nu = Inf, tol = 1e-08, dp = NULL, method = 0, ...)
rst(n = 1, xi = 0, omega = 1, alpha = 0, nu = Inf, dp = NULL)
#+end_src

**** Histogram

- Skew student-t: ST(0, 1, 4, 2) に従う乱数
#+begin_src R :results graphics :file (get-babel-file)
rand <- rst(n = 10000, xi = 0, omega = 1, alpha = 2, nu = 4)
ggplot(data = tibble(rand = rand), aes(x = rand)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.2, fill = "white", color = "black") +
  stat_function(fun = dst, args = list(xi = 0, omega = 1, alpha = 2, nu = 4))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-8s2vtD.png]]

**** Plots by alpha

- alpha -4 ~ 4 のプロット (自由度 2)

#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = -5:5), aes(x = x)) +
  stat_function(fun = dst, args = list(xi = 0, omega = 1, alpha = -4, nu = 2), linetype = "dashed", color = "brown") +
  stat_function(fun = dst, args = list(xi = 0, omega = 1, alpha = -1, nu = 2), linetype = "dotted", color = "brown") +
  stat_function(fun = dst, args = list(xi = 0, omega = 1, alpha = 0, nu = 2)) +
  stat_function(fun = dst, args = list(xi = 0, omega = 1, alpha = 1, nu = 2), linetype = "dotted", color = "blue") +
  stat_function(fun = dst, args = list(xi = 0, omega = 1, alpha = 4, nu = 2), linetype = "dashed", color = "blue")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-4V4zrV.png]]

*** Skew GED

#+begin_src R :results silent
dsged(x, mean = 0, sd = 1, nu = 2, xi = 1.5, log = FALSE)
psged(q, mean = 0, sd = 1, nu = 2, xi = 1.5)
qsged(p, mean = 0, sd = 1, nu = 2, xi = 1.5)
rsged(n, mean = 0, sd = 1, nu = 2, xi = 1.5)
#+end_src

- Skew ged(0, 1, 2, 1.5) に従う乱数
#+begin_src R :results graphics :file (get-babel-file)
rand <- rsged(n = 10000, mean = 0, sd = 1, nu = 2, xi = 1.5)
ggplot(data = tibble(rand = rand), aes(x = rand)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.05, fill = "white", color = "black") +
  stat_function(fun = dsged, args = list(mean = 0, sd = 1, nu = 2, xi = 1.5))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-JeeHZG.png]]

** 離散値の確率分布 (カウントデータ)
*** TODO Geometric
*** Negative Binormal

- http://hoxo-m.hatenablog.com/entry/20151012/p1

#+begin_src R :results silent
dnbinom(x, size, prob, mu, log = FALSE)
pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)
qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)
rnbinom(n, size, prob, mu)
#+end_src

- コイントスで 3 回表がでるまでに、5回失敗する確率
#+begin_src R
dnbinom(5, 3, 0.5) # 8.2%
#+end_src

#+RESULTS:
: [1] 0.08203125

#+begin_src R
a = rnbinom(10000, 3, 0.5)
mean(a)
var(a)
#+end_src

#+RESULTS:
: 
: [1] 2.9756
: 
: [1] 5.876592

*** 二項分布 (ベルヌーイ分布) - Binomial (Bernoulli)
**** 基本

- パスカル (1623 - 1662)
- n 個のうち、y個が成功だった (2 値データ) という特性を持つデータの分布
- n = 試行回数, p = 成功確率 (0 <= p <= 1)

- base funs
#+begin_src R :results silent
dbinom(x, size, prob, log = FALSE) # x=成功数, size=試行回数, prob=成功確率
pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)
qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)
rbinom(n, size, prob)
#+end_src

**** PMF

- 確率分布
#+begin_src R :results silent
# p(y|n,p) = nCy * p^y * (1 - p)^(n - y)
my_dbinom <- function(y, n, p) {
  choose(n, y) * p^y * (1 - p)^(n - y)
}
#+end_src

- 5 回コイントスをして、5回とも表がでる確率
#+begin_src R
my_dbinom(5, 5, 0.5) # 3.1%
dbinom(5, 5, 0.5)    # 3.1%
#+end_src

#+RESULTS:
: [1] 0.03125
: 
: [1] 0.03125

- 5 回コイントスをして、3回表がでる確率
#+begin_src R
dbinom(3, 5, 0.5) # 31.25%
#+end_src

#+RESULTS:
: [1] 0.3125

**** Plots

- 8 個から 0 ~ 8 個を選ぶ場合 (緑本の題材)
#+begin_src R :results graphics :file (get-babel-file)
plot(dbinom(0:8, 8, 0.1))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-tKcbyx.png]]

**** Random

- ベルヌーイ試行（成功率 50%)
#+begin_src R
rbinom(n = 10, size = 1, prob = 0.5)
sample.int(n = 2, size = 10, replace = TRUE, prob = c(0.5, 0.5)) - 1 # 上記と同じ
#+end_src

#+RESULTS:
:  [1] 0 0 1 1 0 1 0 0 0 1
: 
:  [1] 0 1 0 0 0 0 0 0 0 1

- 二項分布に従う乱数
#+begin_src R
rbinom(n = 10, size = 4, prob = 0.3)
#+end_src

#+RESULTS:
:  [1] 1 2 2 1 2 2 2 3 0 0

*** 多項分布 - Multinomial
**** 基本

- フェルマー (1601 - 1665)

*** TODO Multi-Normal
*** Poisson
**** Overview

- ポアソン分布
- カウントデータ (非負の整数, 0 ~ Inf)
- パラメータは、 lamda (=平均=分散) のみ, λ = E(x) = Var(x)
  => つまり平均が大きいデータは分散もおおきくなる

**** PMF

- 確率分布
#+begin_src R
# p(y|λ) = λ ^ y * exp(-λ) / y! (!は階乗)
f <- function(x, lambda) {
  (lambda ^ x * exp(-lambda)) / factorial(x)
}
f(5, 3.5)
dpois(5, 3.5)
#+end_src

#+RESULTS:
: [1] 0.1321686
: [1] 0.1321686

- base R
#+begin_src R :results silent
dpois(x, lambda, log = FALSE)
ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)
qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)
rpois(n, lambda)
#+end_src

- 最大対数尤度
#+begin_src R
data <- rpois(50, lambda = 3.5)
sum(dpois(data, mean(data), log = TRUE)) #? 対数尤度の和
#+end_src

#+RESULTS:
: [1] -98.50954

**** Plots

- グラフ (緑本の例)
#+begin_src R :results graphics :file (get-babel-file)
x <- 0:9 # 0-9 個のカウントデータ
prob <- dpois(x, lambda = 3.56)
plot(x, prob, type = "b", lty = 2)
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-ZZO9vp.png]]

** Distributions for Probability (Continous)
*** TODO Uniform
*** TODO Beta
*** TODO Dirichlet
*** TODO Categorical

- カテゴリ数 5 カテゴリカル分布に従う乱数
sample.int(5, 20, replace = TRUE, prob = c(0.1, 0.15, 0.25, 0.35, 0.15))

** Distributions for Waiting Time (Continous)
*** Exponential

- あるイベントが 1 回発生するまでの時間の分布 = "待ち時間"
#+begin_src R :results silent
dexp(x, rate = 1, log = FALSE)
pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)
qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)
rexp(n, rate = 1)
#+end_src

- いろいろなパラメタでプロット
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = 0:5), aes(x = x)) +
  stat_function(fun = dexp, args = list(rate = 1)) +
  stat_function(fun = dexp, args = list(rate = 3), linetype = "dotted", color = "brown") +
  stat_function(fun = dexp, args = list(rate = 0.5), linetype = "dashed", color = "brown")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-yyenSP.png]]

*** Gamma

- 何かのイベントが K 回 発生するまでの時間の分布 = "待ち時間" と捉えるとわかりやすい
- 応用: トラフィックの待ち時間、信頼性工学
- K=1 の時、指数分布
#+begin_src R :results silent
dgamma(x, shape, rate = 1, scale = 1 / rate, log = FALSE)
pgamma(q, shape, rate = 1, scale = 1 / rate, lower.tail = TRUE, log.p = FALSE)
qgamma(p, shape, rate = 1, scale = 1 / rate, lower.tail = TRUE, log.p = FALSE)
rgamma(n, shape, rate = 1, scale = 1 / rate)
#+end_src

- いろいろなパラメタでプロット
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data = tibble(x = 0:10), aes(x = x)) +
  stat_function(fun = dgamma, args = list(shape = 1, rate = 1)) +
  stat_function(fun = dgamma, args = list(shape = 3, rate = 3), linetype = "dotted", color = "brown") +
  stat_function(fun = dgamma, args = list(shape = 3, rate = 1), linetype = "dashed", color = "brown")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-LiTfn7.png]]

* 参考

- [[http://www.math.wm.edu/~leemis/chart/UDR/UDR.html][Univariate Distribution Relationships (確率分布曼荼羅)]]
- [[https://stats.biopapyrus.jp/probability/][確率分布@biostatistic]]
- [[https://qiita.com/qiita_kuru/items/d9782185652351c78aac][代表的確率分布のまとめ@qiita]]
