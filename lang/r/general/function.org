#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results output :colnames yes :session *R:function*

* Library

#+begin_src R :results silent
library(tidyverse)
#+end_src

* 3 components of a function
** body

#+begin_src R
add <- function(a, b) a + b
body(add)
#+end_src

#+RESULTS:
:
: a
: b

- body は call class
#+begin_src R
body(add) %>% class()
#+end_src

#+RESULTS:
: [1] "call"

- 関数を書き換えられる
#+begin_src R
body(add) <- expression(a + b + 10)
add(1, 2)
#+end_src

#+RESULTS:
:
: [1] 13

** arguments (formals)

#+begin_src R
add <- function(a, b) a + b
formals(add)
#+end_src

#+RESULTS:
:
: $a
:
:
: $b

- formals = pairlist class
#+begin_src R
formals(add) %>% class()
#+end_src

#+RESULTS:
: [1] "pairlist"

** envivronmnet

- 通常インタラクティブに定義した関数は Global_Env に存在する
#+begin_src R
add <- function(a, b) a + b
environment(add)
#+end_src

#+RESULTS:
:
: <environment: R_GlobalEnv>

#+begin_src R
is.function(add)
#+end_src

#+RESULTS:
: [1] TRUE

- base package の全ての関数
#+begin_src R
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
length(funs)
#+end_src

#+RESULTS:
: 
: [1] 1218

* Primitive functions

- 3 つの構成要素がすべて NULL
- C code を直接呼び出している
#+begin_src R
body(sum)
formals(sum)
environment(sum)

is.primitive(sum)
#+end_src

#+RESULTS:
: NULL
:
: NULL
:
: NULL
:
: [1] TRUE

* Scoping
** Type of Scoping

- Scoping = name から value を探す方法
- Lexical Scoping = 構文(どうネストされるか) によって、有効範囲が決まる
- Dynamic Scoping

** 4 Principles of Lexical Scoping
*** Name masking

- 内側の階層の変数は、外側の変数をマスクする
- 関数内で変数が定義されていない場合は、1つ上をさかのぼっていく
#+begin_src R
x <- 1
h <- function() {
  y <- 2
  i <- function() {
    z <- 3
    c(x, y, z)
  }
  i()
}
h()
rm(x, h)
#+end_src

- Closure でもルールは同じ
#+begin_src R
j <- function(x) {
  y <- 2
  function() {
    c(x, y)
  }
}
k <- j(1)
k()
rm(j, k)
#+end_src

*** Functions vs. variables

- 関数も変数もスコープの考え方は同じ
- 関数をサーチしていることが明らかなときは、関数のみを探す

#+begin_src R
n <- function(x) x / 2
o <- function() {
  n <- 10
  n(n)
}
o()
#+end_src

*** A fresh start

- 関数は呼び出されるたびに、新しい環境が作られる

#+begin_src R
j <- function() {
  if (!exists("a")) {
    a <- 1
  } else {
    a <- a + 1
  }
  a
}
j()
rm(j)
#+end_src

*** Dynamic lookup

- 関数を呼び出される度に、値が検索される
- Global 変数を関数内では利用しない
#+begin_src R
f <- function() x + 1
x <- 15
f()

x <- 20
f()
#+end_src

- 外部の依存関係を検索できる
#+begin_src R
codetools::findGlobals(f)
#+end_src

- もしくは、空の環境を割り当てる
#+begin_src R
environment(f) <- emptyenv()
#+end_src

- f() 自体も見つけることができない

* Every operation is a function call

- Everything that exists is an object.
- Everything that happens is a function call.

#+begin_src R
`+`(10, 13)
#+end_src

#+RESULTS:
: [1] 23


#+begin_src R
`for`(i, 1:2, print(i))
#+end_src

#+RESULTS:
: [1] 1
: [1] 2

#+begin_src R
`if`(i == 1, print("yes!"), print("no."))
#+end_src

#+RESULTS:
: [1] "no."

#+begin_src R
x <- c(1, 2, 3)
`[`(x, 3)
#+end_src

#+RESULTS:
:
: [1] 3

#+begin_src R
`{`(print(1), print(2), print(3))
#+end_src

#+RESULTS:
: [1] 1
: [1] 2
: [1] 3

#+begin_src R
add <- function(x, y) x + y
sapply(1:10, add, 3)
sapply(1:10, `+`, 3)
sapply(1:10, "+", 3) # sapply は関数名が文字列でも OK
#+end_src

#+RESULTS:
:
:  [1]  4  5  6  7  8  9 10 11 12 13
:
:  [1]  4  5  6  7  8  9 10 11 12 13
:
:  [1]  4  5  6  7  8  9 10 11 12 13

* Arguments

- formal arguments
- actual arguments
#+begin_src R
f <- function(abcdef, bcde1, bcde2) {
  list(a = abcdef, b1 = bcde1, b2 = bcde2)
}
#+end_src

- 引数の割当順
   1. by complete name, or by partial name
   2. by prefix matching
   3. by position
#+begin_src R
str(f(1, 2, 3))
str(f(2, 3, abcdef = 1))
str(f(2, 3, a = 1)) # 短縮形でも OK
#+end_src

#+RESULTS:
#+begin_example
List of 3
 $ a : num 1
 $ b1: num 2
 $ b2: num 3

List of 3
 $ a : num 1
 $ b1: num 2
 $ b2: num 3

List of 3
 $ a : num 1
 $ b1: num 2
 $ b2: num 3
#+end_example

- Common rules
  - Use positional matching for the first one or two arguments that they will be the most commonly used,
  - Avoid using positional matching for less commonly used arguments
  - Readable abbreviations with partial matching
  - (Package) Do not use partial matching, and must use complete names
  - Named arguments should always come after unnamed arguments
  - If a function uses ..., you can only specify arguments listed after ... with their full name

** Calling a function given a list of arguments

#+begin_src R
args <- list(1:10, na.rm = TRUE)
#+end_src

- 関数 + list args
#+begin_src R
## do.call(what, args, quote = FALSE, envir = parent.frame())
do.call(mean, args)
#+end_src

** デフォルト引数

- 遅延評価 (Lazy eval) なので、他の引数の値を利用可能
#+begin_src R
g <- function(a = 1, b = a * 2) {
  c(a, b)
}
g()
#+end_src

- missing で引数の有無を確認可能
#+begin_src R
i <- function(a, b) {
  c(missing(a), missing(b))
}
i()
#+end_src

- ただし、引数に NULL を与えて =is.null()= で check のほうがよい

* Lazy evaluation

- 引数は遅延評価
#+begin_src R
f <- function(x) {
  10
}
f(stop("This is an error!"))
#+end_src

- 必ず評価させるときは、force() を使う
#+begin_src R
f <- function(x) {
  force(x)
  10
}
f(stop("This is an error!"))
#+end_src

- lapply や loop で Closure を作成する際は注意 (最後の 10 が x の値になる)
#+begin_src R
add <- function(x) {
  function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
adders[[10]](10)

add <- function(x) {
  force(x)
  function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[1]](10)
adders2[[10]](10)
#+end_src

- 実行する環境によって値が異なる
#+begin_src R
f <- function(x = ls()) {
  a <- 1
  x
}
# ls() evaluated inside f:
f()
# ls() evaluated in global environment:
f(ls())
#+end_src

- 評価されていない引数のことを「promise」と呼ぶ
- 遅延評価は if 文でも有用 (x > 0 は通常ではエラー)
#+begin_src R
x <- NULL
if (!is.null(x) && x > 0) {
}
#+end_src

- if 文を簡潔にかきかえると
#+begin_src R
if (is.null(x)) stop("x is null")
!is.null(x) || stop("x is null")
#+end_src

* ... (dot-dot-dot) 可変長引数

- 関数の中で、別の関数を呼び出す際、引数を明示的に定義しなくてよい
- =...= のあとの引数は必ず、名前をつけなくてはいけない
- ... Arguments to be passed to methods, such as graphical parameters(see par).
- Many methods will accept the following arguments:
#+begin_src R
plot(x, y, ...)
par()

plot(1:5, col = "red")
plot(1:5, cex = 5, pch = 20)
#+end_src

- =...= は list で受ける
#+begin_src R
f <- function(...) {
  list(...)
}
f <- function(...) {
  names(list(...))
}
f(a = 1, b = 2)
#+end_src

* Infix functions

- LHS func RHS の形式のもの
- ユーザー定義のものは、%hoge% の形式にする

- Complete list (pre-defined)
- :, ::, :::, $, @, ^, *, /, +, -, >, >=, <, <=, ==, !=, !, &, &&, |, ||, ~, <-, <<-,
  %% , %*% , %/% , %in% , %o% , %x%

- 定義する際は、`` でかこう
#+begin_src R
`%+%` <- function(a, b) paste0(a, b)
"new" %+% " string"
`%+%`("new", " string")
#+end_src

#+RESULTS:
:
: [1] "new string"
:
: [1] "new string"

- %% の間はどんな文字でもよい (エスケープは必要)
#+begin_src R
`% %` <- function(a, b) paste(a, b)
`%'%` <- function(a, b) paste(a, b)
`%/\\%` <- function(a, b) paste(a, b)

"a" % % "b"
"a" %'% "b"
"a" %/\% "b"
#+end_src

#+RESULTS:
:
: [1] "a b"
:
: [1] "a b"
:
: [1] "a b"

- 左から右につなげていく
#+begin_src R
`%-%` <- function(a, b) paste0("(", a, " %-% ", b, ")")
"a" %-% "b" %-% "c"
#+end_src

#+RESULTS:
:
: [1] "((a %-% b) %-% c)"

- %||% Default value for NULL
#+begin_src R
1 %||% 2
NULL %||% 2
#+end_src

#+RESULTS:
: [1] 1
:
: [1] 2

* Replacement functions

- 所定の位置の値を書き換える関数
#+begin_src R
`second<-` <- function(x, value) {
  x[2] <- value
  x
}
x <- 1:10
second(x) <- 5L
x
#+end_src

- 実際には コピーを作成しているので、アドレス番地が異なる
#+begin_src R
library(pryr)
x <- 1:10
address(x)

second(x) <- 6L
address(x)
#+end_src

- 追加の引数を用意する場合には、x, value の間
#+begin_src R
`modify<-` <- function(x, position, value) {
  x[position] <- value
  x
}
modify(x, 1) <- 10
x

x <- `modify<-`(x, 1, 10)
x
#+end_src

* Return values

- 明示的に値を早く返す場合にのみ使う
#+begin_src R
f <- function(x, y) {
  if (!x) return(y)
  # complicated processing here
}
#+end_src

- 関数を純粋関数に保つことが需要
- 純粋関数(Pure function) 値を返す以外環境に影響を及ぼさない(副作用がない)
- R = Copy on Modify semantics
  - 関数の引数を変更しても、元のオブジェクトは変更されない(RC と Environment 以外)
#+begin_src R
f <- function(x) {
  x$a <- 2
  x
}
x <- list(a = 1)
f(x)
x

(invisible(1 + 2))
#+end_src

* On Exit

- 関数がどのような終わり方をしても必ず実行される
- 関数の副作用を最小限に留めることができる

#+begin_src R
in_dir <- function(dir, code) {
  old <- setwd(dir) # 移動前の場所を返す
  on.exit(setwd(old))

  force(code)
}
getwd()
in_dir("~", getwd())
#+end_src
