#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :session *R:math* :width 560 :height 420 :results output

* 代表値

- 算術平均
$\frac{1}{n} \Sigma_{i=1}^n$

#+begin_src R
x <- c(1, 3, 7, 7, 12, 20)
sum(x)/length(x)
mean(x)
#+end_src

#+RESULTS:
: [1] 8.333333
: [1] 8.333333

- 幾何平均
$(\Pi_{i=1}^n a_i)^{1/n}$

#+begin_src R
prod(x)^(1/length(x))
#+end_src

#+RESULTS:
: [1] 5.726924

- 調和平均 (率の平均)
#+begin_src R
length(x)/sum(1/x)
#+end_src

#+RESULTS:
: [1] 3.423913

- 中央値
#+begin_src R
median(x)
#+end_src

#+RESULTS:
: 7

- 最頻値
#+begin_src R
names(which.max(table(x)))
#+end_src

#+RESULTS:
: [1] "7"

- 最大・最小
#+begin_src R
min(x)
max(x)
#+end_src

#+RESULTS:
: [1] 1
: 
: [1] 20

* 散布度
** 分散

- 偏差の 2 乗の平均
- 標本分散
  - 標本分散は _一致推定量_ ではあるものの _不偏推定量_ ではない
  - n が十分に大きくない場合には標本分散の期待値は母分散に一致せず、母分散より小さくなる

$\hat{\sigma^2} = \frac{1}{n}\sum_{i=1}^n(x_i - \bar{x})^2$

#+begin_src R
mean((x - mean(x))^2)
#+end_src

#+RESULTS:
: [1] 39.22222
: [1] 39.22222


- 不偏分散 (Unbiased Variance) (= 不偏推定量)
  - サンプル数を n-1 する
  - 不偏性(= 母集団の分散と一致すること) を満たす

$s^2 = \frac{1}{n-1}\sum_{i=1}^n(x_i - \bar{x})^2$

#+begin_src R
sum((x - mean(x))^2) / (length(x) - 1)
var(x)
#+end_src

#+RESULTS:
: [1] 47.06667
: [1] 47.06667

- なぜ n-1 すると不偏推定量になるのか？
  - 『金融市場のための統計学』p.30-31
  - 分散を求めるための偏差は、全て合計するとゼロになる
  $(x_1 - \bar{x}) + (x_2 - \bar{x}) + \dots + (x_n - \bar{x}) = 0$
  - _つまり、最後のデータは、かならず和がゼロになるように自動的に決まってしまう_
  - そのため、データ数 n の中で 1 つは、「自由に散らばることができない」
  - これを自由度が 1 つ減るという
  - n-1 することで、母分散を過小に評価してしまうことを避けている

** 標準偏差
偏差の 2 乗の平均の平方根

- 標準偏差
#+begin_src R
sqrt(var(x))
sd(x)
#+end_src

#+RESULTS:
: [1] 6.860515
: 
: [1] 6.860515

** 平均偏差
偏差の絶対値の平均

#+begin_src R
mean(abs(x - mean(x)))
#+end_src

#+RESULTS:
: [1] 5.111111

** 範囲(レンジ)

#+begin_src R
max(x) - min(x)
#+end_src

#+RESULTS:
: [1] 19
* z 値

- 偏差を標準偏差で割って、標準化したもの
- ばらつきの具合を正規化できる

#+begin_src R
(x - mean(x)) / sd(x)
#+end_src

#+RESULTS:
: [1] -1.0689188 -0.7773955 -0.1943489 -0.1943489  0.5344594  1.7005526

* 相関
** 共分散

- 共分散 (不偏共分散)
- 2 つのデータ間偏差同士の積の平均
- 正ならば同じ方向に動く、負ならば逆の方向に動く

#+begin_src R
y <- c(-29, -9, -8, -5, -3, 1)

sum((x - mean(x)) * (y - mean(y))) / (length(x) - 1)
cov(x, y)
#+end_src

#+RESULTS:
: [1] 55.73333
: [1] 55.73333

** 相関係数

- 共分散を 2 つのデータの標準偏差で割って正規化したのもの
- データの単位の影響を消すことができる
#+begin_src R
cov(x, y) / (sd(x) * sd(y))
cor(x, y)
#+end_src

#+RESULTS:
: [1] 0.7725849
: [1] 0.7725849

- 0-1 の 2 値データの相関係数は、ファイ係数と呼ばれる
#+begin_src R
cor(c(0, 1, 1, 0, 1), c(0, 0, 1, 1, 1))
#+end_src

#+RESULTS:
: [1] 0.1666667
** 分散共分散行列

- 多変量間の分散・共分散を行列にまとめたもの
- 対角が、それぞれの変数の分散
#+begin_src R
v1 <- c(1, 3, 9, 12, 15)
v2 <- c(-15, -12, -9, -3, -1)
v3 <- c(14, -33, 0, 93, 2)

mat <- matrix(c(v1, v2, v3), ncol =3)
mat
cov(mat)
var(v1)
var(v2)
var(v3)

cov(v1, v2)
cov(v1, v3)
#+end_src

#+RESULTS:
#+begin_example
     [,1] [,2] [,3]
[1,]    1  -15   14
[2,]    3  -12  -33
[3,]    9   -9    0
[4,]   12   -3   93
[5,]   15   -1    2
       [,1]   [,2]    [,3]
[1,]  35.00  34.25  113.25
[2,]  34.25  35.00  128.25
[3,] 113.25 128.25 2195.70
[1] 35
[1] 35
[1] 2195.7
[1] 34.25
[1] 113.25
#+end_example
* 対数/指数
** 自然対数

- 2.718 を何乗したらその数になるか
#+begin_src R
log(10, base = exp(1)) # 底 = e
exp(1)
#+end_src

#+RESULTS:
: [1] 2.302585
: 
: [1] 2.718282

- 対数 => 指数
#+begin_src R
log(20) # = 2.99... つまり 20(真数) = 2.7(底) ^ 3(対数) ということ
exp(3)  # 底 e * n
#+end_src

#+RESULTS:
: [1] 2.995732
: 
: [1] 20.08554

- 指数 => 対数
#+begin_src R
ans <- exp(10)
ans
log(ans)
#+end_src

#+RESULTS:
: 
: [1] 22026.47
: 
: [1] 10

- 真数 > 0 でなければならない
#+begin_src R
log(0)
log(-1)
#+end_src

#+RESULTS:
: [1] -Inf
: 
: [1] NaN
: Warning message:
: In log(-1) : NaNs produced

- 真数 < 1 は負の数
#+begin_src R
log(0.9) # => -0.105..
log(1)   # => 0
log(1.1) # => 0.095..
#+end_src

#+RESULTS:
: [1] -0.1053605
: 
: [1] 0
: 
: [1] 0.09531018

#+begin_src R
n <- 100
ans <- log(n)
dplyr::near(exp(ans), n)
#+end_src

#+RESULTS:
: 
: [1] TRUE

** 常用対数
log10()

** Binary logarithims

- log2()

** log_sum_exp() & softmax

$log(\Sigma_{i=1}^n c_i exp(x_i))$

- [[https://scrapbox.io/kimiyuki/logsumexp][logsumexp@未来の自分が読むメモ]]
- 通常、サンプルの尤度はデータ点の密度関数の掛け算なので、対数尤度にして、和の形で足し込むとなる
- 混合分布などの場合は密度関数自体に和の形が入るので、対数をとっても、バラすことができない
- あと、計算機の問題もある。
- 単純に x を exp したくない場面が多い
- もともと、x をとても小さな値を, log 化してるので、桁落ちとかしてしまう
- 例えば、 、xが -30 とかだと、 exp(x)は、 0.000000000000000...とかで、exp で戻して、さらに足し算、log とかになるとよくない。
- ということで、対数とったけど、中身が、ある関数の足し算というときはやっかい。
- なので、うまく、 logsumexp()してくれる関数が欲しい。


- https://rdrr.io/cran/RBesT/src/R/log_sum_exp.R からソースを抜粋
#+begin_src R
## 対数に変換した尤度を、exp で一旦元に戻してから合計し、再度対数に戻す
log_sum_exp <- function(x) {
  if(length(x) == 1)
    return(x)
  xmax <- which.max(x)
  if (is.finite(x[xmax]))
    return(log1p(sum(exp(x[-xmax]-x[xmax])))+x[xmax])
  ## in case the maximum is not finite, we let R figure out what is
  ## the correct result (usually -Inf or +Inf)
  return(log(sum(exp(x))))
}

## 合計1の確率ベクトルに変換する
softmax <- function (x) {
  exp(x - log_sum_exp(x))
}
#+end_src

* 微分

#+begin_src R
# f(x) = x^2
f <- function(x) x ^ 2

# lim h -> 0 を h -> 0.00001 で近似する
diff_f <- function(f, x) {
  h <- 0.000001
  (f(x + h) - f(2)) / h
}
diff_f(f, 2) # 4.000001

D(expr(x ^ 2), "x") # => 2 * x
#+end_src

#+RESULTS:
: 
: [1] 4.000001
: 
: Error in expr(x^2) : could not find function "expr"

* ベクトル/行列
** ベクトル
*** 定数倍 = スカラー倍

#+begin_src R
c(2, 3, 4, 5) * 4
#+end_src

#+RESULTS:
: [1]  8 12 16 20

- ベクトルの長さが異なるときは、自動的に補っってくれる (割り切れる場合は)
#+begin_src R
c(2, 3, 4, 5) * c(4, 2)
#+end_src

#+RESULTS:
: [1]  8  6  4 20
: Warning message:
: In c(2, 3, 4, 5) * c(4, 2, 1) :
:   longer object length is not a multiple of shorter object length

*** 内積 =%*%=

- 要素同時の掛け算の和
#+begin_src R
va <- c(1, 2, 3, 4, 5)
vb <- c(2, 4, 6, 8, 10)

va %*% vb
sum(va * vb)
#+end_src

#+RESULTS:
: 
:      [,1]
: [1,]  110
: 
: [1] 110

*** 外積 =%o%=

#+begin_src R
va %o% vb
#+end_src

#+RESULTS:
:      [,1] [,2] [,3] [,4] [,5]
: [1,]    2    4    6    8   10
: [2,]    4    8   12   16   20
: [3,]    6   12   18   24   30
: [4,]    8   16   24   32   40
: [5,]   10   20   30   40   50

** 行列
*** 行列の積 =%*%=

- 行列 A の列数と行列 B の行数が一致している必要あり
#+begin_src R
mata <- matrix(3:8, ncol = 2)
mata
matb <- matrix(1:6, ncol = 3)
matb

mata %*% matb
#+end_src

#+RESULTS:
#+begin_example

     [,1] [,2]
[1,]    3    6
[2,]    4    7
[3,]    5    8

     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

     [,1] [,2] [,3]
[1,]   15   33   51
[2,]   18   40   62
[3,]   21   47   73
#+end_example

*** 転置 =t()=

#+begin_src R
mata
t(mata)
#+end_src

#+RESULTS:
:      [,1] [,2]
: [1,]    3    6
: [2,]    4    7
: [3,]    5    8
: 
:      [,1] [,2] [,3]
: [1,]    3    4    5
: [2,]    6    7    8

*** 正方行列

- 行数と列数が等しい行列
#+begin_src R
matrix(1:9, ncol = 3, nrow = 3)
#+end_src

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    4    7
: [2,]    2    5    8
: [3,]    3    6    9

- 上三角行列
  - 対角よりも下の成分が全てゼロの行列
  - 右三角とも言う

- 下三角行列
  - 対角よりも上の成分が全てゼロの行列
  - 左三角とも言う

*** 対角行列/単位行列 =diag()=

- 非対角要素は、全てゼロ
#+begin_src R
diag(c(1, 2, 3))
#+end_src

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    0    0
: [2,]    0    2    0
: [3,]    0    0    3

- 単位行列
- 対角行列の要素が全て 1
#+begin_src R
diag(3)
#+end_src

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    0    0
: [2,]    0    1    0
: [3,]    0    0    1

- _単位行列をかけても値は変わらない_
#+begin_src R
matc <- matrix(1:9, ncol = 3)
matc
matc %*% diag(3)
#+end_src

#+RESULTS:
#+begin_example

     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9

     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9
#+end_example

*** 行列式 =det()=

- det()関数で計算
- 正方行列のみが行列式を持つ
- 行列式は、逆行列がそもそも存在するのかを確認することができる
  => 行列式が 0 だと逆行列を持たない
  
#+begin_src R
mate <- matrix(c(1, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1), ncol = 3)
mate
det(mate)
#+end_src

#+RESULTS:
: 
:      [,1] [,2] [,3]
: [1,]  1.0  0.5  0.5
: [2,]  0.5  1.0  0.5
: [3,]  0.5  0.5  1.0
: 
: [1] 0.5

*** 逆行列 =solve()=

- 逆行列とは、ある行列にかけることで、その行列を単位行列にしてしまう行列のこと
- 連立 1 次方程式を一瞬で解くことができる（𝑥=𝐴−1𝑏）など、行列を計算する上で非常に有益かつ重要

#+begin_src R
mate_i <- solve(mate)
mate_i

mate %*% mate_i
#+end_src

#+RESULTS:
#+begin_example

     [,1] [,2] [,3]
[1,]  1.5 -0.5 -0.5
[2,] -0.5  1.5 -0.5
[3,] -0.5 -0.5  1.5

              [,1] [,2] [,3]
[1,]  1.000000e+00    0    0
[2,] -5.551115e-17    1    0
[3,] -1.110223e-16    0    1
#+end_example

*** 連立方程式の行列解 =solve()=

- 連立方程式
$2x + 3y = 1$
$5x + y = 3$

行列表示にすると、以下のように書ける
$\begin{pmatrix} 2 & 3 \\ 5 & 1 \end{pmatrix} \begin{pmatrix} x \\ y \end{pmatrix} = \begin{pmatrix} 1 \\ 3 \end{pmatrix}$

#+begin_src R
mat <- matrix(c(2, 5, 3, 1), ncol = 2)
ans <- c(1, 3)
mat
ans
#+end_src

#+RESULTS:
:      [,1] [,2]
: [1,]    2    3
: [2,]    5    1
: [1] 1 3

逆行列
$\begin{pmatrix} 2 & 3 \\ 5 & 1 \end{pmatrix}^{-1}$
を求めたい

そのために、行列式を求める (行列式が 0 だと逆行列を持たない)
$|A|$

#+begin_src R
A <- 2 * 1 - 5 * 3
A
det(mat) # 検算
#+end_src

#+RESULTS:
: [1] -13
: [1] -13

行列式が、算出できたら、逆行列は以下で求められる
$\begin{pmatrix} 2 & 3 \\ 5 & 1 \end{pmatrix}^{-1} = \frac{1}{|A|} \begin{pmatrix} 1 & -3 \\ -5 & 2 \end{pmatrix}$

#+begin_src R
inv <- (1/A) * matrix(c(1, -5, -3, 2), ncol = 2)
inv
solve(mat) # 検算
#+end_src

#+RESULTS:
:             [,1]       [,2]
: [1,] -0.07692308  0.2307692
: [2,]  0.38461538 -0.1538462
:             [,1]       [,2]
: [1,] -0.07692308  0.2307692
: [2,]  0.38461538 -0.1538462

これで、連立方程式をとく
$\begin{pmatrix} x \\ y \end{pmatrix} = \begin{pmatrix} 2 & 3 \\ 5 & 1 \end{pmatrix}^{-1} \begin{pmatrix} 1 \\ 3 \end{pmatrix}$

#+begin_src R
inv %*% ans
solve(mat, ans) # 検算
#+end_src

#+RESULTS:
:             [,1]
: [1,]  0.61538462
: [2,] -0.07692308
: [1]  0.61538462 -0.07692308

- [[http://cse.naro.affrc.go.jp/takezawa/r-tips/r/20.html][20. 行列計算]] の例
#+begin_src R
a <- matrix(c(0,1,2,3,4,5,6,7,9), 3,3) #      3y + 6z =  1
b <- matrix(c(1,0,-2))                 #  x + 4y + 7z =  0
                                       # 2x + 5y + 9z = -2

a
b
solve(a,b)
#+end_src

#+RESULTS:
#+begin_example
     [,1] [,2] [,3]
[1,]    0    3    6
[2,]    1    4    7
[3,]    2    5    9
     [,1]
[1,]    1
[2,]    0
[3,]   -2
          [,1]
[1,] -2.333333
[2,]  2.333333
[3,] -1.000000
#+end_example

*** 固有値/固有値ベクトル =eigen()=

- eigen value = 固有値
- eigen vector = 固有値ベクトル
#+begin_src R
eigen(mate)
#+end_src

#+RESULTS:
: eigen() decomposition
: $values
: [1] 2.0 0.5 0.5
: 
: $vectors
:            [,1]       [,2]       [,3]
: [1,] -0.5773503  0.0000000  0.8164966
: [2,] -0.5773503 -0.7071068 -0.4082483
: [3,] -0.5773503  0.7071068 -0.4082483

*** アダマール積 (Hadamard Product) / クロネッカー積

_アダマール積_
- 同じサイズの行列に対して、成分毎に積をとることによって定まる行列の積
- Element-wise product

同じサイズ m x n の 2 つの行列 $A = (a_{i,j}), B = (b_{i,j})$ のアダマール積

$A \odot B = (a_{i,j} \cdot b_{i.j})$

#+begin_src R
A <- matrix(seq(1,9,1), 3)
B <- matrix(seq(1,9,1), 3)

A * B # アダマール積
#+end_src

#+RESULTS:
: 
:      [,1] [,2] [,3]
: [1,]    1   16   49
: [2,]    4   25   64
: [3,]    9   36   81


_クロネッカー積_

#+begin_src R
A <- matrix(seq(1,9,1), 3)
B <- matrix(seq(1,9,1), 3)

A %x% B # クロネッカー積
#+end_src

#+RESULTS:
#+begin_example

      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    1    4    7    4   16   28    7   28   49
 [2,]    2    5    8    8   20   32   14   35   56
 [3,]    3    6    9   12   24   36   21   42   63
 [4,]    2    8   14    5   20   35    8   32   56
 [5,]    4   10   16   10   25   40   16   40   64
 [6,]    6   12   18   15   30   45   24   48   72
 [7,]    3   12   21    6   24   42    9   36   63
 [8,]    6   15   24   12   30   48   18   45   72
 [9,]    9   18   27   18   36   54   27   54   81
#+end_example

* 階乗!

#+begin_src R
factorial(5) # 5!
#+end_src

#+RESULTS:
: [1] 120

* 順列 (Permutation)

- 重複なく並べる場合の数
- base package にはない

#+begin_src R
# n 個の対象から、r個を重複なく並べる順列の数 = nPr = n! / (n - r)!
n <- 3
r <- 2
factorial(n) / factorial(n - r)

e1071::permutations(3)
#+end_src

#+RESULTS:
#+begin_example

[1] 6

     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    2    1    3
[3,]    2    3    1
[4,]    1    3    2
[5,]    3    1    2
[6,]    3    2    1
#+end_example

* 組み合わせ (Combination)
- 重複なく選ぶ場合の数
- 順番は問わない
- nCr = n! / r!(n - r)!

#+begin_src R
n <- 5
r <- 3
factorial(n) / (factorial(3) * factorial(n - r))
choose(n, r) # 組み合わせの数
combn(n, r)  # 組み合わせを matrix 表示
#+end_src

#+RESULTS:
: 
: [1] 10
: 
: [1] 10
: 
:      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
: [1,]    1    1    1    1    1    1    2    2    2     3
: [2,]    2    2    2    3    3    4    3    3    4     4
: [3,]    3    4    5    4    5    5    4    5    5     5
* 参考

- 行列
  - [[http://cse.naro.affrc.go.jp/takezawa/r-tips/r/20.html][20. 行列計算]]
  - [[https://stats.biopapyrus.jp/r/basic/matrix.html][R による行列の演算@biostatistics
]]
- [[https://qiita.com/advent-calendar/2016/math_for_ml][機械学習に必要な高校数学やり直しアドベントカレンダー Advent Calendar 2016]]
