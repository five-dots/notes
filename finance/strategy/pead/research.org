#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :results output :session *R:pead* :width 560 :height 420

* TODO [0/5]
** TODO x1_pct, x2_pct それぞれで集約して計算したものを混合する方法
** TODO ロバスト回帰を使うべきか
- rlm() v.s. lm() で比較

** TODO ばらつきの大きさを考慮する方法
- 区間推定

** TODO ボラティリティを下げる方法
- 変動の大きすぎるものはフィルタする等

** TODO 新たな変数
- 小型株効果 open price, dollar volume

* Reference

- 層別に縮約された平均系列に対する線形回帰
  https://www.jstage.jst.go.jp/article/jbhmk/41/1/41_3/_pdf

* Functions

#+begin_src R :results silent
calc_percentile <- function(data, group_var) {
  group_var <- enquo(group_var)
  data %>%
    group_by(!!group_var) %>%
    summarise(mean = mean(y), sd = sd(y), sharpe = mean / sd)
}

plot_points <- function(data, x_var, y_var, alpha = 1) {
  x_var <- enquo(x_var)
  y_var <- enquo(y_var)
  data %>%
    ggplot(aes(x = !!x_var, y = !!y_var)) +
    geom_point(alpha = alpha) +
    geom_hline(yintercept = 0, color = "red", size = 0.5)
}

fit_sinusoidal <- function(y, x) {
  ssp <- stats::spectrum(y)
  per <- 1 / ssp$freq[ssp$spec == max(ssp$spec)]
  lm(y ~ sin(2 * pi/per * x) + cos(2 * pi/per * x))
}
#+end_src

* Load Libraries and Data

#+begin_src R :results silent
infra_path <- glue::glue("{.dropbox}/memo/strategy/pead/infra.R")
source(infra_path)
#+end_src

#+begin_src R :results silent
## TODO 外れ値の扱い
## TODO 全データ利用と直近データ利用で分析を分ける
## TODO Percentile する場合の group_by
universe <- e$universe
all_data <- e$edata %>%
  filter(-1 <= y, y <= 1) %>%
  mutate(y_pct      = ceiling(percent_rank(y) * 100),
         x1_pct     = ceiling(percent_rank(x1) * 100),
         x1_pre_pct = ceiling(percent_rank(x1_pre) * 100),
         x2_pct     = ceiling(percent_rank(x2) * 100),
         z1_pct     = ceiling(percent_rank(z1) * 100),
         z1_pre_pct = ceiling(percent_rank(z1_pre) * 100),
         z2_pct     = ceiling(percent_rank(z2) * 100),
         dvol_pct   = ceiling(percent_rank(dvol_200) * 100)) %>%
  filter(y_pct != 0, x1_pct != 0, x1_pre_pct != 0, x2_pct != 0,
         z1_pct != 0, z1_pre_pct != 0, z2_pct != 0,
         dvol_pct != 0)

x1_percentile <- calc_percentile(all_data, x1_pct)
x2_percentile <- calc_percentile(all_data, x2_pct)
z1_percentile <- calc_percentile(all_data, z1_pct)
z2_percentile <- calc_percentile(all_data, z2_pct)
x1_pre_percentile <- calc_percentile(all_data, x1_pre_pct)
z1_pre_percentile <- calc_percentile(all_data, z1_pre_pct)

dvol_percentile <- calc_percentile(all_data, dvol_pct)
#+end_src

* Plots
** All Data
*** y-Hist
**** Normal

#+begin_src R :results graphics :file (get-babel-file)
ggplot(all_data, aes(x = y)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.01, 
                 origin = 0, fill = "white", color = "black") +
  stat_function(fun = dnorm, args = list(mean = mean(all_data$y), sd = sd(all_data$y))) +
  xlim(c(-0.3, 0.3))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-juYk4s.png]]

**** Student-t

#+begin_src R
t_fit <- suppressWarnings(fitdist("std", all_data$y))
t_fit$pars
#+end_src

#+RESULTS:
:            mu         sigma         shape 
: -0.0006017228  0.0570868594  2.9214695626

#+begin_src R :results graphics :file (get-babel-file)
ggplot(all_data, aes(x = y)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.01,
                 origin = 0, fill = "white", color = "black") +
  stat_function(fun = ddist,
                args = list(distribution = "std",
                            mu = t_fit$pars[["mu"]],
                            sigma = t_fit$pars[["sigma"]],
                            shape = t_fit$pars[["shape"]])) +
  xlim(c(-0.3, 0.3))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-lUkLC1.png]]

*** X1 (決算後の Pre-Market の動き)

- 上下 1% を外れ値として除外
#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  filter(between(x1_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x1, y, alpha = 0.05) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-oc4JJo.png]]

*** X1_Pre

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  filter(between(x1_pre_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x1_pre, y, alpha = 0.05) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-b4cTW2.png]]

*** X2 (決算前日の動き)

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  filter(between(x2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x2, y, alpha = 0.05) + geom_smooth(method = lm)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-5IGwRb.png]]

*** Z1

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  filter(between(z1_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(z1, y, alpha = 0.05) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-wGYLmg.png]]

*** Z1_Pre

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  filter(between(z1_pre_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(z1_pre, y, alpha = 0.05) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-1rGI7l.png]]

*** Z2

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  filter(between(z2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(z2, y, alpha = 0.05) + geom_smooth(method = lm)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-w58FFl.png]]

*** 200-Day Dolloar Volume

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  filter(between(dvol_pct, 2, 99), between(y_pct, 2, 99)) %>%
  mutate(dvol_log = log10(dvol_200)) %>%
  plot_points(dvol_log, y, alpha = 0.05) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-Oza1SD.png]]

** Mean by Percentile
*** X1 (Mean Ret)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(x1_percentile, x1_pct, mean) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-wdDXi6.png]]

*** X1_Pre (Mean Ret)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(x1_pre_percentile, x1_pre_pct, mean) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-2NCZob.png]]

*** X2 (Mean Ret)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(x2_percentile, x2_pct, mean) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-nvPa4u.png]]

*** X1 (Sharpe Ratio)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(x1_percentile, x1_pct, sharpe) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-gObECu.png]]

*** X1_Pre (Sharpe Ratio)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(x1_pre_percentile, x1_pre_pct, sharpe) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-yvd5f6.png]]

*** X2 (Sharpe Ratio)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(x2_percentile, x2_pct, sharpe) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-zse9Ea.png]]

*** Z1 (Sharpe Ratio)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(z1_percentile, z1_pct, sharpe) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-Fu3QL3.png]]

*** Z1_Pre (Sharpe Ratio)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(z1_pre_percentile, z1_pre_pct, sharpe) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-COmtGs.png]]

*** Z2 (Sharpe Ratio)

#+begin_src R :results graphics :file (get-babel-file)
plot_points(z2_percentile, z2_pct, sharpe) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-LDnNHx.png]]

** Boxplot by Percentile
*** X1 (Mean Ret)

- Pre-Market のバラツキが大きいほど、リターンのバラツキも大きい
- ネガティブサプライズほど、リターンのバラツキを大きくする
#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  group_by(group = as.factor(as.integer(x1_pct / 5) * 5)) %>%
  ggplot(aes(x = group, y = y)) + geom_boxplot() +
  geom_hline(yintercept = 0, color = "red")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-YT0fQh.png]]

*** X1_Pre (Mean Ret)

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  group_by(group = as.factor(as.integer(x1_pre_pct / 5) * 5)) %>%
  ggplot(aes(x = group, y = y)) + geom_boxplot() +
  geom_hline(yintercept = 0, color = "red")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-xj72zs.png]]

*** X2 (Mean Ret)

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  group_by(group = as.factor(as.integer(x2_pct / 5) * 5)) %>%
  ggplot(aes(x = group, y = y)) + geom_boxplot() +
  geom_hline(yintercept = 0, color = "red")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-IpAWVg.png]]

* Modeling by Mean/Sharpe
** X1
*** lm() + 三角関数
**** Mean (R2 = 0.46)

#+begin_src R :results graphics :file (get-babel-file)
fit_x1_mean_sin <- fit_sinusoidal(x1_percentile$mean, x1_percentile$x1_pct)
#+end_src

#+begin_src R
summary(fit_x1_mean_sin)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ sin(2 * pi/per * x)
cos(2 * pi/per * x))

Residuals:
       Min         1Q     Median         3Q        Max 
-0.0042478 -0.0013705 -0.0002355  0.0010065  0.0113811 

Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
(Intercept)          0.0014967  0.0002429   6.162 1.64e-08 ***
sin(2 * pi/per * x) -0.0028217  0.0003435  -8.214 9.41e-13 ***
cos(2 * pi/per * x)  0.0014032  0.0003435   4.085 9.08e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.002429 on 97 degrees of freedom
Multiple R-squared:  0.4645,	Adjusted R-squared:  0.4535 
F-statistic: 42.07 on 2 and 97 DF,  p-value: 6.976e-14
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x1_percentile <- x1_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x1_mean_sin)))
ggplot(x1_percentile, aes(x = x1_pct, y = mean)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-VOKrGa.png]]

**** Sharpe (R2 = 0.54)

#+begin_src R :results graphics :file (get-babel-file)
fit_x1_sharpe_sin <- fit_sinusoidal(x1_percentile$sharpe, x1_percentile$x1_pct)
#+end_src

#+begin_src R
summary(fit_x1_sharpe_sin)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ sin(2 * pi/per * x)
cos(2 * pi/per * x))

Residuals:
      Min        1Q    Median        3Q       Max 
-0.093203 -0.031193 -0.002203  0.026370  0.147517 

Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
(Intercept)          0.028562   0.004635   6.163 1.63e-08 ***
sin(2 * pi/per * x) -0.067440   0.006555 -10.289  < 2e-16 ***
cos(2 * pi/per * x)  0.018342   0.006555   2.798   0.0062 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04635 on 97 degrees of freedom
Multiple R-squared:  0.5396,	Adjusted R-squared:  0.5301 
F-statistic: 56.85 on 2 and 97 DF,  p-value: < 2.2e-16
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x1_percentile <- x1_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x1_sharpe_sin)))
ggplot(x1_percentile, aes(x = x1_pct, y = sharpe)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-H0EG51.png]]

** Z1
*** lm() + 三角関数
**** Mean (R2 = 0.43)

- 三角関数の当てはめ 
#+begin_src R :results graphics :file (get-babel-file)
fit_z1_mean_sin <- fit_sinusoidal(z1_percentile$mean, z1_percentile$z1_pct)
#+end_src

#+begin_src R
summary(fit_z1_mean_sin)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ sin(2 * pi/per * x)
cos(2 * pi/per * x))

Residuals:
       Min         1Q     Median         3Q        Max 
-0.0080254 -0.0013857  0.0001356  0.0011328  0.0080979 

Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
(Intercept)          0.0014970  0.0002419   6.187 1.46e-08 ***
sin(2 * pi/per * x) -0.0027469  0.0003422  -8.028 2.34e-12 ***
cos(2 * pi/per * x)  0.0010544  0.0003422   3.081  0.00268 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.002419 on 97 degrees of freedom
Multiple R-squared:  0.4326,	Adjusted R-squared:  0.4209 
F-statistic: 36.97 on 2 and 97 DF,  p-value: 1.162e-12
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
z1_percentile <- z1_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_z1_mean_sin)))
ggplot(z1_percentile, aes(x = z1_pct, y = mean)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-h0KSGa.png]]

**** Sharpe (R2 = 0.49)

- 三角関数の当てはめ 
#+begin_src R :results graphics :file (get-babel-file)
fit_z1_sharpe_sin <- fit_sinusoidal(z1_percentile$sharpe, z1_percentile$z1_pct)
#+end_src

#+begin_src R
summary(fit_z1_sharpe_sin)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ sin(2 * pi/per * x)
cos(2 * pi/per * x))

Residuals:
      Min        1Q    Median        3Q       Max 
-0.133699 -0.027999  0.002657  0.028224  0.101518 

Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
(Intercept)          0.030203   0.004702   6.423 4.96e-09 ***
sin(2 * pi/per * x) -0.062320   0.006650  -9.371 3.05e-15 ***
cos(2 * pi/per * x)  0.016605   0.006650   2.497   0.0142 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04702 on 97 degrees of freedom
Multiple R-squared:  0.4923,	Adjusted R-squared:  0.4818 
F-statistic: 47.03 on 2 and 97 DF,  p-value: 5.269e-15
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
z1_percentile <- z1_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_z1_sharpe_sin)))
ggplot(z1_percentile, aes(x = z1_pct, y = sharpe)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-wBH6gQ.png]]

** X2
*** lm() + 多項式
**** Mean
***** Degree = 2 (R2 = 0.20)

#+begin_src R
fit_x2_mean_poly2 <- lm(mean ~ poly(x2_pct, degree = 2, raw = TRUE), data = x2_percentile)
summary(fit_x2_mean_poly2)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = mean ~ poly(x2_pct, degree = 2, raw = TRUE), data = x2_percentile)

Residuals:
       Min         1Q     Median         3Q        Max 
-0.0055137 -0.0014867 -0.0001769  0.0011984  0.0043469 

Coefficients:
                                        Estimate Std. Error t value Pr(>|t|)
(Intercept)                            3.774e-03  6.375e-04   5.920 4.87e-08
poly(x2_pct, degree = 2, raw = TRUE)1 -6.355e-05  2.914e-05  -2.181   0.0316
poly(x2_pct, degree = 2, raw = TRUE)2  2.752e-07  2.795e-07   0.985   0.3272
                                         
(Intercept)                           ***
poly(x2_pct, degree = 2, raw = TRUE)1 *  
poly(x2_pct, degree = 2, raw = TRUE)2    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.002083 on 97 degrees of freedom
Multiple R-squared:  0.2083,	Adjusted R-squared:  0.192 
F-statistic: 12.76 on 2 and 97 DF,  p-value: 1.204e-05
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x2_percentile <- x2_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x2_mean_poly2)))
ggplot(x2_percentile, aes(x = x2_pct, y = mean)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-RDWcS3.png]]

***** Degree = 3 (R2 = 0.30)*

#+begin_src R
fit_x2_mean_poly3 <- lm(mean ~ poly(x2_pct, degree = 3, raw = TRUE), data = x2_percentile)
summary(fit_x2_mean_poly3)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = mean ~ poly(x2_pct, degree = 3, raw = TRUE), data = x2_percentile)

Residuals:
       Min         1Q     Median         3Q        Max 
-0.0053875 -0.0013870 -0.0002548  0.0014222  0.0041580 

Coefficients:
                                        Estimate Std. Error t value Pr(>|t|)
(Intercept)                            5.686e-03  8.206e-04   6.929 4.85e-10
poly(x2_pct, degree = 3, raw = TRUE)1 -2.852e-04  7.001e-05  -4.074 9.53e-05
poly(x2_pct, degree = 3, raw = TRUE)2  5.735e-06  1.606e-06   3.570 0.000560
poly(x2_pct, degree = 3, raw = TRUE)3 -3.604e-08  1.046e-08  -3.446 0.000846
                                         
(Intercept)                           ***
poly(x2_pct, degree = 3, raw = TRUE)1 ***
poly(x2_pct, degree = 3, raw = TRUE)2 ***
poly(x2_pct, degree = 3, raw = TRUE)3 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.001975 on 96 degrees of freedom
Multiple R-squared:  0.2954,	Adjusted R-squared:  0.2734 
F-statistic: 13.42 on 3 and 96 DF,  p-value: 2.2e-07
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x2_percentile <- x2_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x2_mean_poly3)))
ggplot(x2_percentile, aes(x = x2_pct, y = mean)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-ohP19E.png]]

***** Degree = 4 (R2 = 0.30)

- Degree = 3 から改善は見られず
#+begin_src R
fit_x2_mean_poly4 <- lm(mean ~ poly(x2_pct, degree = 4, raw = TRUE), data = x2_percentile)
summary(fit_x2_mean_poly4)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = mean ~ poly(x2_pct, degree = 4, raw = TRUE), data = x2_percentile)

Residuals:
       Min         1Q     Median         3Q        Max 
-0.0055999 -0.0012799 -0.0001367  0.0014164  0.0040782 

Coefficients:
                                        Estimate Std. Error t value Pr(>|t|)
(Intercept)                            5.015e-03  1.050e-03   4.779 6.42e-06
poly(x2_pct, degree = 4, raw = TRUE)1 -1.581e-04  1.425e-04  -1.110    0.270
poly(x2_pct, degree = 4, raw = TRUE)2  1.374e-07  5.696e-06   0.024    0.981
poly(x2_pct, degree = 4, raw = TRUE)3  4.988e-08  8.453e-08   0.590    0.557
poly(x2_pct, degree = 4, raw = TRUE)4 -4.253e-10  4.153e-10  -1.024    0.308
                                         
(Intercept)                           ***
poly(x2_pct, degree = 4, raw = TRUE)1    
poly(x2_pct, degree = 4, raw = TRUE)2    
poly(x2_pct, degree = 4, raw = TRUE)3    
poly(x2_pct, degree = 4, raw = TRUE)4    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.001974 on 95 degrees of freedom
Multiple R-squared:  0.3031,	Adjusted R-squared:  0.2738 
F-statistic: 10.33 on 4 and 95 DF,  p-value: 5.464e-07
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x2_percentile <- x2_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x2_mean_poly4)))
ggplot(x2_percentile, aes(x = x2_pct, y = mean)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-Ay2Amx.png]]

***** 分散分析 anova()

- 次数 2 vs 次数 3 vs 次数 4
- 次数 3 の p 値が最も小さい
#+begin_src R
anova(fit_x2_mean_poly2, fit_x2_mean_poly3, fit_x2_mean_poly4)
#+end_src

#+RESULTS:
#+begin_example
Analysis of Variance Table

Model 1: mean ~ poly(x2_pct, degree = 2, raw = TRUE)
Model 2: mean ~ poly(x2_pct, degree = 3, raw = TRUE)
Model 3: mean ~ poly(x2_pct, degree = 4, raw = TRUE)
  Res.Df        RSS Df  Sum of Sq      F    Pr(>F)    
1     97 0.00042077                                   
2     96 0.00037446  1 4.6311e-05 11.879 0.0008473 ***
3     95 0.00037037  1 4.0900e-06  1.049 0.3083282    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#+end_example

**** Sharpe
***** Degree = 2 (R2 = 0.14)

#+begin_src R
fit_x2_sharpe_poly2 <- lm(sharpe ~ poly(x2_pct, degree = 2, raw = TRUE), data = x2_percentile)
summary(fit_x2_sharpe_poly2)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = sharpe ~ poly(x2_pct, degree = 2, raw = TRUE), data = x2_percentile)

Residuals:
      Min        1Q    Median        3Q       Max 
-0.107883 -0.033113 -0.002998  0.024949  0.106696 

Coefficients:
                                        Estimate Std. Error t value Pr(>|t|)
(Intercept)                            6.288e-02  1.364e-02   4.609 1.23e-05
poly(x2_pct, degree = 2, raw = TRUE)1 -5.767e-04  6.236e-04  -0.925    0.357
poly(x2_pct, degree = 2, raw = TRUE)2 -3.171e-07  5.982e-06  -0.053    0.958
                                         
(Intercept)                           ***
poly(x2_pct, degree = 2, raw = TRUE)1    
poly(x2_pct, degree = 2, raw = TRUE)2    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04457 on 97 degrees of freedom
Multiple R-squared:  0.1381,	Adjusted R-squared:  0.1203 
F-statistic: 7.772 on 2 and 97 DF,  p-value: 0.0007402
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x2_percentile <- x2_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x2_sharpe_poly2)))
ggplot(x2_percentile, aes(x = x2_pct, y = sharpe)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-TfDx3a.png]]

***** Degree = 3 (R2 = 0.18)*

#+begin_src R
fit_x2_sharpe_poly3 <- lm(sharpe ~ poly(x2_pct, degree = 3, raw = TRUE), data = x2_percentile)
summary(fit_x2_sharpe_poly3)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = sharpe ~ poly(x2_pct, degree = 3, raw = TRUE), data = x2_percentile)

Residuals:
      Min        1Q    Median        3Q       Max 
-0.106092 -0.029574 -0.005549  0.029345  0.095384 

Coefficients:
                                        Estimate Std. Error t value Pr(>|t|)
(Intercept)                            9.000e-02  1.816e-02   4.956 3.09e-06
poly(x2_pct, degree = 3, raw = TRUE)1 -3.721e-03  1.549e-03  -2.402   0.0182
poly(x2_pct, degree = 3, raw = TRUE)2  7.713e-05  3.555e-05   2.170   0.0325
poly(x2_pct, degree = 3, raw = TRUE)3 -5.112e-07  2.314e-07  -2.209   0.0296
                                         
(Intercept)                           ***
poly(x2_pct, degree = 3, raw = TRUE)1 *  
poly(x2_pct, degree = 3, raw = TRUE)2 *  
poly(x2_pct, degree = 3, raw = TRUE)3 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04371 on 96 degrees of freedom
Multiple R-squared:  0.1798,	Adjusted R-squared:  0.1542 
F-statistic: 7.015 on 3 and 96 DF,  p-value: 0.0002577
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x2_percentile <- x2_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x2_sharpe_poly2)))
ggplot(x2_percentile, aes(x = x2_pct, y = sharpe)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-Ia1zer.png]]

***** Degree = 4 (R2 = 0.19)

#+begin_src R
fit_x2_sharpe_poly4 <- lm(sharpe ~ poly(x2_pct, degree = 4, raw = TRUE), data = x2_percentile)
summary(fit_x2_sharpe_poly4)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = sharpe ~ poly(x2_pct, degree = 4, raw = TRUE), data = x2_percentile)

Residuals:
      Min        1Q    Median        3Q       Max 
-0.112129 -0.027854 -0.001955  0.028712  0.097435 

Coefficients:
                                        Estimate Std. Error t value Pr(>|t|)   
(Intercept)                            7.094e-02  2.314e-02   3.065  0.00283 **
poly(x2_pct, degree = 4, raw = TRUE)1 -1.089e-04  3.142e-03  -0.035  0.97242   
poly(x2_pct, degree = 4, raw = TRUE)2 -8.195e-05  1.256e-04  -0.652  0.51567   
poly(x2_pct, degree = 4, raw = TRUE)3  1.931e-06  1.864e-06   1.036  0.30295   
poly(x2_pct, degree = 4, raw = TRUE)4 -1.209e-08  9.157e-09  -1.320  0.18996   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04354 on 95 degrees of freedom
Multiple R-squared:  0.1946,	Adjusted R-squared:  0.1607 
F-statistic: 5.737 on 4 and 95 DF,  p-value: 0.0003521
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
x2_percentile <- x2_percentile %>%
  mutate(fitted = as.numeric(fitted(fit_x2_sharpe_poly4)))
ggplot(x2_percentile, aes(x = x2_pct, y = sharpe)) +
  geom_point() +
  geom_line(aes(y = fitted))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-pA3rdm.png]]

***** 分散分析 anova()

- 次数 2 vs 次数 3 vs 次数 4
- 次数 3 の p 値が最も小さい
#+begin_src R
anova(fit_x2_sharpe_poly2, fit_x2_sharpe_poly3, fit_x2_sharpe_poly4)
#+end_src

#+RESULTS:
#+begin_example
Analysis of Variance Table

Model 1: sharpe ~ poly(x2_pct, degree = 2, raw = TRUE)
Model 2: sharpe ~ poly(x2_pct, degree = 3, raw = TRUE)
Model 3: sharpe ~ poly(x2_pct, degree = 4, raw = TRUE)
  Res.Df     RSS Df Sum of Sq      F  Pr(>F)  
1     97 0.19272                              
2     96 0.18340  1 0.0093203 4.9164 0.02899 *
3     95 0.18010  1 0.0033038 1.7427 0.18996  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#+end_example

* Modeling by All Data
** X1_Pre*
*** gam() (R2 = 0.0029, AIC = -145,152)

#+begin_src R
fit_x1_pre_gam <- gam(y ~ s(x1_pre), data = all_data)
summary(fit_x1_pre_gam)
AIC(fit_x1_pre_gam)
#+end_src

#+RESULTS:
#+begin_example

Family: gaussian 
Link function: identity 

Formula:
y ~ s(x1_pre)

Parametric coefficients:
              Estimate Std. Error t value Pr(>|t|)  
(Intercept) -0.0004512  0.0002348  -1.921   0.0547 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
            edf Ref.df     F p-value    
s(x1_pre) 6.201  7.386 18.42  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00291   Deviance explained = 0.304%
GCV = 0.0025564  Scale est. = 0.002556  n = 46356
[1] -145152.4
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x1_pre_gam))) %>%
  filter(between(x1_pre_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x1_pre, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-0oosDp.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_x1_pre_gam)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-ZXazCV.png]]

*** gam() + family = scat (R2 = 0.0033, AIC = -153,649)

#+begin_src R
fit_x1_pre_gam_t <- gam(y ~ s(x1_pre), family = scat, data = all_data)
summary(fit_x1_pre_gam_t)
AIC(fit_x1_pre_gam_t)
#+end_src

#+RESULTS:
#+begin_example

Family: Scaled t(3.139,0.03) 
Link function: identity 

Formula:
y ~ s(x1)

Parametric coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) 0.0009262  0.0001540   6.013 1.82e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df Chi.sq p-value    
s(x1) 8.388  8.896  181.5  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00328   Deviance explained = 0.153%
-REML = -1.005e+05  Scale est. = 1         n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x1_pre_gam_t))) %>%
  filter(between(x1_pre_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x1_pre, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-533vjV.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_x1_pre_gam_t)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-9vsRsf.png]]

*** lm() (R2 = 0.0022, AIC = -145,126)

#+begin_src R
fit_x1_pre_lm <- lm(y ~ x1_pre, data = all_data)
summary(fit_x1_pre_lm)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ x1_pre, data = all_data)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.46390 -0.02379 -0.00002  0.02350  0.49289 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.0005734  0.0002352  -2.438   0.0148 *  
x1_pre       0.0371496  0.0036377  10.212   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.05057 on 46354 degrees of freedom
Multiple R-squared:  0.002245,	Adjusted R-squared:  0.002223 
F-statistic: 104.3 on 1 and 46354 DF,  p-value: < 2.2e-16
#+end_example

*** lm() + 三角関数 (R2 = 0.0025, AIC = -145,138)

#+begin_src R :results graphics :file (get-babel-file)
fit_x1_pre_sin <- fit_sinusoidal(all_data$y, all_data$x1_pre)
#+end_src

#+begin_src R
summary(fit_x1_pre_sin)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ sin(2 * pi/per * x)
cos(2 * pi/per * x))

Residuals:
     Min       1Q   Median       3Q      Max 
-0.45760 -0.02384 -0.00012  0.02347  0.49822 

Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
(Intercept)         -0.022250   0.007295  -3.050  0.00229 ** 
sin(2 * pi/per * x)  0.019203   0.001816  10.577  < 2e-16 ***
cos(2 * pi/per * x)  0.021868   0.007356   2.973  0.00295 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.05057 on 46353 degrees of freedom
Multiple R-squared:  0.002549,	Adjusted R-squared:  0.002506 
F-statistic: 59.23 on 2 and 46353 DF,  p-value: < 2.2e-16
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x1_pre_sin))) %>%
  filter(between(x1_pre_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x1_pre, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-AIiZFe.png]]

#+begin_src R
#+end_src

** X2
*** gam() (R2 = 0.0012, AIC = -190,967)

#+begin_src R
fit_x2_gam <- gam(y ~ s(x2), data = all_data)
summary(fit_x2_gam)
#+end_src

#+RESULTS:
#+begin_example

Family: gaussian 
Link function: identity 

Formula:
y ~ s(x2)

Parametric coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.0014963  0.0001935   7.734 1.06e-14 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df     F  p-value    
s(x2) 7.676  8.557 8.408 3.81e-12 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00121   Deviance explained = 0.134%
GCV = 0.0021695  Scale est. = 0.0021691  n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x2_gam))) %>%
  filter(between(x2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x2, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-gpEQ6K.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_x2_gam)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-xGYj8B.png]]

*** gam() + family = scat (R2 = 0.0007, AIC = -200,984)

#+begin_src R
fit_x2_gam_t <- gam(y ~ s(x2), family = scat, data = all_data)
summary(fit_x2_gam_t)
#+end_src

#+RESULTS:
#+begin_example

Family: Scaled t(3.122,0.03) 
Link function: identity 

Formula:
y ~ s(x2)

Parametric coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) 0.0007249  0.0001539    4.71 2.48e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df Chi.sq p-value    
s(x2) 6.104  7.303  105.9  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.000749   Deviance explained = 0.0945%
-REML = -1.0048e+05  Scale est. = 1         n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x2_gam_t))) %>%
  filter(between(x2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x2, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-i2Nsj7.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_x2_gam_t)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-g1viwp.png]]

*** lm() + 多項式
**** Degree = 1 (R2 = 0.0005)

#+begin_src R
fit_x2_poly1 <- lm(y ~ poly(x2, degree = 1, raw = TRUE), data = all_data)
summary(fit_x2_poly1)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ poly(x2, degree = 1, raw = TRUE), data = all_data)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.46561 -0.02278 -0.00087  0.02189  0.62324 

Coefficients:
                                   Estimate Std. Error t value Pr(>|t|)    
(Intercept)                       0.0015040  0.0001935   7.771 7.92e-15 ***
poly(x2, degree = 1, raw = TRUE) -0.0496199  0.0088947  -5.579 2.44e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04659 on 57948 degrees of freedom
Multiple R-squared:  0.0005368,	Adjusted R-squared:  0.0005195 
F-statistic: 31.12 on 1 and 57948 DF,  p-value: 2.436e-08
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x2_poly1))) %>%
  filter(between(x2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x2, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-LrkDkP.png]]

**** Degree = 2 (R2 = 0.0005)

#+begin_src R
fit_x2_poly2 <- lm(y ~ poly(x2, degree = 2, raw = TRUE), data = all_data)
summary(fit_x2_poly2)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ poly(x2, degree = 2, raw = TRUE), data = all_data)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.46611 -0.02278 -0.00087  0.02189  0.62319 

Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
(Intercept)                        0.0015002  0.0001999   7.504 6.30e-14 ***
poly(x2, degree = 2, raw = TRUE)1 -0.0496697  0.0089182  -5.569 2.57e-08 ***
poly(x2, degree = 2, raw = TRUE)2  0.0081864  0.1060542   0.077    0.938    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04659 on 57947 degrees of freedom
Multiple R-squared:  0.0005369,	Adjusted R-squared:  0.0005024 
F-statistic: 15.56 on 2 and 57947 DF,  p-value: 1.75e-07
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x2_poly2))) %>%
  filter(between(x2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x2, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-mWEtDK.png]]

**** Degree = 3 (R2 = 0.0012)*

#+begin_src R
fit_x2_poly3 <- lm(y ~ poly(x2, degree = 3, raw = TRUE), data = all_data)
summary(fit_x2_poly3)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ poly(x2, degree = 3, raw = TRUE), data = all_data)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.44750 -0.02282 -0.00089  0.02186  0.62460 

Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
(Intercept)                        0.0015941  0.0002004   7.953 1.86e-15 ***
poly(x2, degree = 3, raw = TRUE)1 -0.0729922  0.0096890  -7.534 5.01e-14 ***
poly(x2, degree = 3, raw = TRUE)2 -0.2029694  0.1114456  -1.821   0.0686 .  
poly(x2, degree = 3, raw = TRUE)3  3.2618734  0.5305910   6.148 7.92e-10 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04658 on 57946 degrees of freedom
Multiple R-squared:  0.001188,	Adjusted R-squared:  0.001137 
F-statistic: 22.98 on 3 and 57946 DF,  p-value: 7.347e-15
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x2_poly3))) %>%
  filter(between(x2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x2, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-RU7mVQ.png]]

**** Degree = 4 (R2 = 0.0012)

#+begin_src R
fit_x2_poly4 <- lm(y ~ poly(x2, degree = 4, raw = TRUE), data = all_data)
summary(fit_x2_poly4)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ poly(x2, degree = 4, raw = TRUE), data = all_data)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.44745 -0.02281 -0.00088  0.02185  0.62340 

Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
(Intercept)                        0.0015160  0.0002056   7.372 1.70e-13 ***
poly(x2, degree = 4, raw = TRUE)1 -0.0762336  0.0098741  -7.721 1.18e-14 ***
poly(x2, degree = 4, raw = TRUE)2 -0.0059314  0.1606642  -0.037   0.9706    
poly(x2, degree = 4, raw = TRUE)3  3.8374114  0.6291171   6.100 1.07e-09 ***
poly(x2, degree = 4, raw = TRUE)4 -4.5700947  2.6842238  -1.703   0.0887 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.04657 on 57945 degrees of freedom
Multiple R-squared:  0.001238,	Adjusted R-squared:  0.001169 
F-statistic: 17.96 on 4 and 57945 DF,  p-value: 9.475e-15
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_x2_poly4))) %>%
  filter(between(x2_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(x2, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-PN5Xgs.png]]

**** 分散分析 anova()

- 次数 3 の p 値が最も小さい
#+begin_src R
anova(fit_x2_poly1, fit_x2_poly2, fit_x2_poly3, fit_x2_poly4)
#+end_src

#+RESULTS:
#+begin_example
Analysis of Variance Table

Model 1: y ~ poly(x2, degree = 1, raw = TRUE)
Model 2: y ~ poly(x2, degree = 2, raw = TRUE)
Model 3: y ~ poly(x2, degree = 3, raw = TRUE)
Model 4: y ~ poly(x2, degree = 4, raw = TRUE)
  Res.Df    RSS Df Sum of Sq       F    Pr(>F)    
1  57948 125.78                                   
2  57947 125.78  1  0.000013  0.0060   0.93845    
3  57946 125.70  1  0.081984 37.7945 7.911e-10 ***
4  57945 125.69  1  0.006288  2.8988   0.08865 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#+end_example

** X1+X2
*** gam() (R2 = 0.0054, AIC = -191,200)

#+begin_src R
fit_x1x2_gam <- gam(y ~ s(x1) + s(x2), data = all_data)
summary(fit_x1x2_gam)
#+end_src

#+RESULTS:
#+begin_example

Family: gaussian 
Link function: identity 

Formula:
y ~ s(x1)
s(x2)

Parametric coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.0014963  0.0001931    7.75 9.34e-15 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df      F  p-value    
s(x1) 8.474  8.922 27.603  < 2e-16 ***
s(x2) 7.241  8.267  8.169 2.07e-11 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00536   Deviance explained = 0.563%
GCV = 0.0021607  Scale est. = 0.0021601  n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
vis.gam(fit_x1x2_gam, color="cm", theta=30)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-lT5RnW.png]]

#+begin_src R :results graphics :file (get-babel-file)
vis.gam(fit_x1x2_gam, color="cm", plot.type = "contour")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-osRi7U.png]]

*** gam() + family = scat (R2 = 0.0041, AIC = -201,104)

#+begin_src R
fit_x1x2_gam_t <- gam(y ~ s(x1) + s(x2), family = scat, data = all_data); beep()
summary(fit_x1x2_gam_t)
#+end_src

#+RESULTS:
#+begin_example

Family: Scaled t(3.134,0.03) 
Link function: identity 

Formula:
y ~ s(x1)
s(x2)

Parametric coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) 0.0008925  0.0001539   5.801 6.61e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df Chi.sq p-value    
s(x1) 8.378  8.893  190.2  <2e-16 ***
s(x2) 6.282  7.469  111.2  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00406   Deviance explained = 0.251%
-REML = -1.0052e+05  Scale est. = 1         n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
vis.gam(fit_x1x2_gam_t, color="cm", theta=30)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-19GaDo.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_x1x2_gam_t)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-2BIjVH.png]]

** Z1
*** gam() (R2 = 0.0029, AIC = -191,065)

#+begin_src R
fit_z1_gam <- gam(y ~ s(z1), data = all_data)
summary(fit_z1_gam)
#+end_src

#+RESULTS:
#+begin_example

Family: gaussian 
Link function: identity 

Formula:
y ~ s(z1)

Parametric coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.0014963  0.0001933    7.74 1.01e-14 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df     F p-value    
s(z1) 7.498  8.461 19.67  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00289   Deviance explained = 0.302%
GCV = 0.0021658  Scale est. = 0.0021655  n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_z1_gam))) %>%
  filter(between(x1_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(z1, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-jbjWjd.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_z1_gam)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-nGiDGj.png]]

*** gam() + family = scat (R2 = 0.0033, AIC = -201,048)

#+begin_src R
fit_z1_gam_t <- gam(y ~ s(z1), family = scat, data = all_data)
summary(fit_z1_gam_t)
#+end_src

#+RESULTS:
#+begin_example

Family: Scaled t(3.139,0.03) 
Link function: identity 

Formula:
y ~ s(x1)

Parametric coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) 0.0009262  0.0001540   6.013 1.82e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df Chi.sq p-value    
s(x1) 8.388  8.896  181.5  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00328   Deviance explained = 0.153%
-REML = -1.005e+05  Scale est. = 1         n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
all_data %>%
  mutate(fitted = as.numeric(fitted(fit_z1_gam_t))) %>%
  filter(between(x1_pct, 2, 99), between(y_pct, 2, 99)) %>%
  plot_points(z1, y, alpha = 0.05) +
  geom_line(aes(y = fitted), color = "blue")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-2SIxKC.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_z1_gam_t)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-ii0FRJ.png]]

** Z1+Z2
*** gam() (R2 = 0.0035, AIC = -191,093)

#+begin_src R
fit_z1z2_gam <- gam(y ~ s(z1) + s(z2), data = all_data)
summary(fit_z1z2_gam)
#+end_src

#+RESULTS:
#+begin_example

Family: gaussian 
Link function: identity 

Formula:
y ~ s(z1)
s(z2)

Parametric coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.0014963  0.0001932   7.743 9.88e-15 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df      F  p-value    
s(z1) 8.018  8.752 19.276  < 2e-16 ***
s(z2) 6.622  7.806  4.774 9.05e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00351   Deviance explained = 0.376%
GCV = 0.0021647  Scale est. = 0.0021641  n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
vis.gam(fit_z1z2_gam, color="cm", theta=30)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-w9NrFc.png]]

#+begin_src R :results graphics :file (get-babel-file)
vis.gam(fit_z1z2_gam, color="cm", plot.type = "contour")
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-xtjUlL.png]]

*** gam() + family = scat (R2 = 0.0028, AIC = -201,086)

#+begin_src R
fit_z1z2_gam_t <- gam(y ~ s(z1) + s(z2), family = scat, data = all_data); beep()
summary(fit_z1z2_gam_t)
#+end_src

#+RESULTS:
#+begin_example
Error in beep() : could not find function "beep"

Family: Scaled t(3.129,0.03) 
Link function: identity 

Formula:
y ~ s(z1)
s(z2)

Parametric coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) 0.0008530  0.0001538   5.545 2.94e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
        edf Ref.df Chi.sq  p-value    
s(z1) 7.866  8.676 220.12  < 2e-16 ***
s(z2) 4.097  5.208  45.99 1.46e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.00278   Deviance explained = 0.225%
-REML = -1.0052e+05  Scale est. = 1         n = 57950
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
vis.gam(fit_z1z2_gam_t, color="cm", theta=30)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-P8ppzV.png]]

#+begin_src R :results graphics :file (get-babel-file)
gam.check(fit_z1z2_gam_t)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-5tOjnl.png]]

* Strategies
** Strategy Parameters

#+begin_src R :results silent
sigma <- 2
num_trades <- 10
commission <- 0.001
#+end_src

** GAM (Gaussian) Model
*** Data

#+begin_src R :results silent
formula <- "y ~ s(x1) + s(x2)"
family <- "gaussian"
gam_fcsts_norm <- e$gam_fcsts %>%
  filter(formula == !!formula, family == !!family) %>%
  mutate(lwr = fit - (sigma * se), upr = fit + (sigma * se), z = fit / se) %>%
  arrange(date)
#+end_src

*** Plots
**** Forecast

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_norm %>%
  ggplot(aes(x = fit)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.001, origin = 0, fill = "white", color = "black") +
  geom_vline(xintercept = 0, size = 2) +
  xlim(c(-0.025, 0.025))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-OJFcuk.png]]

**** Fit vs. Return

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_norm %>%
  plot_points(fit, y, alpha = 0.05) + geom_smooth(method = lm) + xlim(c(-0.05, 0.05))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-SUICDf.png]]

**** Z vs. Return

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_norm %>%
  plot_points(z, y, alpha = 0.05) + geom_smooth(method = lm)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-Va74xR.png]]

**** Fit vs. X1

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_norm %>%
  plot_points(x1, fit, alpha = 0.1) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-Qlyg5V.png]]

**** Fit vs. X2

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_norm %>%
  plot_points(x2, fit, alpha = 0.1) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-PiGw40.png]]

*** RMSE

#+begin_src R
rmse(gam_fcsts_norm$y, gam_fcsts_norm$fit)
#+end_src

#+RESULTS:
: [1] 0.04772895

*** Long

#+begin_src R :results graphics :file (get-babel-file)
long_trans <- gam_fcsts_norm %>%
  group_by(date) %>%
  filter(lwr > 0) %>%
  top_n(num_trades, lwr) %>%
  ## filter(z > 0) %>%
  ## top_n(num_trades, z) %>%
  mutate(y_n = (y - commission) / num_trades)

long_ret <- long_trans %>%
  summarise(long = sum(y_n))

long_x <- tk_xts(long_ret, -date, date)
charts.PerformanceSummary(long_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-xuMcNM.png]]

#+begin_src R
perf_summary(long_x)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret Cum_Ret StdDev  MaxDD
: 1   long   1.23  25.95% 273.73% 21.06% 41.39%

- 総トレード・平均トレード
#+begin_src R
nrow(long_trans)
long_trans %>%
  group_by(date) %>%
  tally() %>%
  pull(n) %>%
  mean()
#+end_src

#+RESULTS:
: [1] 7350
: 
: [1] 5.104167

*** Short

#+begin_src R :results graphics :file (get-babel-file)
shrt_trans <- gam_fcsts_norm %>%
  group_by(date) %>%
  filter(upr < 0) %>%
  top_n(-num_trades, upr) %>%
  ## filter(z < 0) %>%
  ## top_n(-num_trades, z) %>%
  mutate(y_n = (y - commission) / num_trades)

shrt_ret <- shrt_trans %>%
  summarise(shrt = sum(-y_n))

shrt_x <- tk_xts(shrt_ret, -date, date)
charts.PerformanceSummary(shrt_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-PY2BEl.png]]

#+begin_src R
perf_summary(shrt_x)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret Cum_Ret StdDev  MaxDD
: 1   shrt   2.22  36.97% 304.79% 16.69% 12.05%

- 総トレード・平均トレード
#+begin_src R
nrow(shrt_trans)
shrt_trans %>%
  group_by(date) %>%
  tally() %>%
  pull(n) %>%
  mean()
#+end_src

#+RESULTS:
: [1] 4724
: [1] 4.217857

*** Long-Short

#+begin_src R :results graphics :file (get-babel-file) :width 600 :height 600
ret <- full_join(long_ret, shrt_ret, by = "date") %>%
  replace_na(list(long = 0, shrt = 0)) %>%
  mutate(long_shrt = long + shrt)
ret_x <- tk_xts(ret, -date, date)
charts.PerformanceSummary(ret_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-nYj9Oq.png]]

#+begin_src R
perf_summary(ret_x)
#+end_src

#+RESULTS:
:      Symbol Sharpe Avg_Ret  Cum_Ret StdDev  MaxDD
: 1      long   2.35  50.06% 1602.35% 21.28% 21.12%
: 2      shrt   1.66  22.16%  304.79% 13.35% 12.05%
: 3 long_shrt   3.61  84.08% 6992.95% 23.26% 16.37%

** GAM (Scaled-t) Model
*** Data

#+begin_src R :results silent
formula <- "y ~ s(x1) + s(x2)"
family <- "scat"
gam_fcsts_scat <- e$gam_fcsts %>%
  filter(formula == !!formula, family == !!family) %>%
  mutate(lwr = fit - (sigma * se), upr = fit + (sigma * se)) %>%
  arrange(date)
#+end_src

*** Plots
**** Forecast

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_scat %>%
  ggplot(aes(x = fit)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.001, origin = 0, fill = "white", color = "black") +
  geom_vline(xintercept = 0, size = 2) +
  xlim(c(-0.025, 0.025))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-ZwyVdy.png]]

**** Fit vs. Return

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_scat %>%
  plot_points(fit, y, alpha = 0.05) + geom_smooth(method = lm) + xlim(c(-0.05, 0.05))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-5uE81m.png]]

**** Fit vs. X1

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_scat %>%
  plot_points(x1, fit, alpha = 0.1) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-DwB4uo.png]]

**** Fit vs. X2

#+begin_src R :results graphics :file (get-babel-file)
gam_fcsts_scat %>%
  plot_points(x2, fit, alpha = 0.1) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-on6S1s.png]]

*** RMSE

#+begin_src R
gam_fcsts_scat %>%
  filter(!is.na(fit)) %>%
  summarise(rmse = rmse(y, fit))
## rmse(gam_fcsts_scat$y, gam_fcsts_scat$fit)
#+end_src

#+RESULTS:
:         rmse
: 1 0.04637746

*** Long

#+begin_src R :results graphics :file (get-babel-file)
long_trans <- gam_fcsts_scat %>%
  group_by(date) %>%
  filter(lwr > 0) %>%
  top_n(num_trades, lwr) %>%
  mutate(y_n = (y - commission) / num_trades)

long_ret <- long_trans %>%
  summarise(long = sum(y_n))

long_x <- tk_xts(long_ret, -date, date)
charts.PerformanceSummary(long_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-NkWSEr.png]]

#+begin_src R
perf_summary(long_x)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret  Cum_Ret StdDev  MaxDD
: 1   long   2.61  55.89% 1005.77% 21.37% 16.49%

- 総トレード・平均トレード
#+begin_src R
nrow(long_trans)
long_trans %>%
  group_by(date) %>%
  tally() %>%
  pull(n) %>%
  mean()
#+end_src

#+RESULTS:
: [1] 6849
: [1] 5.021261

*** Short

#+begin_src R :results graphics :file (get-babel-file)
shrt_trans <- gam_fcsts_scat %>%
  group_by(date) %>%
  filter(upr < 0) %>%
  top_n(-num_trades, upr) %>%
  mutate(y_n = (y - commission) / num_trades)

shrt_ret <- shrt_trans %>%
  summarise(shrt = sum(-y_n))

shrt_x <- tk_xts(shrt_ret, -date, date)
charts.PerformanceSummary(shrt_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-xLp0dk.png]]

#+begin_src R
perf_summary(shrt_x)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret Cum_Ret StdDev  MaxDD
: 1   shrt   1.84  31.13% 131.89% 16.92% 18.51%

- 総トレード・平均トレード
#+begin_src R
nrow(shrt_trans)
shrt_trans %>%
  group_by(date) %>%
  tally() %>%
  pull(n) %>%
  mean()
#+end_src

#+RESULTS:
: [1] 3161
: [1] 4.042199

*** Long-Short

#+begin_src R :results graphics :file (get-babel-file)
ret <- full_join(long_ret, shrt_ret, by = "date") %>%
  replace_na(list(long = 0, shrt = 0)) %>%
  mutate(long_shrt = long + shrt)
ret_x <- tk_xts(ret, -date, date)
charts.PerformanceSummary(ret_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-0nr64K.png]]

#+begin_src R
perf_summary(ret_x)
#+end_src

#+RESULTS:
:      Symbol Sharpe Avg_Ret  Cum_Ret StdDev  MaxDD
: 1      long   2.46  50.31% 1005.77% 20.49% 16.49%
: 2      shrt   1.25  15.33%  131.89% 12.30% 18.51%
: 3 long_shrt   3.30  73.92% 2513.52% 22.41% 14.84%

- 総トレード・平均トレード
#+begin_src R
nrow(shrt_trans)
shrt_trans %>%
  group_by(date) %>%
  tally() %>%
  pull(n) %>%
  mean()
#+end_src

#+RESULTS:
: [1] 3161
: [1] 4.042199

** Linear Model
*** Data

#+begin_src R :results silent
formula <- "y ~ x1 + x2"
lm_fcsts <- e$lm_fcsts %>%
  filter(formula == !!formula) %>%
  mutate(lwr = fit - (sigma * se), upr = fit + (sigma * se)) %>%
  arrange(date)
#+end_src

*** Plots
**** Forecast

#+begin_src R :results graphics :file (get-babel-file)
lm_fcsts %>%
  ggplot(aes(x = fit)) +
  geom_histogram(aes(y = stat(density)), binwidth = 0.001, origin = 0, fill = "white", color = "black") +
  geom_vline(xintercept = 0, size = 2) +
  xlim(c(-0.025, 0.025))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-0NjwVp.png]]

**** Fit vs. Return

#+begin_src R :results graphics :file (get-babel-file)
lm_fcsts %>%
  plot_points(fit, y, alpha = 0.05) + geom_smooth(method = lm) + xlim(c(-0.05, 0.05))
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-zYD4wA.png]]

**** Fit vs. X1

#+begin_src R :results graphics :file (get-babel-file)
lm_fcsts %>%
  plot_points(x1, fit, alpha = 0.1) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-3xQald.png]]

**** Fit vs. X2

#+begin_src R :results graphics :file (get-babel-file)
lm_fcsts %>%
  plot_points(x2, fit, alpha = 0.1) + geom_smooth()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-QXMpUi.png]]

*** RMSE

#+begin_src R
rmse(lm_fcsts$y, lm_fcsts$fit)
#+end_src

#+RESULTS:
: [1] 0.04618452

*** Long

#+begin_src R :results graphics :file (get-babel-file)
long_trans <- lm_fcsts %>%
  group_by(date) %>%
  ## filter(lwr > 0) %>%
  ## top_n(num_trades, lwr) %>%
  filter(fit > 0) %>%
  top_n(num_trades, fit) %>%
  mutate(y_n = (y - commission) / num_trades)

long_ret <- long_trans %>%
  summarise(long = sum(y_n))

long_x <- tk_xts(long_ret, -date, date)
charts.PerformanceSummary(long_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-g9Rvpv.png]]

#+begin_src R
perf_summary(long_x)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret Cum_Ret StdDev  MaxDD
: 1   long   0.85  20.03% 287.09% 23.62% 34.67%

- 総トレード・平均トレード
#+begin_src R
nrow(long_trans)
long_trans %>%
  group_by(date) %>%
  tally() %>%
  pull(n) %>%
  mean()
#+end_src

#+RESULTS:
: [1] 8725
: [1] 5.284676

*** Short

#+begin_src R :results graphics :file (get-babel-file)
shrt_trans <- lm_fcsts %>%
  group_by(date) %>%
  ## filter(upr < 0) %>%
  ## top_n(-num_trades, upr) %>%
  filter(fit < 0) %>%
  top_n(-num_trades, fit) %>%
  mutate(y_n = (y - commission) / num_trades)

shrt_ret <- shrt_trans %>%
  summarise(shrt = sum(-y_n))

shrt_x <- tk_xts(shrt_ret, -date, date)
charts.PerformanceSummary(shrt_x)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-CBNgRD.png]]

#+begin_src R
perf_summary(shrt_x)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret Cum_Ret StdDev  MaxDD
: 1   shrt  -0.02  -0.34%  -1.37% 21.15% 58.90%

- 総トレード・平均トレード
#+begin_src R
nrow(shrt_trans)
shrt_trans %>%
  group_by(date) %>%
  tally() %>%
  pull(n) %>%
  mean()
#+end_src

#+RESULTS:
: [1] 4724
: [1] 4.217857

* Strategies
** Long
*** Plot

#+begin_src R :results graphics :file (get-babel-file)
exprs_l <- c(expression(x1_pct > 50),
             expression(between(x1_pct, 60, 90)),
             expression(between(x1_pct, 60, 90) & x2_pct < 50))

rets_l <- map(exprs_l, function(exp) {
  filter(d, eval(exp)) %>%
    group_by(date) %>%
    summarise(ret = sum(r) / n())
})

r_l <- reduce(rets_l, left_join, by = "date") %>%
  set_names(c("date", strat_names)) %>%
  replace_na(list(X1 = 0, X1X2 = 0)) %>%
  tk_xts(-date, date)

charts.PerformanceSummary(r_l)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-O71gjL.png]]

*** Perf

#+begin_src R
perf_summary(r_l)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret   Cum_Ret StdDev  MaxDD
: 1    ALL   1.33  57.67%  4835.61% 43.24% 45.07%
: 2     X1   1.22  58.70%  5120.59% 48.17% 44.03%
: 3   X1X2   1.87  84.66% 19000.88% 45.26% 40.88%

** Short
*** Plot

#+begin_src R :results graphics :file (get-babel-file)
exprs_s <- c(expression(x1_pct < 50),
          expression(between(x1_pct, 10, 40)),
          expression(between(x1_pct, 10, 40) & x2_pct > 50))

rets_s <- map(exprs_s, function(exp) {
  filter(d, eval(exp)) %>%
    group_by(date) %>%
    summarise(ret = -sum(r) / n())
})

r_s <- reduce(rets_s, left_join, by = "date") %>%
  set_names(c("date", strat_names)) %>%
  replace_na(list(X1 = 0, X1X2 = 0)) %>%
  tk_xts(-date, date)

charts.PerformanceSummary(r_s)
#+end_src

 #+RESULTS:
 [[file:/home/shun/Dropbox/memo/img/babel/fig-IVyuKR.png]]

*** Perf

#+begin_src R
perf_summary(r_s)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret  Cum_Ret StdDev  MaxDD
: 1    ALL  -0.17  -7.73%  -49.90% 44.58% 81.37%
: 2     X1   0.87  35.63% 1269.37% 40.81% 50.49%
: 3   X1X2   1.08  42.78% 2028.65% 39.66% 50.88%

** Long-Short
*** Plot

#+begin_src R :results graphics :file (get-babel-file)
rets <- map2(rets_l, rets_s, ~ {
  full_join(.x, .y, by = "date") %>%
    replace_na(list(ret.x = 0, ret.y = 0)) %>%
    mutate(ret = ret.x + ret.y) %>%
    select(date, ret)
})

r <- reduce(rets, left_join, by = "date") %>%
  set_names(c("date", strat_names)) %>%
  replace_na(list(X1 = 0, X1X2 = 0)) %>%
  tk_xts(-date, date)

charts.PerformanceSummary(r)
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-N0IWt0.png]]

*** Perf

#+begin_src R
perf_summary(r)
#+end_src

#+RESULTS:
:   Symbol Sharpe Avg_Ret    Cum_Ret StdDev  MaxDD
: 1    ALL   0.79  43.73%   2918.71% 55.61% 54.19%
: 2     X1   1.79 103.90%  80507.69% 58.15% 48.76%
: 3   X1X2   2.59 144.63% 445767.43% 55.73% 46.54%

* Long
** RMSE by Model Formulas

#+begin_src R :results silent
rmse <- function(data, model, formula) {
  coefs <- e$lm_fits %>%
    filter(date %in% data$date, model == !!model, formula == !!formula) %>%
    pull(coef)
  list_data <- group_split(data, date)
  fcst <- map2_dfr(list_data, coefs, function(d, c) {
    if (nrow(c) == 1) {
      mutate(d, fcst = c[1, ]$estimate)
    } else if (nrow(c) == 2) {
      mutate(d, fcst = c[1, ]$estimate + x1 * c[2, ]$estimate)
    } else if (nrow(c) == 3) {
      mutate(d, fcst = c[1, ]$estimate + x1 * c[2, ]$estimate + x2 * c[3, ]$estimate)
    } else if (nrow(c) == 4) {
      mutate(d, fcst = c[1, ]$estimate + x1 * c[2, ]$estimate + x2 * c[3, ]$estimate + x1 * x2 * c[4, ]$estimate)
    } else {
      NULL
    }
  })
  Metrics::rmse(fcst$y, fcst$fcst)
}
#+end_src

- 切片だけのモデルが最も RMSE が小さい
#+begin_src R
l_edata <- filter(e$edata, x1 > 0, date >= e$lm_fits$date[1])
rmse(l_edata, model, "y ~ 1")
rmse(l_edata, model, "y ~ x1")
rmse(l_edata, model, "y ~ x1 + x2")
rmse(l_edata, model, "y ~ x1 * x2")
#+end_src

#+RESULTS:
: [1] 0.04431201
: [1] 0.04432049
: [1] 0.04433679
: [1] 0.04435582

