#+STARTUP: folded indent inlineimages latexpreview
#+PROPERTY: header-args:R :session *R:mpt* :width 640 :height 480 :results output

* Libraries
  
#+begin_src R :results silent
library(DEoptim)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(RiskPortfolios)
library(backtester)
library(data.table)
library(fPortfolio)
library(formattable)
library(glue)
library(lubridate)
library(market.data)
library(rmgarch)
library(rugarch)
library(tidyquant)
library(tidyverse)
library(timetk)
#+end_src

* データの準備

- 『道具としてのファイナンス』の例
- IBM と KO の年率リターン
#+begin_src R :results output
ibm <- c(0.3887, 0.299, 0.7356, 0.4046, 0.7877, 0.1786, -0.2083, 0.4301, -0.3546, 0.2050)
mean(ibm)

ko <- c(0.1954, 0.4824, 0.4372, 0.2786, 0.0131, -0.1215, 0.0599, -0.2176, -0.0549, 0.1812)
mean(ko)
#+end_src

#+RESULTS:
: 
: [1] 0.28664
: 
: [1] 0.12538

* ポートフォリオのリターン

- ウェイトに応じて期待値を計算するだけ

$E(r_p) = W_a E(r_a) + W_b E(r_b)$


- IBM への投資比率 w_a = 60% とした場合
#+begin_src R
port_ret <- function(a, b, w_a) {
  mean(a) * w_a + mean(b) * (1 - w_a)
}

port_ret(ibm, ko, 0.6)
#+end_src

#+RESULTS:
: 
: [1] 0.222136

- 行列の積の計算でも同じ結果
#+begin_src R
r <- c(mean(ibm), mean(ko))
w <- c(0.6, 0.4)
r %*% w
#+end_src

#+RESULTS:
: 
:          [,1]
: [1,] 0.222136

#+begin_src R
W <- c(0.1, 0.2, 0.3, 0.4)
One <- rep(1, length(W))
1 == W %*% One
#+end_src

#+RESULTS:
: 
:      [,1]
: [1,] TRUE

* ポートフォリオのボラティリティ

$Var(r_p) = W_a^2 Var(r_a) + W_b^2 Var(r_b) + 2 W_a W_b Cov(r_a, r_b)$

相関係数を使って書くと、

$Var(r_p) = W_a^2 Var(r_a) + W_b^2 Var(r_b) + 2 W_a W_b \rho \sigma_a \sigma_b$


- 銘柄それぞれの分散 x 比率^2 に 2*比率*共分散
- 本の内容に沿って、不偏推定量では計算していない (R の関数は不偏)
#+begin_src R
port_sd <- function(a, b, w_a) {
  var_a  <- mean((mean(a) - a) ^ 2)
  var_b  <- mean((mean(b) - b) ^ 2)
  cov_ab <- mean((mean(a) - a) * (mean(b) - b))

  var <- var_a * w_a^2 + var_b * (1 - w_a)^2 + 2 * w_a * (1-w_a) * cov_ab
  sqrt(var)
}

port_sd(ibm, ko, 0.6)
#+end_src

#+RESULTS:
: 
: [1] 0.2473688

- 行列計算バージョン (不偏推定量)
$Var(r_p) = w^t \Sigma w$

sa
#+begin_src R
W <- c(0.6, 0.4)
cov <- cov(matrix(c(ibm, ko), ncol = 2))
pcov <- W %*% cov %*% W
sqrt(pcov)
#+end_src

#+RESULTS:
: 
:           [,1]
: [1,] 0.2607496

* 効率的フロンティア

- 比率を 0% - 100% にしてプロット
- グラフの上側 (同じリスクで優れたリターンがないエリア) = _効率的フロンティア_

#+begin_src R :results graphics :file (get-babel-file)
port <- map_dfr(seq(0, 1, 0.01), function(w_a) {
  data.frame(w_a = w_a,
             ret = port_ret(ibm, ko, w_a),
             sd  = port_sd(ibm, ko, w_a))
})
ggplot(port, aes(x = sd, y = ret)) + geom_point()
#+end_src

#+RESULTS:
[[file:/home/shun/Dropbox/memo/img/babel/fig-XBMpEl.png]]

- 相関係数が、1 以下であれば、ポートフォリオ分散効果が働く
- 相関係数が -1 ではお互いの値動きを打ち消すため、リスクがゼロになる
#+begin_src R
cor(ibm, ko)
#+end_src

#+RESULTS:
: [1] 0.311

* マーケットポートフォリオ
** Overview

- シャープレシオが最も良いポートフォリオ = _マーケットポートフォリオ_
  => シャープレシオが 資本市場線 (CML: Capital Market Line) の傾きになっている
  => したがって、傾きが最大になるポートフォリオが最も効率的なポートフォリオ
- IBM 58%, KO 42% がマーケットポートフォリオ (Sharpe = 0.89)

#+begin_src R
sharpe <- port$ret / port$sd
max(sharpe)
port[which.max(sharpe), ]$w_a
#+end_src

#+RESULTS:
: 
: [1] 0.898295
: 
: [1] 0.58

** {PortfolioAnalytics} 

ほぼ同じ結果
#+begin_src R
## df -> xts へ変換
ret_df <- data.frame(
  Date = seq(ymd("1994-12-31"), ymd("2003-12-31"), by = "year"),
  IBM = ibm, KO = ko)
ret <- timetk::tk_xts(ret_df, c(IBM, KO), Date)
symbols <- c("IBM", "KO")

## mean return 最大化 と StdDev 最小化 を組み合わせる 
init.portf <- portfolio.spec(assets=symbols)
init.portf <- add.constraint(portfolio=init.portf, type="full_investment")
init.portf <- add.constraint(portfolio=init.portf, type="long_only")
init.portf <- add.objective(portfolio=init.portf, type="return", name="mean")
init.portf <- add.objective(portfolio=init.portf, type="risk", name="StdDev")

maxSR <- optimize.portfolio(R=ret,
                            portfolio=init.portf,
                            optimize_method="ROI",
                            maxSR=TRUE,
                            trace=TRUE)
stats <- extractStats(maxSR)
stats
stats[["mean"]] / stats[["StdDev"]]
#+end_src

#+RESULTS:
: 
:     StdDev       mean        out      w.IBM       w.KO 
: 0.25653808 0.21862162 0.06581179 0.57820673 0.42179327
: 
: [1] 0.8521995

** {RiskPortfolios} 

- mean-variance = Sharpe Ratio の最大化
- PortfolioAnalytics と同じ結果
#+begin_src R
ret_mat <- matrix(c(ibm, ko), ncol = 2)
colnames(ret_mat) <- c("IBM", "KO")

cov  <- cov(ret_mat)
ret  <- apply(ret_mat, 2, mean)
w_mv <- optimalPortfolio(cov, ret, control = list(type = "mv"))
w_mv

print("---")
port_ret(ibm, ko, w_mv["IBM"])
port_sd(ibm, ko, w_mv["IBM"])
#+end_src

#+RESULTS:
:       IBM        KO 
: 0.5782067 0.4217933
: [1] "---"
:       IBM 
: 0.2186216
:       IBM 
: 0.2433734

- minvol = 最小分散ポートフォリオ
- リターンは減っているが、ポートフォリオのボラティリティは減少
#+begin_src R
w_minvol <- optimalPortfolio(cov, ret, control = list(type = "minvol"))
w_minvol

print("---")
port_ret(ibm, ko, w_minvol["IBM"])
port_sd(ibm, ko, w_minvol["IBM"])
#+end_src

#+RESULTS:
:       IBM        KO 
: 0.2103763 0.7896237
: [1] "---"
:       IBM 
: 0.1593053
:       IBM 
: 0.2077503

- erc = Equal Risk Contribution
#+begin_src R
optimalPortfolio(cov, ret, control = list(type = "erc"))
#+end_src

#+RESULTS:
: [1] 0.3912424 0.6087576

- maxdiv = Max Diversfication
#+begin_src R
optimalPortfolio(cov, ret, control = list(type = "maxdiv"))
#+end_src

#+RESULTS:
: [1] 0.3912424 0.6087576

** {RiskPortfolios} + {rmgarch}
*** Data

- 各資産クラスの ETF Data
#+begin_src R :results value :colnames yes
path <- glue("{.mkt_data}/Quandl/Sharadar/Data/US_Stock_Select.csv")
symbols <- c("SPY", "QQQ", "EEM", "IWM", "EFA", "TLT", "IYR", "GLD")

data <- fread(path) %>%
  select(date, symbol, adj_close, log_ret) %>%
  mutate(date = ymd(date)) %>%
  filter(between(date, ymd("2014-01-01"), ymd("2018-12-31"))) %>%
  filter(symbol %in% symbols)

head(data)
#+end_src

#+RESULTS:
|       date | symbol | adj_close |              log_ret |
|------------+--------+-----------+----------------------|
| 2014-01-02 | EEM    |    35.899 |  -0.0391414277504323 |
| 2014-01-02 | EFA    |    55.693 |  -0.0178139192424016 |
| 2014-01-02 | GLD    |       118 |   0.0160604853092359 |
| 2014-01-02 | IWM    |    105.95 |  -0.0108890590622304 |
| 2014-01-02 | IYR    |    51.177 | -0.00160099999053465 |
| 2014-01-02 | QQQ    |    82.364 | -0.00787286611384985 |

#+begin_src R :results value :colnames yes
ret <- spread(select(data, -adj_close), symbol, log_ret)
ret_mat <- as.matrix(select(ret, -date))
ret_xts <- tk_xts(ret)

head(ret)
#+end_src

#+RESULTS:
|       date |                  EEM |                   EFA |                  GLD |                  IWM |                   IYR |                  QQQ |                   SPY |                 TLT |
|------------+----------------------+-----------------------+----------------------+----------------------+-----------------------+----------------------+-----------------------+---------------------|
| 2014-01-02 |  -0.0391414277504323 |   -0.0178139192424016 |   0.0160604853092359 |  -0.0108890590622304 |  -0.00160099999053465 | -0.00787286611384985 |  -0.00962828479490341 |  0.0030366574805063 |
| 2014-01-03 | -0.00175646521773576 |   0.00105881835007526 |   0.0108728788281898 |  0.00506501803041015 |   0.00586431956790134 | -0.00725024957078801 | -0.000164509260109469 |                   0 |
| 2014-01-06 | -0.00950478886713668 |  -0.00122043160989715 |  0.00175886807771075 | -0.00813721706738058 |   0.00409046098465593 | -0.00370016840112442 |   -0.0029046904290313 | 0.00419983682525871 |
| 2014-01-07 |  0.00427291010780362 |   0.00560526534525696 | -0.00570662844397063 |  0.00831562501170158 |   0.00345703676758857 |  0.00922487588165399 |   0.00612293436790967 | 0.00253168965076522 |
| 2014-01-08 | -0.00325925381940451 | -0.000303633784270119 | -0.00590868605187289 |  0.00130422766466687 |  -0.00156287716921444 |  0.00218680230988877 |  0.000218634989757049 | -0.0027232335515226 |
| 2014-01-09 | -0.00530490253367733 |    -0.000750549544696 |   0.0028742939730968 | 0.000262516408783497 | -0.000482863194926964 | -0.00333070264758284 |  0.000655618307949801 | 0.00583124787956102 |

*** Average Return/Volatility

#+begin_src R :results value :colnames yes
data %>%
  group_by(symbol) %>%
  summarise(avg_return = percent(mean(log_ret), 4),
            volatility = percent(sd(log_ret) * sqrt(252)))
#+end_src

#+RESULTS:
| symbol | avg_return | volatility |
|--------+------------+------------|
| EEM    |    0.0030% |     18.99% |
| EFA    |    0.0012% |     14.59% |
| GLD    |    0.0034% |     13.22% |
| IWM    |    0.0173% |     16.30% |
| IYR    |    0.0290% |     13.77% |
| QQQ    |    0.0489% |     16.76% |
| SPY    |    0.0319% |     13.21% |
| TLT    |    0.0244% |     11.88% |

*** Plots

- Close
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data, aes(x = date, y = adj_close)) +
  geom_line() +
  facet_wrap(~ symbol, nrow = 2, scales = "free_y")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-ccm9w3.png]]

- Return
#+begin_src R :results graphics :file (get-babel-file)
ggplot(data, aes(x = date, y = log_ret)) +
  geom_line() +
  facet_wrap(~ symbol, nrow = 2)
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-o9MhNB.png]]

*** DCC model fit

#+begin_src R
## 単変量の GARCH モデル 
ugarch_spec <- ugarchspec(
  mean.model = list(armaOrder = c(0, 0), include.mean=TRUE),
  variance.model = list(garchOrder = c(1,1), model = 'sGARCH'),
  distribution.model = 'norm')

## 銘柄数分だけ複製
mgarch_specs <- multispec(replicate(8, ugarch_spec))

## DCC モデル
dcc_spec <- dccspec(
  uspec = mgarch_specs,
  dccOrder = c(1, 1),
  distribution = "mvnorm",
  model = "DCC")

## DCC モデルの当てはめ
dcc_fit <- dccfit(dcc_spec,
                  data = ret_xts,
                  fit.control = list(eval.se = TRUE))
dcc_fit
#+end_src

#+RESULTS:
#+begin_example

,*---------------------------------*
,*          DCC GARCH Fit          *
,*---------------------------------*

Distribution         :  mvnorm
Model                :  DCC(1,1)
No. Parameters       :  62
[VAR GARCH DCC UncQ] : [0+32+2+28]
No. Series           :  8
No. Obs.             :  1258
Log-Likelihood       :  37388.59
Av.Log-Likelihood    :  29.72 

Optimal Parameters
-----------------------------------
              Estimate  Std. Error    t value Pr(>|t|)
[EEM].mu      0.000327    0.000307 1.0658e+00 0.286523
[EEM].omega   0.000007    0.000002 4.0956e+00 0.000042
[EEM].alpha1  0.121481    0.012819 9.4767e+00 0.000000
[EEM].beta1   0.829821    0.018612 4.4585e+01 0.000000
[EFA].mu      0.000264    0.000226 1.1703e+00 0.241884
[EFA].omega   0.000006    0.000002 3.2201e+00 0.001282
[EFA].alpha1  0.219927    0.038194 5.7582e+00 0.000000
[EFA].beta1   0.728724    0.046636 1.5626e+01 0.000000
[GLD].mu      0.000003    0.000217 1.4632e-02 0.988325
[GLD].omega   0.000000    0.000000 1.2839e+00 0.199163
[GLD].alpha1  0.019366    0.001145 1.6917e+01 0.000000
[GLD].beta1   0.976833    0.000756 1.2921e+03 0.000000
[IWM].mu      0.000375    0.000265 1.4143e+00 0.157289
[IWM].omega   0.000006    0.000001 6.4958e+00 0.000000
[IWM].alpha1  0.101478    0.008923 1.1373e+01 0.000000
[IWM].beta1   0.841821    0.015810 5.3245e+01 0.000000
[IYR].mu      0.000579    0.000224 2.5814e+00 0.009839
[IYR].omega   0.000005    0.000002 2.9383e+00 0.003300
[IYR].alpha1  0.147336    0.027401 5.3770e+00 0.000000
[IYR].beta1   0.798543    0.034748 2.2981e+01 0.000000
[QQQ].mu      0.000922    0.000302 3.0531e+00 0.002265
[QQQ].omega   0.000006    0.000002 3.7563e+00 0.000172
[QQQ].alpha1  0.155645    0.021658 7.1866e+00 0.000000
[QQQ].beta1   0.788252    0.028102 2.8050e+01 0.000000
[SPY].mu      0.000743    0.000195 3.8041e+00 0.000142
[SPY].omega   0.000004    0.000002 1.7382e+00 0.082178
[SPY].alpha1  0.203142    0.035007 5.8030e+00 0.000000
[SPY].beta1   0.743981    0.037906 1.9627e+01 0.000000
[TLT].mu      0.000249    0.000193 1.2892e+00 0.197339
[TLT].omega   0.000000    0.000000 1.2576e+00 0.208547
[TLT].alpha1  0.018108    0.000997 1.8163e+01 0.000000
[TLT].beta1   0.978368    0.000369 2.6536e+03 0.000000
[Joint]dcca1  0.028388    0.004972 5.7100e+00 0.000000
[Joint]dccb1  0.908058    0.020238 4.4868e+01 0.000000

Information Criteria
---------------------
                    
Akaike       -59.343
Bayes        -59.090
Shibata      -59.347
Hannan-Quinn -59.248


Elapsed time : 5.875256
#+end_example

*** DCC forecast

- 1 期先予測
#+begin_src R
dcc_forecast <- dccforecast(dcc_fit)
cov_fcst <- rcov(dcc_forecast)[[1]][,,1]
cov_fcst

cor_fcst <- rcor(dcc_forecast)[[1]][,,1]
cor_fcst

ret_fcst <- fitted(dcc_forecast)[,,1]
ret_fcst
#+end_src

#+RESULTS:
#+begin_example
              EEM           EFA           GLD           IWM           IYR
EEM  1.226242e-04  8.873159e-05  3.811495e-06  1.253586e-04  7.835480e-05
EFA  8.873159e-05  1.017353e-04 -9.019958e-07  1.313267e-04  7.779207e-05
GLD  3.811495e-06 -9.019958e-07  4.007826e-05 -1.655332e-05 -1.510395e-05
IWM  1.253586e-04  1.313267e-04 -1.655332e-05  2.917478e-04  1.578962e-04
IYR  7.835480e-05  7.779207e-05 -1.510395e-05  1.578962e-04  2.432679e-04
QQQ  1.690959e-04  1.688141e-04 -2.017079e-05  3.130441e-04  1.896983e-04
SPY  1.473684e-04  1.528830e-04 -2.224712e-05  2.797352e-04  1.806840e-04
TLT -2.068600e-05 -2.182198e-05  1.009589e-05 -4.530163e-05 -8.953797e-06
              QQQ           SPY           TLT
EEM  1.690959e-04  1.473684e-04 -2.068600e-05
EFA  1.688141e-04  1.528830e-04 -2.182198e-05
GLD -2.017079e-05 -2.224712e-05  1.009589e-05
IWM  3.130441e-04  2.797352e-04 -4.530163e-05
IYR  1.896983e-04  1.806840e-04 -8.953797e-06
QQQ  4.645812e-04  3.656433e-04 -4.947608e-05
SPY  3.656433e-04  3.310670e-04 -4.648989e-05
TLT -4.947608e-05 -4.648989e-05  3.570307e-05
            EEM         EFA         GLD        IWM         IYR        QQQ
EEM  1.00000000  0.79442772  0.05436919  0.6627691  0.45366482  0.7084580
EFA  0.79442772  1.00000000 -0.01412584  0.7622782  0.49448953  0.7765012
GLD  0.05436919 -0.01412584  1.00000000 -0.1530830 -0.15296557 -0.1478215
IWM  0.66276907  0.76227824 -0.15308295  1.0000000  0.59268692  0.8502976
IYR  0.45366482  0.49448953 -0.15296557  0.5926869  1.00000000  0.5642742
QQQ  0.70845800  0.77650122 -0.14782152  0.8502976  0.56427415  1.0000000
SPY  0.73140569  0.83303911 -0.19313520  0.9000888  0.63667715  0.9323284
TLT -0.31263352 -0.36208092  0.26689318 -0.4438715 -0.09607535 -0.3841596
           SPY         TLT
EEM  0.7314057 -0.31263352
EFA  0.8330391 -0.36208092
GLD -0.1931352  0.26689318
IWM  0.9000888 -0.44387152
IYR  0.6366772 -0.09607535
QQQ  0.9323284 -0.38415960
SPY  1.0000000 -0.42760997
TLT -0.4276100  1.00000000
         EEM          EFA          GLD          IWM          IYR          QQQ 
3.267444e-04 2.644920e-04 3.177121e-06 3.747163e-04 5.791711e-04 9.222934e-04 
         SPY          TLT 
7.427425e-04 2.488998e-04
#+end_example

*** Asset Allocation

- DCC モデルの分散共分散行列によるポートフォリオ
#+begin_src R
w_dcc <- optimalPortfolio(cov, ret_fcst, control = list(type = "mv"))
w_dcc
sum(w_dcc)
#+end_src

#+RESULTS:
:          EEM          EFA          GLD          IWM          IYR          QQQ 
:  0.063246987 -0.197500390 -0.023251636 -0.252621429  0.003094114  0.112886744 
:          SPY          TLT 
:  0.438147240  0.855998368
: [1] 1

- ヒストリカルなポートフォリオ計算
- DCC モデルからの結果とはかなり異なる
#+begin_src R
avg_ret <- apply(ret_mat, 2, mean)
cov_normal <- cov(ret_mat)
w_normal <- optimalPortfolio(cov_normal, avg_ret, control = list(type = "mv"))
w_normal
sum(w_normal)
#+end_src

#+RESULTS:
:         EEM         EFA         GLD         IWM         IYR         QQQ 
: -0.28365942 -0.49623438  0.05626636 -0.42795106  0.03120345  0.42524509 
:         SPY         TLT 
:  1.22676918  0.46836078
: [1] 1

* ブラック - リッターマン・モデル
* R ライブラリ
** {fPortfolio}
*** List of functions

#+begin_src R
ls("package:fPortfolio")
#+end_src

#+RESULTS:
#+begin_example
  [1] "addRainbow"                                
  [2] "amplDataAdd"                               
  [3] "amplDataAddMatrix"                         
  [4] "amplDataAddValue"                          
  [5] "amplDataAddVector"                         
  [6] "amplDataOpen"                              
  [7] "amplDataSemicolon"                         
  [8] "amplDataShow"                              
  [9] "amplLP"                                    
 [10] "amplLPControl"                             
 [11] "amplModelAdd"                              
 [12] "amplModelOpen"                             
 [13] "amplModelShow"                             
 [14] "amplNLP"                                   
 [15] "amplNLPControl"                            
 [16] "amplOutShow"                               
 [17] "amplQP"                                    
 [18] "amplQPControl"                             
 [19] "amplRunAdd"                                
 [20] "amplRunOpen"                               
 [21] "amplRunShow"                               
 [22] "backtestAssetsPlot"                        
 [23] "backtestDrawdownPlot"                      
 [24] "backtestPlot"                              
 [25] "backtestPortfolioPlot"                     
 [26] "backtestRebalancePlot"                     
 [27] "backtestReportPlot"                        
 [28] "backtestStats"                             
 [29] "backtestWeightsPlot"                       
 [30] "bcpAnalytics"                              
 [31] "bestDiversification"                       
 [32] "budgetsModifiedES"                         
 [33] "budgetsModifiedVAR"                        
 [34] "budgetsNormalES"                           
 [35] "budgetsNormalVAR"                          
 [36] "budgetsSampleCOV"                          
 [37] "cmlLines"                                  
 [38] "cmlPoints"                                 
 [39] "covEstimator"                              
 [40] "covMcdEstimator"                           
 [41] "covOGKEstimator"                           
 [42] "covRisk"                                   
 [43] "covRiskBudgetsLinePlot"                    
 [44] "covRiskBudgetsPie"                         
 [45] "covRiskBudgetsPlot"                        
 [46] "cvarRisk"                                  
 [47] "Data"                                      
 [48] "donlp2NLP"                                 
 [49] "donlp2NLPControl"                          
 [50] "drawdownsAnalytics"                        
 [51] "ECON85"                                    
 [52] "ECON85LONG"                                
 [53] "efficientPortfolio"                        
 [54] "emaSmoother"                               
 [55] "eqsumWConstraints"                         
 [56] "equalWeightsPoints"                        
 [57] "equidistWindows"                           
 [58] "feasibleGrid"                              
 [59] "feasiblePortfolio"                         
 [60] "frontierPlot"                              
 [61] "frontierPlotControl"                       
 [62] "frontierPoints"                            
 [63] "garchAnalytics"                            
 [64] "GCCINDEX"                                  
 [65] "GCCINDEX.RET"                              
 [66] "getA"                                      
 [67] "getA.fPFOLIOSPEC"                          
 [68] "getA.fPORTFOLIO"                           
 [69] "getAlpha"                                  
 [70] "getAlpha.fPFOLIOSPEC"                      
 [71] "getAlpha.fPFOLIOVAL"                       
 [72] "getAlpha.fPORTFOLIO"                       
 [73] "getConstraints"                            
 [74] "getConstraints.fPORTFOLIO"                 
 [75] "getConstraintsTypes"                       
 [76] "getControl"                                
 [77] "getControl.fPFOLIOSPEC"                    
 [78] "getControl.fPORTFOLIO"                     
 [79] "getCov"                                    
 [80] "getCov.fPFOLIODATA"                        
 [81] "getCov.fPORTFOLIO"                         
 [82] "getCovRiskBudgets"                         
 [83] "getCovRiskBudgets.fPFOLIOVAL"              
 [84] "getCovRiskBudgets.fPORTFOLIO"              
 [85] "getData"                                   
 [86] "getData.fPFOLIODATA"                       
 [87] "getData.fPORTFOLIO"                        
 [88] "getEstimator"                              
 [89] "getEstimator.fPFOLIODATA"                  
 [90] "getEstimator.fPFOLIOSPEC"                  
 [91] "getEstimator.fPORTFOLIO"                   
 [92] "getMean"                                   
 [93] "getMean.fPFOLIODATA"                       
 [94] "getMean.fPORTFOLIO"                        
 [95] "getMessages"                               
 [96] "getMessages.fPFOLIOBACKTEST"               
 [97] "getMessages.fPFOLIOSPEC"                   
 [98] "getModel.fPFOLIOSPEC"                      
 [99] "getModel.fPORTFOLIO"                       
[100] "getMu"                                     
[101] "getMu.fPFOLIODATA"                         
[102] "getMu.fPORTFOLIO"                          
[103] "getNAssets"                                
[104] "getNAssets.fPFOLIODATA"                    
[105] "getNAssets.fPORTFOLIO"                     
[106] "getNFrontierPoints"                        
[107] "getNFrontierPoints.fPFOLIOSPEC"            
[108] "getNFrontierPoints.fPFOLIOVAL"             
[109] "getNFrontierPoints.fPORTFOLIO"             
[110] "getObjective"                              
[111] "getObjective.fPFOLIOSPEC"                  
[112] "getObjective.fPORTFOLIO"                   
[113] "getOptim"                                  
[114] "getOptim.fPFOLIOSPEC"                      
[115] "getOptim.fPORTFOLIO"                       
[116] "getOptimize"                               
[117] "getOptimize.fPFOLIOSPEC"                   
[118] "getOptimize.fPORTFOLIO"                    
[119] "getOptions"                                
[120] "getOptions.fPFOLIOSPEC"                    
[121] "getOptions.fPORTFOLIO"                     
[122] "getParams"                                 
[123] "getParams.fPFOLIOSPEC"                     
[124] "getParams.fPORTFOLIO"                      
[125] "getPortfolio"                              
[126] "getPortfolio.fPFOLIOSPEC"                  
[127] "getPortfolio.fPFOLIOVAL"                   
[128] "getPortfolio.fPORTFOLIO"                   
[129] "getRiskFreeRate"                           
[130] "getRiskFreeRate.fPFOLIOSPEC"               
[131] "getRiskFreeRate.fPFOLIOVAL"                
[132] "getRiskFreeRate.fPORTFOLIO"                
[133] "getSeries"                                 
[134] "getSeries.fPFOLIODATA"                     
[135] "getSeries.fPORTFOLIO"                      
[136] "getSigma"                                  
[137] "getSigma.fPFOLIODATA"                      
[138] "getSigma.fPORTFOLIO"                       
[139] "getSmoother"                               
[140] "getSmoother.fPFOLIOBACKTEST"               
[141] "getSmootherDoubleSmoothing"                
[142] "getSmootherDoubleSmoothing.fPFOLIOBACKTEST"
[143] "getSmootherFun"                            
[144] "getSmootherFun.fPFOLIOBACKTEST"            
[145] "getSmootherInitialWeights"                 
[146] "getSmootherInitialWeights.fPFOLIOBACKTEST" 
[147] "getSmootherLambda"                         
[148] "getSmootherLambda.fPFOLIOBACKTEST"         
[149] "getSmootherParams"                         
[150] "getSmootherParams.fPFOLIOBACKTEST"         
[151] "getSmootherSkip"                           
[152] "getSmootherSkip.fPFOLIOBACKTEST"           
[153] "getSolver"                                 
[154] "getSolver.fPFOLIOSPEC"                     
[155] "getSolver.fPORTFOLIO"                      
[156] "getSpec"                                   
[157] "getSpec.fPORTFOLIO"                        
[158] "getStatistics"                             
[159] "getStatistics.fPFOLIODATA"                 
[160] "getStatistics.fPORTFOLIO"                  
[161] "getStatus"                                 
[162] "getStatus.fPFOLIOSPEC"                     
[163] "getStatus.fPFOLIOVAL"                      
[164] "getStatus.fPORTFOLIO"                      
[165] "getStrategy"                               
[166] "getStrategy.fPFOLIOBACKTEST"               
[167] "getStrategyFun"                            
[168] "getStrategyFun.fPFOLIOBACKTEST"            
[169] "getStrategyParams"                         
[170] "getStrategyParams.fPFOLIOBACKTEST"         
[171] "getTailRisk"                               
[172] "getTailRisk.fPFOLIODATA"                   
[173] "getTailRisk.fPFOLIOSPEC"                   
[174] "getTailRisk.fPORTFOLIO"                    
[175] "getTailRiskBudgets"                        
[176] "getTailRiskBudgets.fPORTFOLIO"             
[177] "getTargetReturn"                           
[178] "getTargetReturn.fPFOLIOSPEC"               
[179] "getTargetReturn.fPFOLIOVAL"                
[180] "getTargetReturn.fPORTFOLIO"                
[181] "getTargetRisk"                             
[182] "getTargetRisk.fPFOLIOSPEC"                 
[183] "getTargetRisk.fPFOLIOVAL"                  
[184] "getTargetRisk.fPORTFOLIO"                  
[185] "getTrace"                                  
[186] "getTrace.fPFOLIOSPEC"                      
[187] "getTrace.fPORTFOLIO"                       
[188] "getType"                                   
[189] "getType.fPFOLIOSPEC"                       
[190] "getType.fPORTFOLIO"                        
[191] "getUnits.fPFOLIODATA"                      
[192] "getUnits.fPORTFOLIO"                       
[193] "getWeights"                                
[194] "getWeights.fPFOLIOSPEC"                    
[195] "getWeights.fPFOLIOVAL"                     
[196] "getWeights.fPORTFOLIO"                     
[197] "getWindows"                                
[198] "getWindows.fPFOLIOBACKTEST"                
[199] "getWindowsFun"                             
[200] "getWindowsFun.fPFOLIOBACKTEST"             
[201] "getWindowsHorizon"                         
[202] "getWindowsHorizon.fPFOLIOBACKTEST"         
[203] "getWindowsParams"                          
[204] "getWindowsParams.fPFOLIOBACKTEST"          
[205] "glpkLP"                                    
[206] "glpkLPControl"                             
[207] "ipopQP"                                    
[208] "ipopQPControl"                             
[209] "kendallEstimator"                          
[210] "kestrelQP"                                 
[211] "kestrelQPControl"                          
[212] "lambdaCVaR"                                
[213] "listFConstraints"                          
[214] "lpmEstimator"                              
[215] "LPP2005"                                   
[216] "LPP2005.RET"                               
[217] "markowitzHull"                             
[218] "maxBConstraints"                           
[219] "maxBuyinConstraints"                       
[220] "maxCardConstraints"                        
[221] "maxddMap"                                  
[222] "maxFConstraints"                           
[223] "maxratioPortfolio"                         
[224] "maxreturnPortfolio"                        
[225] "maxsumWConstraints"                        
[226] "maxWConstraints"                           
[227] "mcdEstimator"                              
[228] "minBConstraints"                           
[229] "minBuyinConstraints"                       
[230] "minCardConstraints"                        
[231] "minFConstraints"                           
[232] "minriskPortfolio"                          
[233] "minsumWConstraints"                        
[234] "minvariancePoints"                         
[235] "minvariancePortfolio"                      
[236] "minWConstraints"                           
[237] "modifiedVaR"                               
[238] "monteCarloPoints"                          
[239] "mveEstimator"                              
[240] "nCardConstraints"                          
[241] "neosLP"                                    
[242] "neosLPControl"                             
[243] "neosQP"                                    
[244] "neosQPControl"                             
[245] "netPerformance"                            
[246] "nlminb2NLP"                                
[247] "nlminb2NLPControl"                         
[248] "nnveEstimator"                             
[249] "normalVaR"                                 
[250] "parAnalytics"                              
[251] "pcoutAnalytics"                            
[252] "pfolioCVaR"                                
[253] "pfolioCVaRoptim"                           
[254] "pfolioCVaRplus"                            
[255] "pfolioHist"                                
[256] "pfolioMaxLoss"                             
[257] "pfolioReturn"                              
[258] "pfolioTargetReturn"                        
[259] "pfolioTargetRisk"                          
[260] "pfolioVaR"                                 
[261] "plot.fPORTFOLIO"                           
[262] "portfolioBacktest"                         
[263] "portfolioBacktesting"                      
[264] "portfolioConstraints"                      
[265] "portfolioData"                             
[266] "portfolioFrontier"                         
[267] "portfolioObjective"                        
[268] "portfolioReturn"                           
[269] "portfolioRisk"                             
[270] "portfolioSmoothing"                        
[271] "portfolioSpec"                             
[272] "print.solver"                              
[273] "quadprogQP"                                
[274] "quadprogQPControl"                         
[275] "ramplLP"                                   
[276] "ramplNLP"                                  
[277] "ramplQP"                                   
[278] "rdonlp2"                                   
[279] "rdonlp2NLP"                                
[280] "rglpkLP"                                   
[281] "ripop"                                     
[282] "ripopQP"                                   
[283] "riskBudgetsPlot"                           
[284] "riskMap"                                   
[285] "riskmetricsAnalytics"                      
[286] "riskSurface"                               
[287] "rkestrelQP"                                
[288] "rneosLP"                                   
[289] "rneosQP"                                   
[290] "rnlminb2"                                  
[291] "rnlminb2NLP"                               
[292] "rollingCDaR"                               
[293] "rollingCmlPortfolio"                       
[294] "rollingCVaR"                               
[295] "rollingDaR"                                
[296] "rollingMinvariancePortfolio"               
[297] "rollingPortfolioFrontier"                  
[298] "rollingSigma"                              
[299] "rollingTangencyPortfolio"                  
[300] "rollingVaR"                                
[301] "rollingWindows"                            
[302] "rquadprog"                                 
[303] "rquadprogQP"                               
[304] "rsolnpNLP"                                 
[305] "rsolveLP"                                  
[306] "rsolveQP"                                  
[307] "rsymphonyLP"                               
[308] "sampleCOV"                                 
[309] "sampleVaR"                                 
[310] "setAlpha<-"                                
[311] "setEstimator<-"                            
[312] "setNFrontierPoints<-"                      
[313] "setObjective<-"                            
[314] "setOptimize<-"                             
[315] "setParams<-"                               
[316] "setRiskFreeRate<-"                         
[317] "setSmootherDoubleSmoothing<-"              
[318] "setSmootherFun<-"                          
[319] "setSmootherInitialWeights<-"               
[320] "setSmootherLambda<-"                       
[321] "setSmootherParams<-"                       
[322] "setSmootherSkip<-"                         
[323] "setSolver<-"                               
[324] "setStatus<-"                               
[325] "setStrategyFun<-"                          
[326] "setStrategyParams<-"                       
[327] "setTailRisk<-"                             
[328] "setTargetReturn<-"                         
[329] "setTargetRisk<-"                           
[330] "setTrace<-"                                
[331] "setType<-"                                 
[332] "setWeights<-"                              
[333] "setWindowsFun<-"                           
[334] "setWindowsHorizon<-"                       
[335] "setWindowsParams<-"                        
[336] "sharpeRatioLines"                          
[337] "shrinkEstimator"                           
[338] "singleAssetPoints"                         
[339] "slpmEstimator"                             
[340] "SMALLCAP"                                  
[341] "SMALLCAP.RET"                              
[342] "solnpNLP"                                  
[343] "solnpNLPControl"                           
[344] "solveRampl.CVAR"                           
[345] "solveRampl.MV"                             
[346] "solveRdonlp2"                              
[347] "solveRglpk.CVAR"                           
[348] "solveRglpk.MAD"                            
[349] "solveRipop"                                
[350] "solveRquadprog"                            
[351] "solveRquadprog.CLA"                        
[352] "solveRshortExact"                          
[353] "solveRsocp"                                
[354] "solveRsolnp"                               
[355] "spearmanEstimator"                         
[356] "SPISECTOR"                                 
[357] "SPISECTOR.RET"                             
[358] "stabilityAnalytics"                        
[359] "summary.fPORTFOLIO"                        
[360] "surfacePlot"                               
[361] "SWX"                                       
[362] "SWX.RET"                                   
[363] "symphonyLP"                                
[364] "symphonyLPControl"                         
[365] "tailoredFrontierPlot"                      
[366] "tailRiskBudgetsPie"                        
[367] "tailRiskBudgetsPlot"                       
[368] "tangencyLines"                             
[369] "tangencyPoints"                            
[370] "tangencyPortfolio"                         
[371] "tangencyStrategy"                          
[372] "ternaryCoord"                              
[373] "ternaryFrontier"                           
[374] "ternaryMap"                                
[375] "ternaryPoints"                             
[376] "ternaryWeights"                            
[377] "turnsAnalytics"                            
[378] "twoAssetsLines"                            
[379] "varRisk"                                   
[380] "waveletSpectrum"                           
[381] "weightedReturnsLinePlot"                   
[382] "weightedReturnsPie"                        
[383] "weightedReturnsPlot"                       
[384] "weightsLinePlot"                           
[385] "weightsPie"                                
[386] "weightsPlot"                               
[387] "weightsSlider"
#+end_example

*** portfolioSpec()

#+begin_src R
portfolioSpec(
  model = list(
    type      = "MV",
    optimize  = "minRisk",           
    estimator = "covEstimator",
    tailRisk  = list(),
    params    = list(alpha = 0.05)
  ),
  portfolio         = list(
    weights         = NULL,
    targetReturn    = NULL,
    targetRisk      = NULL,
    riskFreeRate    = 0,
    nFrontierPoints = 50,
    status          = NA
  ),
  optim = list(
    solver    = "solveRquadprog", 
    objective = c("portfolioObjective", "portfolioReturn", "portfolioRisk"),
    options   = list(meq = 2),
    control   = list(),
    trace     = FALSE
  ),
  messages = list(
    messages = FALSE,
    note = ""
  ),
  ampl = list(
    ampl = FALSE,
    project = "ampl",
    solver = "ipopt",
    protocol = FALSE,
    trace = FALSE
  )
)
#+end_src

*** portfolioFrontier()

#+begin_src R
portfolioFrontier(
  data,                     # 多変量の timeSeries object
  spec = portfolioSpec(),   # portfolioSpec() で作成した spec
  constraints = "LongOnly", # 
  include.mvl = TRUE,
  title = NULL,
  description = NULL
)
#+end_src
*** Flow

#+begin_src R :results graphics :file (get-babel-file)
library(fPortfolio)

## 付属のデータセット  timeSeries 型
data <- SMALLCAP.RET[, 1:6]

## Spec を作成
spec <- portfolioSpec()
## Spec に set... 関数で条件を追加していく
setNFrontierPoints(spec) <- 10

## 効率的フロンティア
frontier <- portfolioFrontier(data, spec)
plot(frontier, 1)
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-bQTvLX.png]]


#+begin_src R
## ウェイトの制約条件を入れる
weightConstraints <- c("minW[1:2]=c(0.1, 0.2)", "maxW[1:6]=0.5")
frontier2 <- portfolioFrontier(data, spec, weightConstraints)

print(frontier2, 1)
#+end_src

#+RESULTS:
#+begin_example

<S4 Type Object>
attr(,"call")
portfolioFrontier(data = data, spec = spec, constraints = weightConstraints)
attr(,"data")

Head/Tail Series Data:

GMT 
                  MODI          MGF        MEE        FCEL         OII
1997-01-31  0.06542056 -0.020917431  0.1334661 -0.18644068  0.07874016
1997-02-28 -0.02912281  0.006792453 -0.1476274 -0.01041667 -0.07299270
1997-03-31 -0.10909091 -0.012226415 -0.1308866 -0.15789473 -0.01574803
                   SEB
1997-01-31 -0.12734963
1997-02-28  0.10285407
1997-03-31 -0.02246094
GMT 
                  MODI         MGF        MEE        FCEL        OII        SEB
2001-10-31 -0.15581773  0.02311177  0.3993174 0.055367973 0.20593691 0.06666667
2001-11-30  0.04867471 -0.01750736 -0.1331707 0.005758167 0.04358976 0.21875000
2001-12-31  0.08461180 -0.01016698  0.1688238 0.153943956 0.08697791 0.12179487

Statistics:

$mean
       MODI         MGF         MEE        FCEL         OII         SEB 
0.005669686 0.005445301 0.016664967 0.068826312 0.018454742 0.010171998 

$Cov
              MODI           MGF           MEE          FCEL           OII
MODI  0.0107337478 -1.146223e-04  0.0008746878  0.0051012979  2.012907e-03
MGF  -0.0001146223  3.107564e-04  0.0006879911  0.0005032912  3.912064e-05
MEE   0.0008746878  6.879911e-04  0.0217257566 -0.0010579947  3.374451e-03
FCEL  0.0051012979  5.032912e-04 -0.0010579947  0.0732071221  1.120802e-02
OII   0.0020129066  3.912064e-05  0.0033744514  0.0112080174  2.692470e-02
SEB   0.0034895916  7.225417e-05  0.0018958901 -0.0052183801 -4.016589e-03
               SEB
MODI  3.489592e-03
MGF   7.225417e-05
MEE   1.895890e-03
FCEL -5.218380e-03
OII  -4.016589e-03
SEB   1.556008e-02

$estimator
[1] "covEstimator"

$mu
       MODI         MGF         MEE        FCEL         OII         SEB 
0.005669686 0.005445301 0.016664967 0.068826312 0.018454742 0.010171998 

$Sigma
              MODI           MGF           MEE          FCEL           OII
MODI  0.0107337478 -1.146223e-04  0.0008746878  0.0051012979  2.012907e-03
MGF  -0.0001146223  3.107564e-04  0.0006879911  0.0005032912  3.912064e-05
MEE   0.0008746878  6.879911e-04  0.0217257566 -0.0010579947  3.374451e-03
FCEL  0.0051012979  5.032912e-04 -0.0010579947  0.0732071221  1.120802e-02
OII   0.0020129066  3.912064e-05  0.0033744514  0.0112080174  2.692470e-02
SEB   0.0034895916  7.225417e-05  0.0018958901 -0.0052183801 -4.016589e-03
               SEB
MODI  3.489592e-03
MGF   7.225417e-05
MEE   1.895890e-03
FCEL -5.218380e-03
OII  -4.016589e-03
SEB   1.556008e-02

attr(,"spec")

Model List:	
 Type:                      MV
 Optimize:                  minRisk
 Estimator:                 covEstimator
 Params:                    alpha = 0.05

Portfolio List:	
 Portfolio Weights:         0 0 0 0 0 0
 Target Return:             0.005445302
 Target Risk:               0
 Risk-Free Rate:            0
 Number of Frontier Points: 10
 Status:                    1

Optim List:	
 Solver:                    solveRquadprog
 Objective:                 portfolioObjective portfolioReturn portfolioRisk
 Options:                   meq = 2
 Trace:                     FALSE
attr(,"constraints")

Title:
 Portfolio Constraints

Lower/Upper Bounds:
      MODI MGF MEE FCEL OII SEB
Lower  0.1 0.2 0.0  0.0 0.0 0.0
Upper  0.5 0.5 0.5  0.5 0.5 0.5

Equal Matrix Constraints:
                       ceq         MODI          MGF         MEE        FCEL
Return.Return  0.005445302  0.005669686  0.005445301  0.01666497  0.06882631
Budget        -1.000000000 -1.000000000 -1.000000000 -1.00000000 -1.00000000
                      OII       SEB
Return.Return  0.01845474  0.010172
Budget        -1.00000000 -1.000000

Cardinality Constraints:
      MODI MGF MEE FCEL OII SEB
Lower    0   0   0    0   0   0
Upper    1   1   1    1   1   1
attr(,"portfolio")
An object of class "fPFOLIOVAL"
Slot "portfolio":
$weights
          MODI       MGF        MEE       FCEL        OII       SEB
[1,] 0.1003683 0.5000000 0.08352982 0.06622027 0.08504605 0.1648356
[2,] 0.1000000 0.4542415 0.10124206 0.18755309 0.03587050 0.1210929
[3,] 0.1000000 0.2279552 0.15931257 0.28105311 0.04933440 0.1823447
[4,] 0.1000000 0.2000000 0.16977466 0.40467391 0.00000000 0.1255514

$covRiskBudgets
           MODI         MGF        MEE      FCEL        OII         SEB
[1,] 0.13735973 0.078540803 0.14574827 0.2337615 0.15360331 0.250986404
[2,] 0.07119620 0.038370054 0.07743684 0.7367282 0.03132952 0.044939154
[3,] 0.04540906 0.010041064 0.08450817 0.7846466 0.02999765 0.045397489
[4,] 0.02838016 0.005830749 0.04846873 0.9122459 0.00000000 0.005074418

$targetReturn
           mean         mu
[1,] 0.01248764 0.01248764
[2,] 0.01952997 0.01952997
[3,] 0.02657230 0.02657230
[4,] 0.03361464 0.03361464

$targetRisk
            Cov      Sigma       CVaR        VaR
[1,] 0.03988654 0.03988654 0.08224666 0.07629955
[2,] 0.05998049 0.05998049 0.08975933 0.07859303
[3,] 0.08596787 0.08596787 0.13185868 0.11105832
[4,] 0.11420305 0.11420305 0.17513718 0.15794869

$targetAlpha
[1] 0.05

$minriskPortfolio

Title:
 MV Minimum Variance Portfolio 
 Estimator:         covEstimator 
 Solver:            solveRquadprog 
 Optimize:          minRisk 
 Constraints:       minW maxW 

Portfolio Weights:
  MODI    MGF    MEE   FCEL    OII    SEB 
0.1704 0.5000 0.0723 0.0186 0.0897 0.1491 

Covariance Risk Budgets:
  MODI    MGF    MEE   FCEL    OII    SEB 
0.3157 0.0737 0.1340 0.0344 0.1661 0.2761 

Target Returns and Risks:
  mean    Cov   CVaR    VaR 
0.0093 0.0377 0.0846 0.0698 

Description:
 Thu Aug  8 13:24:40 2019 by user: shun 

$status
[1] 0


Slot "messages":
list()

attr(,"title")
[1] "Portfolio Frontier"
attr(,"description")
[1] "Thu Aug  8 13:24:40 2019 by user: shun"
attr(,"class")
[1] "fPORTFOLIO"
attr(,"class")attr(,"package")
[1] "fPortfolio"
#+end_example

** {PortfolioAnalytics}
*** Overview

- ={PerformanceAnalytics}= とおなじ Brian G. Peterson 作
- Vignette が充実している
- {fPortfolio} は、timeSeries を利用しているのに対して、様々なデータを入力できる

- Complex Portfolio Optimization with PortfolioAnalytics @ R/Finance 2014
  http://past.rinfinance.com/agenda/2014/workshop/RossBennett.pdf
  
*** All functions

#+begin_src R
ls("package:PortfolioAnalytics")
#+end_src

#+RESULTS:
#+begin_example
  [1] "ac.ranking"                        "add.constraint"                   
  [3] "add.objective"                     "add.objective_v1"                 
  [5] "add.objective_v2"                  "add.sub.portfolio"                
  [7] "applyFUN"                          "black.litterman"                  
  [9] "box_constraint"                    "CCCgarch.MM"                      
 [11] "center"                            "centroid.buckets"                 
 [13] "centroid.complete.mc"              "centroid.sectors"                 
 [15] "centroid.sign"                     "chart.Concentration"              
 [17] "chart.EF.Weights"                  "chart.EfficientFrontier"          
 [19] "chart.EfficientFrontierOverlay"    "chart.GroupWeights"               
 [21] "chart.RiskBudget"                  "chart.RiskReward"                 
 [23] "chart.Weights"                     "combine.optimizations"            
 [25] "combine.portfolios"                "constrained_objective"            
 [27] "constrained_objective_v1"          "constrained_objective_v2"         
 [29] "constraint"                        "constraint_ROI"                   
 [31] "constraint_v1"                     "constraint_v2"                    
 [33] "create.EfficientFrontier"          "diversification"                  
 [35] "diversification_constraint"        "EntropyProg"                      
 [37] "equal.weight"                      "extractCokurtosis"                
 [39] "extractCoskewness"                 "extractCovariance"                
 [41] "extractEfficientFrontier"          "extractGroups"                    
 [43] "extractObjectiveMeasures"          "extractStats"                     
 [45] "extractWeights"                    "factor_exposure_constraint"       
 [47] "fn_map"                            "generatesequence"                 
 [49] "group_constraint"                  "HHI"                              
 [51] "insert_objectives"                 "inverse.volatility.weight"        
 [53] "is.constraint"                     "is.objective"                     
 [55] "is.portfolio"                      "leverage_exposure_constraint"     
 [57] "meanetl.efficient.frontier"        "meanvar.efficient.frontier"       
 [59] "meucci.moments"                    "meucci.ranking"                   
 [61] "minmax_objective"                  "mult.portfolio.spec"              
 [63] "objective"                         "optimize.portfolio"               
 [65] "optimize.portfolio_v1"             "optimize.portfolio_v2"            
 [67] "optimize.portfolio.parallel"       "optimize.portfolio.rebalancing"   
 [69] "optimize.portfolio.rebalancing_v1" "portfolio_risk_objective"         
 [71] "portfolio.spec"                    "pos_limit_fail"                   
 [73] "position_limit_constraint"         "quadratic_utility_objective"      
 [75] "random_portfolios"                 "random_portfolios_v1"             
 [77] "random_portfolios_v2"              "random_walk_portfolios"           
 [79] "randomize_portfolio"               "randomize_portfolio_v1"           
 [81] "randomize_portfolio_v2"            "regime.portfolios"                
 [83] "return_constraint"                 "return_objective"                 
 [85] "risk_budget_objective"             "rp_grid"                          
 [87] "rp_sample"                         "rp_simplex"                       
 [89] "rp_transform"                      "scatterFUN"                       
 [91] "set.portfolio.moments"             "statistical.factor.model"         
 [93] "trailingFUN"                       "transaction_cost_constraint"      
 [95] "turnover"                          "turnover_constraint"              
 [97] "turnover_objective"                "update_constraint_v1tov2"         
 [99] "var.portfolio"                     "weight_concentration_objective"   
[101] "weight_sum_constraint"
#+end_example

*** portfolio.spec()

#+begin_src R
portfolio.spec(
  assets = NULL, # character of assets, named vector + weight
  category_labels = NULL, # character vector (sector, industry, etc)
  weight_seq = NULL,
  message = FALSE
)
#+end_src

*** add.constraint()

_type arguments_
- ~weight_sum~ (also ~leverage~ or ~weight~)
  min_sum, max_sum
  
  ※ min_sum=1, max=sum=1 -> ~type="full_investment"~
  ※ min_sum=0, max=sum=0 -> ~type="dollar_neutral"~ or ~type="active"~
  ※ 実際には、0 や 1 とせずに、-0.01 や 1.01 のように指定する
  
- ~box~ (銘柄単位のウェイト上限・下限)
  assets, min, max, min_mult, max_mult
  
  ※ min=0, max=1 -> ~type="long_only"~
  ※ short の場合はマイナスで指定する
  
- ~group~ (グループ毎に上限・下限)
  assets, groups, group_labels = NULL, group_min, group_max, group_pos = NULL
  
- ~turnover~ (for global solver)
  turnover_target
  
- ~diversification~ (for global solver)
  div_target = NULL 
  
- ~position_limit~ (ポジション数の制約, 最低 10 銘柄をもつ等)
  assets, max_pos = NULL, max_pos_long = NULL, max_pos_short = NULL
  
  ※利用する solver 毎に使える引数が異なる (by Vignette)
  
- ~return~ (Target mean return を指定)
  return_target
  
- ~factor_exposure~ (Market Neutral 戦略 => beta = 0 を実現したいときなど)
  assets, B, lower, upper
  
- ~leverage_exposure~
  leverage = NULL
  
#+begin_src R
add.constraint(
  portfolio, # porfolio object
  type, # see above 
  enabled = TRUE,
  message = FALSE,
  ..., # type 毎の追加引数
  indexnum = NULL
)
#+end_src

*** add.objectives()

_type arguments_
- return
  mean return の最大化など

- risk
  portfolio var の最小化など

- risk_budget
  総リスクに対して、各銘柄の寄与度を等しくする？
  一つの銘柄でリスクを取りすぎないようにする
  リスクバジェッティング
  
- quadratic_utility
  return/risk を組み合わせた最適化 (Sharpe など)
 
- weight_concentration

#+begin_src R
add.objective(
  portfolio,
  constraints = NULL,
  type,             # see above
  name,             # name of objectives function
  arguments = NULL, # args for objectives function
  enabled = TRUE,
  ...,
  indexnum = NULL)
#+end_src

*** Solver

*Linear and Quadratic Programming Solvers*
- ROI (R Optimization Infrastructure)
  ~{ROI}~ は、さまざまな最適化パッケージのラッパー
  GLPK: ~{Rglpk}~ 
  Symphony: ~{Rsymphony}~
  Quadprog: ~{quadprog}~ 

*Global (stochastic or continuous solvers)*
- random
  "sample", "simplex", "grid"

- DEoptim: ~DEoptim::DEoptim()~
  *Differential evolution* is a stochastic global optimization algorithm

- pso: ~pso::psoptim()~
  *Particle swarm optimization* is a heuristic optimization algorithm
  
- GenSA: ~GenSA::GenSA()~
  *Generalized simmulated annealing* is generic probabilistic heuristic optimization algorithm
  
*** optimize.portfolio() / optimize.porfolio.rebalancing()

#+begin_src R
optimize.portfolio(
  R, # xts, vector, matrix, data.frame, timeSeries or zoo
  portfolio = NULL,
  constraints = NULL,
  objectives = NULL,
  optimize_method = c("DEoptim", "random", "ROI", "pso", "GenSA"),
  search_size = 20000,
  trace = FALSE,
  ...,
  rp = NULL,
  momentFUN = "set.portfolio.moments",
  message = FALSE
)

optimize.portfolio.rebalancing(
  R,
  portfolio = NULL,
  constraints = NULL,
  objectives = NULL,
  optimize_method = c("DEoptim", "random", "ROI"),
  search_size = 20000,
  trace = FALSE,
  ...,
  rp = NULL,
  rebalance_on = NULL,
  training_period = NULL,
  rolling_window = NULL
)
#+end_src

*** Analyze Results

- Charts
  plot()
  chart.Concentration()
  chart.EfficientFrontier()
  chart.RiskReward()
  chart.RiskBudget()
  chart.Weights()

- Data Extraction
  extractObjectiveMeasures()
  extractStats()
  extractWeights()
  print()
  summary()

*** Vignette
**** Data

#+begin_src R
## EDHEC composite hedge fund style index returns data (xts)
## 1997-01 ~ 2009-08
data(edhec)
returns <- edhec[, 1:4]
colnames(returns) <- c("CA", "CTAG", "DS", "EM")
head(returns, 5)
tail(returns, 5)
#+end_src

#+RESULTS:
#+begin_example

               CA    CTAG      DS      EM
1997-01-31 0.0119  0.0393  0.0178  0.0791
1997-02-28 0.0123  0.0298  0.0122  0.0525
1997-03-31 0.0078 -0.0021 -0.0012 -0.0120
1997-04-30 0.0086 -0.0170  0.0030  0.0119
1997-05-31 0.0156 -0.0015  0.0233  0.0315

               CA    CTAG     DS     EM
2009-04-30 0.0500 -0.0140 0.0387 0.0663
2009-05-31 0.0578  0.0213 0.0504 0.0884
2009-06-30 0.0241 -0.0147 0.0198 0.0013
2009-07-31 0.0611 -0.0012 0.0311 0.0451
2009-08-31 0.0315  0.0054 0.0244 0.0166
#+end_example

**** Portfolio Object

#+begin_src R
fund.names <- colnames(returns)
pspec <- portfolio.spec(assets=fund.names)
print.default(pspec)
#+end_src

#+RESULTS:
#+begin_example

$assets
  CA CTAG   DS   EM 
0.25 0.25 0.25 0.25 

$category_labels
NULL

$weight_seq
NULL

$constraints
list()

$objectives
list()

$call
portfolio.spec(assets = fund.names)

attr(,"class")
[1] "portfolio.spec" "portfolio"
#+end_example

**** Adding Constraints

- ~add.constraint()~ で追加していく
- または、個別の関数で制約条件を作成する ~weight_sum_constraint()~

- フルインベストメントの制約を追加
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="weight_sum", # type = "full_investment" と同じ
                        min_sum=1,
                        max_sum=1)
#+end_src

#+RESULTS:

- type = "box" 銘柄単位のウェイト上限・下限
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="box",
                        min=0.05,
                        max=0.4)

pspec <- add.constraint(portfolio=pspec,
                        type="box",
                        min=c(0.05, 0, 0.08, 0.1),
                        max=c(0.4, 0.3, 0.7, 0.55))
#+end_src

#+RESULTS:

- type = "group" グループ毎の上限・下限
- 銘柄 1-3=GroupA, 4=GroupB
#+begin_src R
pspec <- add.constraint(portfolio=pspec, type="group",
                        groups=list(groupA=c(1, 2, 3),
                                    groupB=4),
                        group_min=c(0.1, 0.15),
                        group_max=c(0.85, 0.55))
#+end_src

#+RESULTS:

- type = "position_limit"
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="position_limit",
                        max_pos=3)
#+end_src

#+RESULTS:

- type = "diversification"
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="diversification",
                        div_target=0.7)
#+end_src

#+RESULTS:

- type = "turnover"
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="turnover",
                        turnover_target=0.2)
#+end_src

#+RESULTS:

- type = "return"
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="return",
                        return_target=0.007)
#+end_src

- type = "factor_exposure"
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="factor_exposure",
                        B=c(-0.08, 0.37, 0.79, 1.43),
                        lower=0.6,
                        upper=0.9)

## 別の資料での例 (Market Neutral)
## Add constraint such that the portfolio beta is between -0.25 and 0.25
betas <- t(CAPM.beta(equity.data, market, Rf))
portf.dn <- add.constraint(portf.dn,
                           type="factor_exposure",
                           B=betas,
                           lower=-0.25,
                           upper=0.25)
#+end_src

#+RESULTS:

- type = "transaction_cost"
#+begin_src R
pspec <- add.constraint(portfolio=pspec,
                        type="transaction_cost",
                        ptc=0.01)
#+end_src

#+RESULTS:

**** Adding Objectvives

- Mean return での最適化
#+begin_src R
pspec <- add.objective(portfolio=pspec,
                       type='return',
                       name='mean')
#+end_src

- ETL (Expected Short Fall) での最適化
#+begin_src R
pspec <- add.objective(portfolio=pspec,
                       type='risk',
                       name='ETL', # PerformanceAnalytics::ETL() を指定
                       arguments=list(p=0.95)) # ETL()への引数
#+end_src

- 銘柄単位でのリスクの寄与度 (max_prisk=0.3) で最適化
#+begin_src R
pspec <- add.objective(portfolio=pspec,
                       type="risk_budget",
                       name="ETL",
                       arguments=list(p=0.95),
                       max_prisk=0.3)
                       
## for an equal risk contribution portfolio, set min_concentration=TRUE
pspec <- add.objective(portfolio=pspec,
                       type="risk_budget",
                       name="ETL",
                       arguments=list(p=0.95),
                       min_concentration=TRUE)
#+end_src

- type = "weight_concentration"
- HHI = Herfindahl-Hirschman Index
#+begin_src R
pspec <- add.objective(portfolio=pspec,
                       type="weight_concentration",
                       name="HHI",
                       conc_aversion=0.1)
                       
pspec <- add.objective(portfolio=pspec,
                       type="weight_concentration",
                       name="HHI",
                       conc_aversion=c(0.03, 0.06),
                       conc_groups=list(c(1, 2),
                                        c(3, 4)))
#+end_src

**** Optimization
***** Initial spec

#+begin_src R
library(DEoptim)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)

data(edhec)
R <- edhec[, 1:6]
colnames(R) <- c("CA", "CTAG", "DS", "EM", "EQMN", "ED")
funds <- colnames(R)

## Create an initial portfolio object with leverage and box constraints
init <- portfolio.spec(assets=funds)

init <- add.constraint(portfolio=init,
                       type="leverage",
                       min_sum=0.99,
                       max_sum=1.01)

init <- add.constraint(portfolio=init,
                       type="box",
                       min=0.05,
                       max=0.65)
init                       
#+end_src

#+RESULTS:
#+begin_example

,**************************************************
PortfolioAnalytics Portfolio Specification 
,**************************************************

Call:
portfolio.spec(assets = funds)

Number of assets: 6 
Asset Names
[1] "CA"   "CTAG" "DS"   "EM"   "EQMN" "ED"  

Constraints
Enabled constraint types
		- leverage 
		- box
#+end_example

***** Maximize mean returns

#+begin_src R
maxret <- add.objective(portfolio=init,
                        type="return",
                        name="mean")
opt_maxret <- optimize.portfolio(R=R,
                                 portfolio=maxret,
                                 optimize_method="ROI",
                                 trace=TRUE)
opt_maxret
#+end_src

#+RESULTS:
#+begin_example

,***********************************
PortfolioAnalytics Optimization
,***********************************

Call:
optimize.portfolio(R = R, portfolio = maxret, optimize_method = "ROI", 
    trace = TRUE)

Optimal Weights:
  CA CTAG   DS   EM EQMN   ED 
0.05 0.05 0.16 0.65 0.05 0.05 

Objective Measure:
    mean 
0.007959
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
plot(opt_maxret, risk.col="StdDev", return.col="mean",
     main="Maximum Return Optimization", chart.assets=TRUE,
     xlim=c(0, 0.05), ylim=c(0,0.0085))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-t1vaIP.png]]

***** Minimize variance

#+begin_src R
minvar <- add.objective(portfolio=init,
                        type="risk",
                        name="var")

## Run the optimization. 
## Note that although ’var’ is the risk metric,
## ’StdDev’ is returned as an objective measure.
opt_minvar <- optimize.portfolio(R=R,
                                 portfolio=minvar,
                                 optimize_method="ROI",
                                 trace=TRUE)
opt_minvar
#+end_src

#+RESULTS:
#+begin_example

,***********************************
PortfolioAnalytics Optimization
,***********************************

Call:
optimize.portfolio(R = R, portfolio = minvar, optimize_method = "ROI", 
    trace = TRUE)

Optimal Weights:
  CA CTAG   DS   EM EQMN   ED 
0.05 0.14 0.05 0.05 0.65 0.05 

Objective Measure:
 StdDev 
0.01005
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
plot(opt_minvar, risk.col="StdDev", return.col="mean",
     main="Minimum Variance Optimization", chart.assets=TRUE,
     xlim=c(0, 0.05), ylim=c(0,0.0085))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-e9weXf.png]]

***** Maximize quadratic utility

- quadratic = 二次

#+begin_src R
qu <- add.objective(portfolio=init,
                    type="return",
                    name="mean")
qu <- add.objective(portfolio=qu,
                    type="risk",
                    name="var",
                    risk_aversion=0.25)

opt_qu <- optimize.portfolio(R=R,
                             portfolio=qu,
                             optimize_method="ROI",
                             trace=TRUE)
opt_qu
#+end_src

#+RESULTS:
#+begin_example

,***********************************
PortfolioAnalytics Optimization
,***********************************

Call:
optimize.portfolio(R = R, portfolio = qu, optimize_method = "ROI", 
    trace = TRUE)

Optimal Weights:
    CA   CTAG     DS     EM   EQMN     ED 
0.0500 0.0500 0.2714 0.5386 0.0500 0.0500 

Objective Measure:
    mean 
0.007926 


 StdDev 
0.02663
#+end_example

#+begin_src R :results graphics :file (get-babel-file)
plot(opt_qu, risk.col="StdDev", return.col="mean",
     main="Quadratic Utility Optimization", chart.assets=TRUE,
     xlim=c(0, 0.05), ylim=c(0, 0.0085))
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-cXDyYi.png]]

***** Minimize ETL

#+begin_src R
etl <- add.objective(portfolio=init, type="risk", name="ETL")
opt_etl <- optimize.portfolio(R=R,
                              portfolio=etl,
                              optimize_method="ROI",
                              trace=TRUE)
opt_etl
#+end_src

#+RESULTS:
#+begin_example

,***********************************
PortfolioAnalytics Optimization
,***********************************

Call:
optimize.portfolio(R = R, portfolio = etl, optimize_method = "ROI", 
    trace = TRUE)

Optimal Weights:
    CA   CTAG     DS     EM   EQMN     ED 
0.0500 0.2968 0.0500 0.0500 0.4932 0.0500 

Objective Measure:
    ETL 
0.01967
#+end_example

*** Demo: Maximize Sharpe Ratio
**** by ROI

https://stackoverflow.com/questions/48526361/cant-use-sharperatio-in-portfolioanalytics-to-optimize-a-portfolio

#+begin_src R
## Examples of solving optimization problems to maximize mean return per unit StdDev
data(edhec)
R <- edhec[, 1:8]
funds <- colnames(R)

## Construct initial portfolio
init.portf <- portfolio.spec(assets=funds)
init.portf <- add.constraint(portfolio=init.portf, type="full_investment")
init.portf <- add.constraint(portfolio=init.portf, type="long_only")
init.portf <- add.objective(portfolio=init.portf, type="return", name="mean")
init.portf <- add.objective(portfolio=init.portf, type="risk", name="StdDev")
init.portf

## Maximizing Sharpe Ratio can be formulated as a quadratic programming
## problem and solved very quickly using optimize_method="ROI". Although "StdDev"
## was specified as an objective, the quadratic programming problem uses the
## variance-covariance matrix in the objective function.

## The default action if "mean" and "StdDev" are specified as objectives with
## optimize_method="ROI" is to maximize quadratic utility. If we want to maximize
## Sharpe Ratio, we need to pass in maxSR=TRUE to optimize.portfolio.

maxSR.lo.ROI <- optimize.portfolio(R=R, portfolio=init.portf,
                                   optimize_method="ROI",
                                   maxSR=TRUE, trace=TRUE)
maxSR.lo.ROI
#+end_src

#+RESULTS:
#+begin_example

,**************************************************
PortfolioAnalytics Portfolio Specification 
,**************************************************

Call:
portfolio.spec(assets = funds)

Number of assets: 8 
Asset Names
[1] "Convertible Arbitrage"  "CTA Global"             "Distressed Securities" 
[4] "Emerging Markets"       "Equity Market Neutral"  "Event Driven"          
[7] "Fixed Income Arbitrage" "Global Macro"          

Constraints
Enabled constraint types
		- full_investment 
		- long_only 

Objectives:
Enabled objective names
		- mean 
		- StdDev

,***********************************
PortfolioAnalytics Optimization
,***********************************

Call:
optimize.portfolio(R = R, portfolio = init.portf, optimize_method = "ROI", 
    trace = TRUE, maxSR = TRUE)

Optimal Weights:
 Convertible Arbitrage             CTA Global  Distressed Securities 
                0.0000                 0.0869                 0.0793 
      Emerging Markets  Equity Market Neutral           Event Driven 
                0.0000                 0.8338                 0.0000 
Fixed Income Arbitrage           Global Macro 
                0.0000                 0.0000 

Objective Measure:
  StdDev 
0.009021 


  mean 
0.0062
#+end_example

**** by random

Although the maximum Sharpe Ratio objective can be solved quickly and accurately
ith optimize_method="ROI", it is also possible to solve this optimization
problem using other solvers such as random portfolios or DEoptim. These
solvers have the added flexibility of using different methods to calculate
the Sharpe Ratio (e.g. we could specify annualized measures of risk and return).

#+begin_src R :results graphics :file (get-babel-file)
## For random portfolios and DEoptim, the leverage constraints should be
## relaxed slightly.
init.portf$constraints[[1]]$min_sum=0.99
init.portf$constraints[[1]]$max_sum=1.01

## Use random portfolios
maxSR.lo.RP <- optimize.portfolio(R=R, portfolio=init.portf,
                                  optimize_method="random",
                                  search_size=2000,
                                  trace=TRUE)
maxSR.lo.RP
chart.RiskReward(maxSR.lo.RP, risk.col="StdDev", return.col="mean")


#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-Zho7lF.png]]

**** by DEoptim

#+begin_src R :results graphics :file (get-babel-file)
## Use DEoptim
maxSR.lo.DE <- optimize.portfolio(R=R, portfolio=init.portf,
                                  optimize_method="DEoptim",
                                  search_size=2000,
                                  trace=TRUE)
maxSR.lo.DE
chart.RiskReward(maxSR.lo.DE, risk.col="StdDev", return.col="mean")
#+end_src

#+RESULTS:
[[file:~/Dropbox/memo/img/babel/fig-kLj0JW.png]]

** {RiskPortfolios}
*** All Functions

#+begin_src R
ls("package:RiskPortfolios")
#+end_src

#+RESULTS:
: [1] "covEstimation"     "meanEstimation"    "optimalPortfolio" 
: [4] "semidevEstimation"

*** optimalPortfolio()

- 分散共分散行列とリターンを入力して、ウェイトを返す関数

- type
  mv      = mean-variance portfolio
  minvol  = minimum variance portfolio
  invvol  = inverse volatility portfolio
  erc     = equal-risk-contribution portfolio (リスクパリティ)
  maxdiv  = maximum diversification portfolio
  riskeff = risk-efficient portfolio:
  
- constraint
  none
  lo    = long only
  gross = gross exposure
  user  = user contributions (LB, UB)

#+begin_src R
optimalPortfolio(
  Sigma,           # N x N covariance matrix
  mu = NULL,       # N x 1 vector of expected returns. Default: mu = NULL.
  semiDev = NULL,  # N x 1 vector of semideviations. Default: semiDev = NULL
  control = list()
  ## type = c('mv', 'minvol', 'invvol', 'erc', 'maxdiv', 'riskeff', 'maxdec')
  ## constraint = c('none', 'lo', 'gross', 'user')
  ## LB = NULL (Lower Boundary)
  ## UB = NULL (Upper Boundary)
  ## w0 = NULL (Optimizerの初期値)
  ## gross.c = 1.6 (Gross Exposure Constraint)
  ## gamma = 0.89 (Risk aversion parameter)
  ## ctr.slsqp # list of slsqp() args
)
#+end_src

*** meanEstimation()

- type
  naive arithmetic mean of the returns.
  ewma  exponential weighted moving average mean of the returns
        The data must be sorted from the oldest to the latest
        See RiskMetrics (1996)
  bs    Bayes-Stein estimation. See Jorion (1986).
  mart  Martinelli (2008) implied returns.
  
#+begin_src R
meanEstimation(
  rets, # T x N matrix of past returns
  control = list())
  ## type = c('naive', 'ewma', 'bs', 'mart')
  ## lambda = 0.94 (Lambda decay parameter)
#+end_src

*** covEstimation()

#+begin_src R
covEstimation(
  rets, # T x N matrix returns
  control = list())
  ## type = c('naive', 'ewma', 'lw', 'factor','const', 'cor', 'oneparm', 'diag', 'large')
  ## lambda = 0.94
  ## K = 1
#+end_src

*** semidevEstimation()

#+begin_src R
semidevEstimation(
  rets, # T x N past returns
  control = list())
  ## type = c('naive', 'ewma')
  ## lambda = 0.94
#+end_src

** {portfolio}
* 参考

- ブログ
  - [[http://osashimix.hatenablog.com/entry/2019/02/17/201742][【仕事関連】Asset Allocation Model を R で組んでみた。@東京の投資顧問会社で働く社会人が研究に没頭するブログ]]
  - [[http://grg.hatenablog.com/entry/2017/03/12/233826][S&P500と日経225の時系列分析（DCCモデル・多変量GARCH）@GRGと金融工学・統計解析]]
  - [[http://grg.hatenablog.com/entry/2017/03/13/101234][コピュラとは（時系列分析・DCDモデルの前準備として）@GRGと金融工学・統計解析]]
  - [[http://grg.hatenablog.com/entry/2017/03/19/001059][S&P500と日経225の時系列分析（コピュラ ＆ DCDモデル）@GRGと金融工学・統計解析]]
  - [[https://www.r-bloggers.com/introduction-to-asset-allocation/][Introduction to Asset Allocation@R-bloggers]]
  - [[https://stackoverflow.com/questions/34636402/using-covariance-matrix-for-portfolio-optimization-in-r][Using Covariance matrix for Portfolio Optimization in R@stackoverflow]]
  - [[https://github.com/inertia7/timeSeries_sp500_R][Forecasting the Stock Market (R)@Github]]


